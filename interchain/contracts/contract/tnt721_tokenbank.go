// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TNT721TokenBankMetaData contains all meta data concerning the TNT721TokenBank contract.
var TNT721TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mainchainID_\",\"type\":\"uint256\"},{\"internalType\":\"contractChainRegistrar\",\"name\":\"chainRegistrar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainTokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenUnlockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainVoucherOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721VoucherBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voucherContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherMintNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721VoucherMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDenoms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVouchers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomToVoucherLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherAddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherContractAddr\",\"type\":\"address\"}],\"name\":\"getDenom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedTokenLockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedVoucherBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getVoucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subchainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenLockVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUnlockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalLockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucherAddressToDenomLookup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherBurnNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherBurnVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherMintNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceChainTNT20Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"mintVouchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceChainVoucherContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burnVouchers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200507f3803806200507f833981016040819052620000349162000064565b6001600081905591909155600380546001600160a01b0319166001600160a01b03909216919091179055620000a3565b600080604083850312156200007857600080fd5b825160208401519092506001600160a01b03811681146200009857600080fd5b809150509250929050565b614fcc80620000b36000396000f3fe6080604052600436106200015b5760003560e01c80638883931e11620000c5578063ccf187c71162000078578063ccf187c714620004c9578063ebda996214620004fa578063f6a3d24e146200051f578063f8e8f7aa146200055f578063f95627ac1462000577578063feaff05214620005a857600080fd5b80638883931e14620003d25780639c67257d1462000403578063a0df5cc51462000445578063a2cc6981146200045c578063bff4c41a1462000481578063ca207569146200049857600080fd5b806344b7b352116200011e57806344b7b35214620002c9578063588b140814620002f057806360569b5e1462000324578063740cb7f81462000359578063766f8fb0146200038a5780637ff75b4614620003bb57600080fd5b8063073b950214620001605780631527b14d146200018b5780631eb7873714620001fc578063261a323e146200025557806327ca4df1146200028b575b600080fd5b3480156200016d57600080fd5b506200017860015481565b6040519081526020015b60405180910390f35b3480156200019857600080fd5b50620001dc620001aa36600462002b0f565b8051602081830181018051600c825292820191909301209152546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b03909316835290151560208301520162000182565b3480156200020957600080fd5b506200023f6200021b36600462002d43565b600a6020908152600092835260408084209091529082529020805460029091015482565b6040805192835260208301919091520162000182565b3480156200026257600080fd5b506200027a6200027436600462002b0f565b620005eb565b604051901515815260200162000182565b3480156200029857600080fd5b50620002b0620002aa36600462002cb2565b6200062f565b6040516001600160a01b03909116815260200162000182565b348015620002d657600080fd5b50620002ee620002e836600462002bc8565b6200065a565b005b348015620002fd57600080fd5b50620003156200030f36600462002cb2565b62000969565b60405162000182919062002ff9565b3480156200033157600080fd5b5062000349620003433660046200298b565b62000a1e565b6040516200018292919062003171565b3480156200036657600080fd5b50620001786200037836600462002cb2565b60076020526000908152604090205481565b3480156200039757600080fd5b5062000178620003a936600462002cb2565b60009081526009602052604090205490565b620002ee620003cc36600462002d66565b62000acd565b348015620003df57600080fd5b5062000178620003f136600462002cb2565b60046020526000908152604090205481565b3480156200041057600080fd5b50620001786200042236600462002d19565b601060209081526000938452604080852082529284528284209052825290205481565b620002ee62000456366004620029cb565b62000d95565b3480156200046957600080fd5b50620002b06200047b36600462002b0f565b62001035565b620002ee6200049236600462002ccc565b620010ab565b348015620004a557600080fd5b5062000178620004b736600462002cb2565b60066020526000908152604090205481565b348015620004d657600080fd5b5062000178620004e836600462002cb2565b60056020526000908152604090205481565b3480156200050757600080fd5b5062000315620005193660046200298b565b620014aa565b3480156200052c57600080fd5b506200027a6200053e3660046200298b565b6001600160a01b03166000908152600d602052604090206001015460ff1690565b3480156200056c57600080fd5b506200017860025481565b3480156200058457600080fd5b50620001786200059636600462002cb2565b60009081526008602052604090205490565b348015620005b557600080fd5b506200023f620005c736600462002d43565b600b6020908152600092835260408084209091529082529020805460029091015482565b600080620005f983620015aa565b9050600c816040516200060d919062002e0f565b9081526040519081900360200190205460ff600160a01b909104169392505050565b600e81815481106200064057600080fd5b6000918252602090912001546001600160a01b0316905081565b60026000541415620006895760405162461bcd60e51b8152600401620006809062003197565b60405180910390fd5b600260009081556200069b89620015aa565b9050600080620006ab83620015bd565b91509150806200070a5760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f206578747261637420636861696e49442066726f6d2064604482015263656e6f6d60e01b606482015260840162000680565b600082848c8c8c8c8c8c8c6040516020016200072f9998979695949392919062002e8d565b60405160208183030381529060405280519060200120905060006200075884888489336200164e565b90508015620009555760405163130d191f60e11b8152309063261a323e906200078690889060040162002ff9565b60206040518083038186803b1580156200079f57600080fd5b505afa158015620007b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007da919062002aeb565b620007f757620007f785620007f1878f8f6200166d565b620016be565b60405163a2cc698160e01b8152600090309063a2cc6981906200081f90899060040162002ff9565b60206040518083038186803b1580156200083857600080fd5b505afa1580156200084d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008739190620029ab565b90506001600160a01b038116620008de5760405162461bcd60e51b815260206004820152602860248201527f74686520766f756368657220666f72207468652064656e6f6d20646f6573206e6044820152671bdd08195e1a5cdd60c21b606482015260840162000680565b620008ec818c8c8c620018e8565b620008f78562001957565b6000600760008781526020019081526020016000205490507f9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91878d848e8c866040516200094a9695949392919062003050565b60405180910390a150505b505060016000555050505050505050505050565b600f81815481106200097a57600080fd5b9060005260206000200160009150905080546200099790620033e4565b80601f0160208091040260200160405190810160405280929190818152602001828054620009c590620033e4565b801562000a165780601f10620009ea5761010080835404028352916020019162000a16565b820191906000526020600020905b815481529060010190602001808311620009f857829003601f168201915b505050505081565b600d6020526000908152604090208054819062000a3b90620033e4565b80601f016020809104026020016040519081016040528092919081815260200182805462000a6990620033e4565b801562000aba5780601f1062000a8e5761010080835404028352916020019162000aba565b820191906000526020600020905b81548152906001019060200180831162000a9c57829003601f168201915b5050506001909301549192505060ff1682565b6002600054141562000af35760405162461bcd60e51b8152600401620006809062003197565b6002600090815562000b0586620015aa565b905060008062000b158362001980565b915091508062000b7e5760405162461bcd60e51b815260206004820152602d60248201527f4661696c656420746f206578747261637420636f6e747261637420616464726560448201526c73732066726f6d2064656e6f6d60981b606482015260840162000680565b60008981526010602090815260408083206001600160a01b03861684528252808320898452909152902054600190811462000c085760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f7420756e6c6f636b207468652072657175657374656420746f6b656044820152621b925160ea1b606482015260840162000680565b60008a85898b8a8a60405160200162000c279695949392919062002f2a565b604051602081830303815290604052805190602001209050600062000c508c89848a3362001a01565b9050801562000d825760008c81526010602090815260408083206001600160a01b038916845282528083208c845290915290205462000c9190600162001a16565b60008d81526010602090815260408083206001600160a01b038a81168086529184528285208f8652909352928190209390935591516323b872dd60e01b8152306004820152918c166024830152604482018b9052906323b872dd90606401600060405180830381600087803b15801562000d0a57600080fd5b505af115801562000d1f573d6000803e3d6000fd5b5050505062000d2e8c62001a2b565b60008c815260056020526040908190205490517ff8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd9062000d789089908e908e908d9087906200312f565b60405180910390a1505b5050600160005550505050505050505050565b6040516375ed4cb160e11b81526001600160a01b0384166004820152600090309063ebda99629060240160006040518083038186803b15801562000dd857600080fd5b505afa15801562000ded573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000e17919081019062002b48565b905080516000141562000e855760405162461bcd60e51b815260206004820152602f60248201527f6661696c656420746f206c6f6f6b75702064656e6f6d20666f7220746865207660448201526e1bdd58da195c8818dbdb9d1c9858dd608a1b606482015260840162000680565b60405163130d191f60e11b8152309063261a323e9062000eaa90849060040162002ff9565b60206040518083038186803b15801562000ec357600080fd5b505afa15801562000ed8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000efe919062002aeb565b62000f4c5760405162461bcd60e51b815260206004820152601f60248201527f566f756368657220636f6e747261637420646f6573206e6f7420657869737400604482015260640162000680565b3362000f5a85828562001a4c565b60008062000f6884620015bd565b915091508062000fce5760405162461bcd60e51b815260206004820152602a60248201527f4661696c656420746f206578747261637420746172676574436861696e49442060448201526966726f6d2064656e6f6d60b01b606482015260840162000680565b62000fd98262001ab9565b600082815260066020526040908190205490517fb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e906200102390879087908b908b9087906200300e565b60405180910390a15050505050505050565b6000806200104383620015aa565b90506000600c8260405162001059919062002e0f565b908152604080516020928190038301812081830190925290546001600160a01b0381168252600160a01b900460ff16158015928201929092529150620010a157519392505050565b5060009392505050565b60026000541415620010d15760405162461bcd60e51b8152600401620006809062003197565b60026000556001548414806200116457506003546040516343b71f0560e01b8152600481018690526001600160a01b03909116906343b71f0590602401602060405180830381600087803b1580156200112957600080fd5b505af11580156200113e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001164919062002aeb565b620011b25760405162461bcd60e51b815260206004820152601960248201527f6e6f7420612076616c696420746172676574436861696e494400000000000000604482015260640162000680565b6040516323b872dd60e01b81523360048201523060248201526044810182905283906001600160a01b038216906323b872dd90606401600060405180830381600087803b1580156200120357600080fd5b505af115801562001218573d6000803e3d6000fd5b5050505060006200125b466040518060400160405280600381526020016237323160e81b81525062001255886001600160a01b0316601462001ada565b62001c94565b60008781526010602090815260408083206001600160a01b038a16845282528083208784529091529020549091506200129690600162001cd8565b60008781526010602090815260408083206001600160a01b038a1684528252808320878452909152902055620012cc8662001ce6565b6000600460008881526020019081526020016000205490507f4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b8233898888886001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200134457600080fd5b505afa15801562001359573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001383919081019062002b48565b896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620013bd57600080fd5b505afa158015620013d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620013fc919081019062002b48565b60405163c87b56dd60e01b8152600481018d90526001600160a01b038c169063c87b56dd9060240160006040518083038186803b1580156200143d57600080fd5b505afa15801562001452573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200147c919081019062002b48565b8960405162001494999897969594939291906200309a565b60405180910390a1505060016000555050505050565b6001600160a01b0381166000908152600d60205260408082208151808301909252805460609392919082908290620014e290620033e4565b80601f01602080910402602001604051908101604052809291908181526020018280546200151090620033e4565b8015620015615780601f10620015355761010080835404028352916020019162001561565b820191906000526020600020905b8154815290600101906020018083116200154357829003601f168201915b50505091835250506001919091015460ff161515602091820152810151909150156200158e575192915050565b5050604080516020810190915260008152919050565b50919050565b6060620015b78262001d07565b92915050565b600080600080620015d585602f60f81b600162001d8d565b9150915080620015ec575060009485945092505050565b600080620015fd8760008662001e29565b9150915080620016165750600096879650945050505050565b600080620016248462001f4c565b91509150806200163f57506000988998509650505050505050565b50976001975095505050505050565b60006200166386868686866008600a62002034565b9695505050505050565b6000803090506000818686866040516200168790620027ff565b62001696949392919062002f80565b604051809103906000f080158015620016b3573d6000803e3d6000fd5b509695505050505050565b6000620016cb83620015aa565b60405163130d191f60e11b8152909150309063261a323e90620016f390849060040162002ff9565b60206040518083038186803b1580156200170c57600080fd5b505afa15801562001721573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001747919062002aeb565b15620017a15760405162461bcd60e51b815260206004820152602260248201527f616e20766f756368657220636f6e747261637420616c72656164792065786973604482015261747360f01b606482015260840162000680565b6040805180820182526001600160a01b0384168152600160208201529051600c90620017cf90849062002e0f565b90815260408051918290036020908101832084518154958301511515600160a01b026001600160a81b03199096166001600160a01b039182161795909517905582820182528483526001838201529285166000908152600d84522081518051929391926200184192849201906200280d565b506020918201516001918201805460ff1916911515919091179055600e80548083019091557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b038616179055600f805491820181556000528251620018e2927f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802909201918401906200280d565b50505050565b6040516334ff261960e21b815284906001600160a01b0382169063d3fc9864906200191c9087908790879060040162002fd0565b600060405180830381600087803b1580156200193757600080fd5b505af11580156200194c573d6000803e3d6000fd5b505050505050505050565b60008181526007602052604081208054600192906200197890849062003282565b909155505050565b6000806000806200199885602f60f81b600262001d8d565b9150915080620019af575060009485945092505050565b600080620019cc87620019c486600162003282565b895162001e29565b9150915080620019e55750600096879650945050505050565b6000620019f2836200246d565b98600198509650505050505050565b60006200166386868686866009600b62002034565b600062001a2482846200335b565b9392505050565b60008181526005602052604081208054600192906200197890849062003282565b604051632770a7eb60e21b81526001600160a01b03838116600483015260248201839052849190821690639dc29fac90604401600060405180830381600087803b15801562001a9a57600080fd5b505af115801562001aaf573d6000803e3d6000fd5b5050505050505050565b60008181526006602052604081208054600192906200197890849062003282565b6060600062001aeb8360026200330e565b62001af890600262003282565b67ffffffffffffffff81111562001b135762001b1362003492565b6040519080825280601f01601f19166020018201604052801562001b3e576020820181803683370190505b509050600360fc1b8160008151811062001b5c5762001b5c6200347c565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062001b8e5762001b8e6200347c565b60200101906001600160f81b031916908160001a905350600062001bb48460026200330e565b62001bc190600162003282565b90505b600181111562001c43576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001bf95762001bf96200347c565b1a60f81b82828151811062001c125762001c126200347c565b60200101906001600160f81b031916908160001a90535060049490941c9362001c3b81620033ca565b905062001bc4565b50831562001a245760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000680565b606062001cd062001ca58562002688565b848460405160200162001cbb9392919062002e2d565b604051602081830303815290604052620015aa565b949350505050565b600062001a24828462003282565b60008181526004602052604081208054600192906200197890849062003282565b60608160005b815181101562001d865762001d4582828151811062001d305762001d306200347c565b01602001516001600160f81b0319166200279e565b82828151811062001d5a5762001d5a6200347c565b60200101906001600160f81b031916908160001a9053508062001d7d816200341b565b91505062001d0d565b5092915050565b82516000908190859082805b8281101562001e1557876001600160f81b03191684828151811062001dc25762001dc26200347c565b01602001516001600160f81b031916141562001e005762001de560018362003282565b91508682141562001e005794506001935062001e2192505050565b8062001e0c816200341b565b91505062001d99565b50600080945094505050505b935093915050565b82516060906000908484101562001e555750506040805160208101909152600080825290915062001e21565b8084111562001e795750506040805160208101909152600080825290915062001e21565b85600062001e88868862001a16565b67ffffffffffffffff81111562001ea35762001ea362003492565b6040519080825280601f01601f19166020018201604052801562001ece576020820181803683370190505b509050865b868110156200163f5782818151811062001ef15762001ef16200347c565b01602001516001600160f81b0319168262001f0d838b62001a16565b8151811062001f205762001f206200347c565b60200101906001600160f81b031916908160001a9053508062001f43816200341b565b91505062001ed3565b80516000908190839082805b828110156200202757603084828151811062001f785762001f786200347c565b016020015160f81c1080159062001fac5750603984828151811062001fa15762001fa16200347c565b016020015160f81c11155b15620020035762001fbf82600a620027f1565b915062001ffb603085838151811062001fdc5762001fdc6200347c565b016020015162001ff0919060f81c62003375565b839060ff1662001cd8565b915062002012565b50600096879650945050505050565b806200201e816200341b565b91505062001f58565b5095600195509350505050565b6000600154881480620020c457506003546040516343b71f0560e01b8152600481018a90526001600160a01b03909116906343b71f0590602401602060405180830381600087803b1580156200208957600080fd5b505af11580156200209e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020c4919062002aeb565b620021045760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b604482015260640162000680565b6000888152602084905260409020546200212090600162003282565b8514620021305750600062002462565b600088815260208381526040808320898452909152812060015460609081908c908114156200215e57506002545b6003546040516343f27e4560e01b815260048101839052602481018e90526001600160a01b03909116906343f27e4590604401600060405180830381600087803b158015620021ac57600080fd5b505af1158015620021c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620021eb919081019062002a11565b9350915060005b82518110156200235f57896001600160a01b03168382815181106200221b576200221b6200347c565b60200260200101516001600160a01b03161462002238576200234a565b6001955060005b6001860154811015620022e2578560010181815481106200226457620022646200347c565b6000918252602090912001546001600160a01b038c811691161415620022cd5760405162461bcd60e51b815260206004820152601c60248201527f546869732076616c696461746f7220616c726561647920766f74656400000000604482015260640162000680565b80620022d9816200341b565b9150506200223f565b508c85556001808601805491820181556000908152602090200180546001600160a01b03191633179055835162002344908590839081106200232857620023286200347c565b6020026020010151866002015462001cd890919063ffffffff16565b60028601555b8062002356816200341b565b915050620021f2565b50505082620023a35760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b604482015260640162000680565b6000805b8251811015620023f957620023e2838281518110620023ca57620023ca6200347c565b60200260200101518362001cd890919063ffffffff16565b915080620023f0816200341b565b915050620023a7565b5062002407816002620027f1565b600284015462002419906003620027f1565b10620024595760008c8152602088905260409020546200243b90600162003282565b60008d81526020899052604090205550600193506200246292505050565b60009450505050505b979650505050505050565b60008181808060025b602a8110156200267d576200248e61010085620032dc565b9350848181518110620024a557620024a56200347c565b016020015160f81c925084620024bd82600162003282565b81518110620024d057620024d06200347c565b016020015160f81c915060616001600160a01b03841610801590620024ff57506066836001600160a01b031611155b156200251a576200251260578462003330565b92506200258d565b6041836001600160a01b0316101580156200253f57506046836001600160a01b031611155b1562002552576200251260378462003330565b6030836001600160a01b0316101580156200257757506039836001600160a01b031611155b156200258d576200258a60308462003330565b92505b6061826001600160a01b031610158015620025b257506066826001600160a01b031611155b15620025cd57620025c560578362003330565b915062002640565b6041826001600160a01b031610158015620025f257506046826001600160a01b031611155b156200260557620025c560378362003330565b6030826001600160a01b0316101580156200262a57506039826001600160a01b031611155b1562002640576200263d60308362003330565b91505b816200264e846010620032dc565b6200265a919062003254565b62002666908562003254565b93506200267560028262003282565b905062002476565b509195945050505050565b606081620026ad5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620026dd5780620026c4816200341b565b9150620026d59050600a83620032c5565b9150620026b1565b60008167ffffffffffffffff811115620026fb57620026fb62003492565b6040519080825280601f01601f19166020018201604052801562002726576020820181803683370190505b5090505b841562001cd0576200273e6001836200335b565b91506200274d600a8662003439565b6200275a90603062003282565b60f81b8183815181106200277257620027726200347c565b60200101906001600160f81b031916908160001a90535062002796600a86620032c5565b94506200272a565b6000604160f81b6001600160f81b0319831610801590620027cd5750602d60f91b6001600160f81b0319831611155b15620027ed57620027e460f883901c60206200329d565b60f81b92915050565b5090565b600062001a2482846200330e565b611ad580620034c283390190565b8280546200281b90620033e4565b90600052602060002090601f0160209004810192826200283f57600085556200288a565b82601f106200285a57805160ff19168380011785556200288a565b828001600101855582156200288a579182015b828111156200288a5782518255916020019190600101906200286d565b50620027ed9291505b80821115620027ed576000815560010162002893565b8035620028b681620034a8565b919050565b600082601f830112620028cd57600080fd5b81516020620028e6620028e08362003202565b620031ce565b80838252828201915082860187848660051b89010111156200290757600080fd5b60005b8581101562002928578151845292840192908401906001016200290a565b5090979650505050505050565b600082601f8301126200294757600080fd5b813562002958620028e08262003229565b8181528460208386010111156200296e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156200299e57600080fd5b813562001a2481620034a8565b600060208284031215620029be57600080fd5b815162001a2481620034a8565b600080600060608486031215620029e157600080fd5b8335620029ee81620034a8565b9250602084013562002a0081620034a8565b929592945050506040919091013590565b6000806040838503121562002a2557600080fd5b825167ffffffffffffffff8082111562002a3e57600080fd5b818501915085601f83011262002a5357600080fd5b8151602062002a66620028e08362003202565b8083825282820191508286018a848660051b890101111562002a8757600080fd5b600096505b8487101562002ab757805162002aa281620034a8565b83526001969096019591830191830162002a8c565b509188015191965090935050508082111562002ad257600080fd5b5062002ae185828601620028bb565b9150509250929050565b60006020828403121562002afe57600080fd5b8151801515811462001a2457600080fd5b60006020828403121562002b2257600080fd5b813567ffffffffffffffff81111562002b3a57600080fd5b62001cd08482850162002935565b60006020828403121562002b5b57600080fd5b815167ffffffffffffffff81111562002b7357600080fd5b8201601f8101841362002b8557600080fd5b805162002b96620028e08262003229565b81815285602083850101111562002bac57600080fd5b62002bbf8260208301602086016200339b565b95945050505050565b600080600080600080600080610100898b03121562002be657600080fd5b883567ffffffffffffffff8082111562002bff57600080fd5b62002c0d8c838d0162002935565b995060208b013591508082111562002c2457600080fd5b62002c328c838d0162002935565b985060408b013591508082111562002c4957600080fd5b62002c578c838d0162002935565b975062002c6760608c01620028a9565b965060808b0135955060a08b013591508082111562002c8557600080fd5b5062002c948b828c0162002935565b93505060c0890135915060e089013590509295985092959890939650565b60006020828403121562002cc557600080fd5b5035919050565b6000806000806080858703121562002ce357600080fd5b84359350602085013562002cf781620034a8565b9250604085013562002d0981620034a8565b9396929550929360600135925050565b60008060006060848603121562002d2f57600080fd5b83359250602084013562002a0081620034a8565b6000806040838503121562002d5757600080fd5b50508035926020909101359150565b60008060008060008060c0878903121562002d8057600080fd5b86359550602087013567ffffffffffffffff81111562002d9f57600080fd5b62002dad89828a0162002935565b955050604087013562002dc081620034a8565b959894975094956060810135955060808101359460a0909101359350915050565b6000815180845262002dfb8160208601602086016200339b565b601f01601f19169290920160200192915050565b6000825162002e238184602087016200339b565b9190910192915050565b6000845162002e418184602089016200339b565b8083019050602f60f81b808252855162002e63816001850160208a016200339b565b6001920191820152835162002e808160028401602088016200339b565b0160020195945050505050565b898152600060208a5162002ea781838601848f016200339b565b8a519084019062002ebe81848401858f016200339b565b8a5191019062002ed481848401858e016200339b565b8082019150506bffffffffffffffffffffffff198960601b1682820152876034820152865162002f0b8160548401858b016200339b565b0160548101959095525050506074820152609401979650505050505050565b8681526000865162002f44816020850160208b016200339b565b602092019182019590955260609390931b6bffffffffffffffffffffffff19166040840152605483019190915260748201526094019392505050565b6001600160a01b038516815260806020820181905260009062002fa69083018662002de1565b828103604084015262002fba818662002de1565b9050828103606084015262002462818562002de1565b60018060a01b038416815282602082015260606040820152600062002bbf606083018462002de1565b60208152600062001a24602083018462002de1565b60a0815260006200302360a083018862002de1565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b60c0815260006200306560c083018962002de1565b6001600160a01b0397881660208401529590961660408201526060810193909352608083019190915260a09091015292915050565b6000610120808352620030b08184018d62002de1565b6001600160a01b038c81166020860152604085018c90528a1660608501526080840189905283810360a08501529050620030eb818862002de1565b905082810360c084015262003101818762002de1565b905082810360e084015262003117818662002de1565b915050826101008301529a9950505050505050505050565b60a0815260006200314460a083018862002de1565b6001600160a01b039690961660208301525060408101939093526060830191909152608090910152919050565b60408152600062003186604083018562002de1565b905082151560208301529392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715620031fa57620031fa62003492565b604052919050565b600067ffffffffffffffff8211156200321f576200321f62003492565b5060051b60200190565b600067ffffffffffffffff82111562003246576200324662003492565b50601f01601f191660200190565b60006001600160a01b0382811684821680830382111562003279576200327962003450565b01949350505050565b6000821982111562003298576200329862003450565b500190565b600060ff821660ff84168060ff03821115620032bd57620032bd62003450565b019392505050565b600082620032d757620032d762003466565b500490565b60006001600160a01b038281168482168115158284048211161562003305576200330562003450565b02949350505050565b60008160001904831182151516156200332b576200332b62003450565b500290565b60006001600160a01b038381169083168181101562003353576200335362003450565b039392505050565b60008282101562003370576200337062003450565b500390565b600060ff821660ff84168082101562003392576200339262003450565b90039392505050565b60005b83811015620033b85781810151838201526020016200339e565b83811115620018e25750506000910152565b600081620033dc57620033dc62003450565b506000190190565b600181811c90821680620033f957607f821691505b60208210811415620015a457634e487b7160e01b600052602260045260246000fd5b600060001982141562003432576200343262003450565b5060010190565b6000826200344b576200344b62003466565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620034be57600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001ad538038062001ad583398101604081905262000034916200020c565b83828281600090805190602001906200004f929190620000af565b50805162000065906001906020840190620000af565b5050600680546001600160a01b0319166001600160a01b0393909316929092179091555082516200009e906007906020860190620000af565b505060006008555062000311915050565b828054620000bd90620002be565b90600052602060002090601f016020900481019282620000e157600085556200012c565b82601f10620000fc57805160ff19168380011785556200012c565b828001600101855582156200012c579182015b828111156200012c5782518255916020019190600101906200010f565b506200013a9291506200013e565b5090565b5b808211156200013a57600081556001016200013f565b600082601f8301126200016757600080fd5b81516001600160401b0380821115620001845762000184620002fb565b604051601f8301601f19908116603f01168101908282118183101715620001af57620001af620002fb565b81604052838152602092508683858801011115620001cc57600080fd5b600091505b83821015620001f05785820183015181830184015290820190620001d1565b83821115620002025760008385830101525b9695505050505050565b600080600080608085870312156200022357600080fd5b84516001600160a01b03811681146200023b57600080fd5b60208601519094506001600160401b03808211156200025957600080fd5b620002678883890162000155565b945060408701519150808211156200027e57600080fd5b6200028c8883890162000155565b93506060870151915080821115620002a357600080fd5b50620002b28782880162000155565b91505092959194509250565b600181811c90821680620002d357607f821691505b60208210811415620002f557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6117b480620003216000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063880cdc31116100ad578063b88d4fde11610071578063b88d4fde14610271578063c370b04214610284578063c87b56dd1461028c578063d3fc98641461029f578063e985e9c5146102b257600080fd5b8063880cdc311461021d5780638da5cb5b1461023057806395d89b41146102435780639dc29fac1461024b578063a22cb4651461025e57600080fd5b806323b872dd116100f457806323b872dd146101c057806342842e0e146101d3578063442890d5146101e65780636352211e146101f757806370a082311461020a57600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f36600461150b565b6102ee565b60405190151581526020015b60405180910390f35b610161610340565b60405161015091906115e8565b61018161017c366004611545565b6103d2565b6040516001600160a01b039091168152602001610150565b6101ac6101a7366004611476565b6103f9565b005b6008545b604051908152602001610150565b6101ac6101ce366004611382565b610514565b6101ac6101e1366004611382565b610545565b6006546001600160a01b0316610181565b610181610205366004611545565b610560565b6101b261021836600461132d565b6105c0565b6101ac61022b36600461132d565b610646565b600654610181906001600160a01b031681565b61016161071e565b6101ac610259366004611476565b61072d565b6101ac61026c36600461143a565b6108f6565b6101ac61027f3660046113be565b610905565b61016161093d565b61016161029a366004611545565b61094c565b6101ac6102ad3660046114a0565b6109ee565b6101446102c036600461134f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061031f57506001600160e01b03198216635b5e139f60e01b145b8061033a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461034f90611701565b80601f016020809104026020016040519081016040528092919081815260200182805461037b90611701565b80156103c85780601f1061039d576101008083540402835291602001916103c8565b820191906000526020600020905b8154815290600101906020018083116103ab57829003601f168201915b5050505050905090565b60006103dd82610aa4565b506000908152600460205260409020546001600160a01b031690565b600061040482610560565b9050806001600160a01b0316836001600160a01b031614156104775760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610493575061049381336102c0565b6105055760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161046e565b61050f8383610b06565b505050565b61051e3382610b74565b61053a5760405162461bcd60e51b815260040161046e90611684565b61050f838383610bf3565b61050f83838360405180602001604052806000815250610905565b6000818152600260205260408120546001600160a01b03168061033a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161046e565b60006001600160a01b03821661062a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161046e565b506001600160a01b031660009081526003602052604090205490565b600654604080513381526001600160a01b0390921660208301527f055decf46fd677bfe497b669febdaee9e74947808526a6cd30a19b3feab12c61910160405180910390a16006546001600160a01b031633146106b55760405162461bcd60e51b815260040161046e9061164d565b600654604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600680546001600160a01b0319166001600160a01b0392909216919091179055565b60606001805461034f90611701565b600654604080513381526001600160a01b0390921660208301527f055decf46fd677bfe497b669febdaee9e74947808526a6cd30a19b3feab12c61910160405180910390a16006546001600160a01b0316331461079c5760405162461bcd60e51b815260040161046e9061164d565b6000600854116107e15760405162461bcd60e51b815260206004820152601060248201526f3737903a37b5b2b7103a3790313ab93760811b604482015260640161046e565b60006107ec82610560565b9050826001600160a01b0316816001600160a01b0316146108455760405162461bcd60e51b815260206004820152601360248201527237b7363c9037bbb732b91031b0b710313ab93760691b604482015260640161046e565b6006546001600160a01b031661085b8184610b74565b6108b85760405162461bcd60e51b815260206004820152602860248201527f566f7563686572206f776e657220646964206e6f7420617070726f766520746f60448201526735b2b710313ab93760c11b606482015260840161046e565b6108c183610d8f565b60008381526009602052604081206108d8916111c8565b6001600860008282546108eb91906116ea565b909155505050505050565b610901338383610e2a565b5050565b61090f3383610b74565b61092b5760405162461bcd60e51b815260040161046e90611684565b61093784848484610ef9565b50505050565b60606007805461034f90611701565b600081815260096020526040902080546060919061096990611701565b80601f016020809104026020016040519081016040528092919081815260200182805461099590611701565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b50505050509050919050565b600654604080513381526001600160a01b0390921660208301527f055decf46fd677bfe497b669febdaee9e74947808526a6cd30a19b3feab12c61910160405180910390a16006546001600160a01b03163314610a5d5760405162461bcd60e51b815260040161046e9061164d565b610a678383610f2c565b60008281526009602090815260409091208251610a8692840190611202565b50600160086000828254610a9a91906116d2565b9091555050505050565b6000818152600260205260409020546001600160a01b0316610b035760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161046e565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610b3b82610560565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610b8083610560565b9050806001600160a01b0316846001600160a01b03161480610bc757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610beb5750836001600160a01b0316610be0846103d2565b6001600160a01b0316145b949350505050565b826001600160a01b0316610c0682610560565b6001600160a01b031614610c6a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161046e565b6001600160a01b038216610ccc5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161046e565b610cd7600082610b06565b6001600160a01b0383166000908152600360205260408120805460019290610d009084906116ea565b90915550506001600160a01b0382166000908152600360205260408120805460019290610d2e9084906116d2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610d9a82610560565b9050610da7600083610b06565b6001600160a01b0381166000908152600360205260408120805460019290610dd09084906116ea565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b03161415610e8c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161046e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f04848484610bf3565b610f1084848484610f46565b6109375760405162461bcd60e51b815260040161046e906115fb565b610901828260405180602001604052806000815250611053565b60006001600160a01b0384163b1561104857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610f8a9033908990889088906004016115ab565b602060405180830381600087803b158015610fa457600080fd5b505af1925050508015610fd4575060408051601f3d908101601f19168201909252610fd191810190611528565b60015b61102e573d808015611002576040519150601f19603f3d011682016040523d82523d6000602084013e611007565b606091505b5080516110265760405162461bcd60e51b815260040161046e906115fb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610beb565b506001949350505050565b61105d8383611086565b61106a6000848484610f46565b61050f5760405162461bcd60e51b815260040161046e906115fb565b6001600160a01b0382166110dc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161046e565b6000818152600260205260409020546001600160a01b0316156111415760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161046e565b6001600160a01b038216600090815260036020526040812080546001929061116a9084906116d2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5080546111d490611701565b6000825580601f106111e4575050565b601f016020900490600052602060002090810190610b039190611286565b82805461120e90611701565b90600052602060002090601f0160209004810192826112305760008555611276565b82601f1061124957805160ff1916838001178555611276565b82800160010185558215611276579182015b8281111561127657825182559160200191906001019061125b565b50611282929150611286565b5090565b5b808211156112825760008155600101611287565b600067ffffffffffffffff808411156112b6576112b6611752565b604051601f8501601f19908116603f011681019082821181831017156112de576112de611752565b816040528093508581528686860111156112f757600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461132857600080fd5b919050565b60006020828403121561133f57600080fd5b61134882611311565b9392505050565b6000806040838503121561136257600080fd5b61136b83611311565b915061137960208401611311565b90509250929050565b60008060006060848603121561139757600080fd5b6113a084611311565b92506113ae60208501611311565b9150604084013590509250925092565b600080600080608085870312156113d457600080fd5b6113dd85611311565b93506113eb60208601611311565b925060408501359150606085013567ffffffffffffffff81111561140e57600080fd5b8501601f8101871361141f57600080fd5b61142e8782356020840161129b565b91505092959194509250565b6000806040838503121561144d57600080fd5b61145683611311565b91506020830135801515811461146b57600080fd5b809150509250929050565b6000806040838503121561148957600080fd5b61149283611311565b946020939093013593505050565b6000806000606084860312156114b557600080fd5b6114be84611311565b925060208401359150604084013567ffffffffffffffff8111156114e157600080fd5b8401601f810186136114f257600080fd5b6115018682356020840161129b565b9150509250925092565b60006020828403121561151d57600080fd5b813561134881611768565b60006020828403121561153a57600080fd5b815161134881611768565b60006020828403121561155757600080fd5b5035919050565b6000815180845260005b8181101561158457602081850181015186830182015201611568565b81811115611596576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115de9083018461155e565b9695505050505050565b602081526000611348602083018461155e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b600082198211156116e5576116e561173c565b500190565b6000828210156116fc576116fc61173c565b500390565b600181811c9082168061171557607f821691505b6020821081141561173657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610b0357600080fdfea264697066735822122031f54709e6ee79ce04a4fc3db3349028c80f5fb449241b5690ce4ac5adf0dac064736f6c63430008070033a2646970667358221220dfdb8c040ee7d1ce478c9142cc7a83fc9c3cce090793b46610ccdfd32dd476a264736f6c63430008070033",
}

// TNT721TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use TNT721TokenBankMetaData.ABI instead.
var TNT721TokenBankABI = TNT721TokenBankMetaData.ABI

// TNT721TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TNT721TokenBankMetaData.Bin instead.
var TNT721TokenBankBin = TNT721TokenBankMetaData.Bin

// DeployTNT721TokenBank deploys a new Ethereum contract, binding an instance of TNT721TokenBank to it.
func DeployTNT721TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, mainchainID_ *big.Int, chainRegistrar_ common.Address) (common.Address, *types.Transaction, *TNT721TokenBank, error) {
	parsed, err := TNT721TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TNT721TokenBankBin), backend, mainchainID_, chainRegistrar_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TNT721TokenBank{TNT721TokenBankCaller: TNT721TokenBankCaller{contract: contract}, TNT721TokenBankTransactor: TNT721TokenBankTransactor{contract: contract}, TNT721TokenBankFilterer: TNT721TokenBankFilterer{contract: contract}}, nil
}

// TNT721TokenBank is an auto generated Go binding around an Ethereum contract.
type TNT721TokenBank struct {
	TNT721TokenBankCaller     // Read-only binding to the contract
	TNT721TokenBankTransactor // Write-only binding to the contract
	TNT721TokenBankFilterer   // Log filterer for contract events
}

// TNT721TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type TNT721TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT721TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TNT721TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT721TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TNT721TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT721TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TNT721TokenBankSession struct {
	Contract     *TNT721TokenBank  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TNT721TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TNT721TokenBankCallerSession struct {
	Contract *TNT721TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// TNT721TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TNT721TokenBankTransactorSession struct {
	Contract     *TNT721TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TNT721TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type TNT721TokenBankRaw struct {
	Contract *TNT721TokenBank // Generic contract binding to access the raw methods on
}

// TNT721TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TNT721TokenBankCallerRaw struct {
	Contract *TNT721TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// TNT721TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TNT721TokenBankTransactorRaw struct {
	Contract *TNT721TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTNT721TokenBank creates a new instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBank(address common.Address, backend bind.ContractBackend) (*TNT721TokenBank, error) {
	contract, err := bindTNT721TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBank{TNT721TokenBankCaller: TNT721TokenBankCaller{contract: contract}, TNT721TokenBankTransactor: TNT721TokenBankTransactor{contract: contract}, TNT721TokenBankFilterer: TNT721TokenBankFilterer{contract: contract}}, nil
}

// NewTNT721TokenBankCaller creates a new read-only instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBankCaller(address common.Address, caller bind.ContractCaller) (*TNT721TokenBankCaller, error) {
	contract, err := bindTNT721TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankCaller{contract: contract}, nil
}

// NewTNT721TokenBankTransactor creates a new write-only instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*TNT721TokenBankTransactor, error) {
	contract, err := bindTNT721TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTransactor{contract: contract}, nil
}

// NewTNT721TokenBankFilterer creates a new log filterer instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*TNT721TokenBankFilterer, error) {
	contract, err := bindTNT721TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankFilterer{contract: contract}, nil
}

// bindTNT721TokenBank binds a generic wrapper to an already deployed contract.
func bindTNT721TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TNT721TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT721TokenBank *TNT721TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT721TokenBank.Contract.TNT721TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT721TokenBank *TNT721TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.TNT721TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT721TokenBank *TNT721TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.TNT721TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT721TokenBank *TNT721TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT721TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT721TokenBank *TNT721TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT721TokenBank *TNT721TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.contract.Transact(opts, method, params...)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCaller) AllDenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "allDenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT721TokenBank.Contract.AllDenoms(&_TNT721TokenBank.CallOpts, arg0)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT721TokenBank.Contract.AllDenoms(&_TNT721TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCaller) AllVouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "allVouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT721TokenBank.Contract.AllVouchers(&_TNT721TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT721TokenBank.Contract.AllVouchers(&_TNT721TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCaller) DenomToVoucherLookup(opts *bind.CallOpts, arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "denomToVoucherLookup", arg0)

	outstruct := new(struct {
		ContractAddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT721TokenBank *TNT721TokenBankSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT721TokenBank.Contract.DenomToVoucherLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT721TokenBank.Contract.DenomToVoucherLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankSession) Exists(denom string) (bool, error) {
	return _TNT721TokenBank.Contract.Exists(&_TNT721TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _TNT721TokenBank.Contract.Exists(&_TNT721TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCaller) Exists0(opts *bind.CallOpts, voucherAddress common.Address) (bool, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "exists0", voucherAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT721TokenBank.Contract.Exists0(&_TNT721TokenBank.CallOpts, voucherAddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT721TokenBank.Contract.Exists0(&_TNT721TokenBank.CallOpts, voucherAddress)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetDenom(opts *bind.CallOpts, voucherContractAddr common.Address) (string, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getDenom", voucherContractAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT721TokenBank.Contract.GetDenom(&_TNT721TokenBank.CallOpts, voucherContractAddr)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT721TokenBank.Contract.GetDenom(&_TNT721TokenBank.CallOpts, voucherContractAddr)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetMaxProcessedTokenLockNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getMaxProcessedTokenLockNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetMaxProcessedVoucherBurnNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getMaxProcessedVoucherBurnNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetVoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getVoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT721TokenBank.Contract.GetVoucher(&_TNT721TokenBank.CallOpts, denom)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT721TokenBank.Contract.GetVoucher(&_TNT721TokenBank.CallOpts, denom)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) MainchainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "mainchainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) MainchainID() (*big.Int, error) {
	return _TNT721TokenBank.Contract.MainchainID(&_TNT721TokenBank.CallOpts)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) MainchainID() (*big.Int, error) {
	return _TNT721TokenBank.Contract.MainchainID(&_TNT721TokenBank.CallOpts)
}

// SubchainID is a free data retrieval call binding the contract method 0xf8e8f7aa.
//
// Solidity: function subchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) SubchainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "subchainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SubchainID is a free data retrieval call binding the contract method 0xf8e8f7aa.
//
// Solidity: function subchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) SubchainID() (*big.Int, error) {
	return _TNT721TokenBank.Contract.SubchainID(&_TNT721TokenBank.CallOpts)
}

// SubchainID is a free data retrieval call binding the contract method 0xf8e8f7aa.
//
// Solidity: function subchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) SubchainID() (*big.Int, error) {
	return _TNT721TokenBank.Contract.SubchainID(&_TNT721TokenBank.CallOpts)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) TokenLockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "tokenLockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenLockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenLockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCaller) TokenLockVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "tokenLockVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.TokenLockVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.TokenLockVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) TokenUnlockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "tokenUnlockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenUnlockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenUnlockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) TotalLockedAmounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "totalLockedAmounts", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TotalLockedAmounts(&_TNT721TokenBank.CallOpts, arg0, arg1, arg2)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TotalLockedAmounts(&_TNT721TokenBank.CallOpts, arg0, arg1, arg2)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherAddressToDenomLookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherAddressToDenomLookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT721TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT721TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherBurnNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherBurnNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherBurnNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherBurnNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherBurnVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherBurnVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.VoucherBurnVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.VoucherBurnVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherMintNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherMintNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherMintNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherMintNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) BurnVouchers(opts *bind.TransactOpts, sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "burnVouchers", sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.BurnVouchers(&_TNT721TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.BurnVouchers(&_TNT721TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) LockTokens(opts *bind.TransactOpts, targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "lockTokens", targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, tokenID)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankSession) LockTokens(targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.LockTokens(&_TNT721TokenBank.TransactOpts, targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, tokenID)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) LockTokens(targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.LockTokens(&_TNT721TokenBank.TransactOpts, targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, tokenID)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x44b7b352.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, address targetChainVoucherReceiver, uint256 tokenID, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) MintVouchers(opts *bind.TransactOpts, denom string, name string, symbol string, targetChainVoucherReceiver common.Address, tokenID *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "mintVouchers", denom, name, symbol, targetChainVoucherReceiver, tokenID, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x44b7b352.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, address targetChainVoucherReceiver, uint256 tokenID, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankSession) MintVouchers(denom string, name string, symbol string, targetChainVoucherReceiver common.Address, tokenID *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.MintVouchers(&_TNT721TokenBank.TransactOpts, denom, name, symbol, targetChainVoucherReceiver, tokenID, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x44b7b352.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, address targetChainVoucherReceiver, uint256 tokenID, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) MintVouchers(denom string, name string, symbol string, targetChainVoucherReceiver common.Address, tokenID *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.MintVouchers(&_TNT721TokenBank.TransactOpts, denom, name, symbol, targetChainVoucherReceiver, tokenID, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) UnlockTokens(opts *bind.TransactOpts, sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "unlockTokens", sourceChainID, denom, targetChainTokenReceiver, tokenID, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) payable returns()
func (_TNT721TokenBank *TNT721TokenBankSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.UnlockTokens(&_TNT721TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.UnlockTokens(&_TNT721TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, dynasty, sourceChainVoucherBurnNonce)
}

// TNT721TokenBankTNT721TokenLockedIterator is returned from FilterTNT721TokenLocked and is used to iterate over the raw logs and unpacked data for TNT721TokenLocked events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenLockedIterator struct {
	Event *TNT721TokenBankTNT721TokenLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721TokenLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721TokenLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721TokenLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721TokenLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721TokenLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721TokenLocked represents a TNT721TokenLocked event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenLocked struct {
	Denom                      string
	SourceChainTokenSender     common.Address
	TargetChainID              *big.Int
	TargetChainVoucherReceiver common.Address
	TokenID                    *big.Int
	Name                       string
	Symbol                     string
	TokenURI                   string
	TokenLockNonce             *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT721TokenLocked is a free log retrieval operation binding the contract event 0x4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b.
//
// Solidity: event TNT721TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, string name, string symbol, string tokenURI, uint256 tokenLockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721TokenLocked(opts *bind.FilterOpts) (*TNT721TokenBankTNT721TokenLockedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721TokenLocked")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721TokenLockedIterator{contract: _TNT721TokenBank.contract, event: "TNT721TokenLocked", logs: logs, sub: sub}, nil
}

// WatchTNT721TokenLocked is a free log subscription operation binding the contract event 0x4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b.
//
// Solidity: event TNT721TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, string name, string symbol, string tokenURI, uint256 tokenLockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721TokenLocked(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721TokenLocked) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721TokenLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721TokenLocked)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721TokenLocked is a log parse operation binding the contract event 0x4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b.
//
// Solidity: event TNT721TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, string name, string symbol, string tokenURI, uint256 tokenLockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721TokenLocked(log types.Log) (*TNT721TokenBankTNT721TokenLocked, error) {
	event := new(TNT721TokenBankTNT721TokenLocked)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT721TokenBankTNT721TokenUnlockedIterator is returned from FilterTNT721TokenUnlocked and is used to iterate over the raw logs and unpacked data for TNT721TokenUnlocked events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenUnlockedIterator struct {
	Event *TNT721TokenBankTNT721TokenUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721TokenUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721TokenUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721TokenUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721TokenUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721TokenUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721TokenUnlocked represents a TNT721TokenUnlocked event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenUnlocked struct {
	Denom                       string
	TargetChainTokenReceiver    common.Address
	TargetChainID               *big.Int
	SourceChainVoucherBurnNonce *big.Int
	TokenUnlockNonce            *big.Int
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterTNT721TokenUnlocked is a free log retrieval operation binding the contract event 0xf8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd.
//
// Solidity: event TNT721TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 targetChainID, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721TokenUnlocked(opts *bind.FilterOpts) (*TNT721TokenBankTNT721TokenUnlockedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721TokenUnlockedIterator{contract: _TNT721TokenBank.contract, event: "TNT721TokenUnlocked", logs: logs, sub: sub}, nil
}

// WatchTNT721TokenUnlocked is a free log subscription operation binding the contract event 0xf8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd.
//
// Solidity: event TNT721TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 targetChainID, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721TokenUnlocked(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721TokenUnlocked) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721TokenUnlocked)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721TokenUnlocked is a log parse operation binding the contract event 0xf8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd.
//
// Solidity: event TNT721TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 targetChainID, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721TokenUnlocked(log types.Log) (*TNT721TokenBankTNT721TokenUnlocked, error) {
	event := new(TNT721TokenBankTNT721TokenUnlocked)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT721TokenBankTNT721VoucherBurnedIterator is returned from FilterTNT721VoucherBurned and is used to iterate over the raw logs and unpacked data for TNT721VoucherBurned events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherBurnedIterator struct {
	Event *TNT721TokenBankTNT721VoucherBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721VoucherBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721VoucherBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721VoucherBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721VoucherBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721VoucherBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721VoucherBurned represents a TNT721VoucherBurned event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherBurned struct {
	Denom                    string
	SourceChainVoucherOwner  common.Address
	TargetChainTokenReceiver common.Address
	TokenID                  *big.Int
	VoucherBurnNonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTNT721VoucherBurned is a free log retrieval operation binding the contract event 0xb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e.
//
// Solidity: event TNT721VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 voucherBurnNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721VoucherBurned(opts *bind.FilterOpts) (*TNT721TokenBankTNT721VoucherBurnedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721VoucherBurned")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721VoucherBurnedIterator{contract: _TNT721TokenBank.contract, event: "TNT721VoucherBurned", logs: logs, sub: sub}, nil
}

// WatchTNT721VoucherBurned is a free log subscription operation binding the contract event 0xb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e.
//
// Solidity: event TNT721VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 voucherBurnNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721VoucherBurned(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721VoucherBurned) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721VoucherBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721VoucherBurned)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721VoucherBurned is a log parse operation binding the contract event 0xb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e.
//
// Solidity: event TNT721VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 voucherBurnNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721VoucherBurned(log types.Log) (*TNT721TokenBankTNT721VoucherBurned, error) {
	event := new(TNT721TokenBankTNT721VoucherBurned)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT721TokenBankTNT721VoucherMintedIterator is returned from FilterTNT721VoucherMinted and is used to iterate over the raw logs and unpacked data for TNT721VoucherMinted events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherMintedIterator struct {
	Event *TNT721TokenBankTNT721VoucherMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721VoucherMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721VoucherMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721VoucherMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721VoucherMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721VoucherMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721VoucherMinted represents a TNT721VoucherMinted event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherMinted struct {
	Denom                      string
	TargetChainVoucherReceiver common.Address
	VoucherContract            common.Address
	TokenID                    *big.Int
	SourceChainTokenLockNonce  *big.Int
	VoucherMintNonce           *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT721VoucherMinted is a free log retrieval operation binding the contract event 0x9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91.
//
// Solidity: event TNT721VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721VoucherMinted(opts *bind.FilterOpts) (*TNT721TokenBankTNT721VoucherMintedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721VoucherMinted")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721VoucherMintedIterator{contract: _TNT721TokenBank.contract, event: "TNT721VoucherMinted", logs: logs, sub: sub}, nil
}

// WatchTNT721VoucherMinted is a free log subscription operation binding the contract event 0x9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91.
//
// Solidity: event TNT721VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721VoucherMinted(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721VoucherMinted) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721VoucherMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721VoucherMinted)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721VoucherMinted is a log parse operation binding the contract event 0x9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91.
//
// Solidity: event TNT721VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721VoucherMinted(log types.Log) (*TNT721TokenBankTNT721VoucherMinted, error) {
	event := new(TNT721TokenBankTNT721VoucherMinted)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
