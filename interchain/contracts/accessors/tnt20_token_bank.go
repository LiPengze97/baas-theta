// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TNT20TokenBankMetaData contains all meta data concerning the TNT20TokenBank contract.
var TNT20TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"mainchainid_\",\"type\":\"uint256\"},{\"internaltype\":\"contractchainregistrar\",\"name\":\"chainregistrar_\",\"type\":\"address\"}],\"statemutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"sourcechaintokensender\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"targetchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"targetchainvoucherreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"lockedamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenlocknonce\",\"type\":\"uint256\"}],\"name\":\"tnt20tokenlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"targetchaintokenreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"unlockedamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"sourcechainvoucherburnnonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenunlocknonce\",\"type\":\"uint256\"}],\"name\":\"tnt20tokenunlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"sourcechainvoucherowner\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"targetchaintokenreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"burnedamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"voucherburnnonce\",\"type\":\"uint256\"}],\"name\":\"tnt20voucherburned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"targetchainvoucherreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"vouchercontact\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"mintedamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"sourcechaintokenlocknonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"vouchermintnonce\",\"type\":\"uint256\"}],\"name\":\"tnt20voucherminted\",\"type\":\"event\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alldenoms\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allvouchers\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomtovoucherlookup\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"voucheraddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"vouchercontractaddr\",\"type\":\"address\"}],\"name\":\"getdenom\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"getmaxprocessedtokenlocknonce\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"getmaxprocessedvoucherburnnonce\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getvoucher\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainid\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenlocknoncemap\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internaltype\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenlockvotingrecords\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"accumlatedshares\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenunlocknoncemap\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totallockedamounts\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucheraddresstodenomlookup\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherburnnoncemap\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internaltype\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherburnvotingrecords\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"accumlatedshares\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vouchermintnoncemap\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"targetchainid\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"sourcechaintnt20contract\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"targetchainvoucherreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"lockamount\",\"type\":\"uint256\"}],\"name\":\"locktokens\",\"outputs\":[],\"statemutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internaltype\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internaltype\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internaltype\":\"address\",\"name\":\"targetchainvoucherreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"mintedamount\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"sourcechaintokenlocknonce\",\"type\":\"uint256\"}],\"name\":\"mintvouchers\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"sourcechainvouchercontractaddr\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"targetchaintokenreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"burnedamount\",\"type\":\"uint256\"}],\"name\":\"burnvouchers\",\"outputs\":[],\"statemutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"sourcechainid\",\"type\":\"uint256\"},{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"address\",\"name\":\"targetchaintokenreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"unlockamount\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"sourcechainvoucherburnnonce\",\"type\":\"uint256\"}],\"name\":\"unlocktokens\",\"outputs\":[],\"statemutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200479238038062004792833981016040819052620000349162000064565b6001600081905591909155600280546001600160a01b0319166001600160a01b03909216919091179055620000a3565b600080604083850312156200007857600080fd5b825160208401519092506001600160a01b03811681146200009857600080fd5b809150509250929050565b6146df80620000b36000396000f3fe6080604052600436106200014f5760003560e01c80638883931e11620000b9578063ca2075691162000078578063ca2075691462000486578063ccf187c714620004b7578063ebda996214620004e8578063f6a3d24e146200050d578063f95627ac146200054d578063feaff052146200057e57600080fd5b80638883931e14620003dd5780639d3a0f0c146200040e578063a0df5cc51462000433578063a2cc6981146200044a578063bff4c41a146200046f57600080fd5b80633f1a8aa811620001125780633f1a8aa814620002bd578063588b140814620002f957806360569b5e146200032d578063740cb7f81462000362578063766f8fb014620003935780637ff75b4614620003c457600080fd5b8063073b950214620001545780631527b14d146200017f5780631eb7873714620001f0578063261a323e146200024957806327ca4df1146200027f575b600080fd5b3480156200016157600080fd5b506200016c60015481565b6040519081526020015b60405180910390f35b3480156200018c57600080fd5b50620001d06200019e36600462002b5b565b8051602081830181018051600b825292820191909301209152546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b03909316835290151560208301520162000176565b348015620001fd57600080fd5b50620002336200020f36600462002d81565b60096020908152600092835260408084209091529082529020805460029091015482565b6040805192835260208301919091520162000176565b3480156200025657600080fd5b506200026e6200026836600462002b5b565b620005c1565b604051901515815260200162000176565b3480156200028c57600080fd5b50620002a46200029e36600462002ce7565b62000605565b6040516001600160a01b03909116815260200162000176565b348015620002ca57600080fd5b506200016c620002dc36600462002d01565b600f60209081526000928352604080842090915290825290205481565b3480156200030657600080fd5b506200031e6200031836600462002ce7565b62000630565b60405162000176919062003099565b3480156200033a57600080fd5b50620003526200034c366004620029d7565b620006e5565b6040516200017692919062003200565b3480156200036f57600080fd5b506200016c6200038136600462002ce7565b60066020526000908152604090205481565b348015620003a057600080fd5b506200016c620003b236600462002ce7565b60009081526008602052604090205490565b620003db620003d536600462002da4565b62000794565b005b348015620003ea57600080fd5b506200016c620003fc36600462002ce7565b60036020526000908152604090205481565b3480156200041b57600080fd5b50620003db6200042d36600462002c14565b62000a6f565b620003db6200044436600462002a17565b62000d6e565b3480156200045757600080fd5b50620002a46200046936600462002b5b565b6200103d565b620003db6200048036600462002d34565b620010b3565b3480156200049357600080fd5b506200016c620004a536600462002ce7565b60056020526000908152604090205481565b348015620004c457600080fd5b506200016c620004d636600462002ce7565b60046020526000908152604090205481565b348015620004f557600080fd5b506200031e62000507366004620029d7565b620014b8565b3480156200051a57600080fd5b506200026e6200052c366004620029d7565b6001600160a01b03166000908152600c602052604090206001015460ff1690565b3480156200055a57600080fd5b506200016c6200056c36600462002ce7565b60009081526007602052604090205490565b3480156200058b57600080fd5b50620002336200059d36600462002d81565b600a6020908152600092835260408084209091529082529020805460029091015482565b600080620005cf83620015b8565b9050600b81604051620005e3919062002e6d565b9081526040519081900360200190205460ff600160a01b909104169392505050565b600d81815481106200061657600080fd5b6000918252602090912001546001600160a01b0316905081565b600e81815481106200064157600080fd5b9060005260206000200160009150905080546200065e9062003473565b80601f01602080910402602001604051908101604052809291908181526020018280546200068c9062003473565b8015620006dd5780601f10620006b157610100808354040283529160200191620006dd565b820191906000526020600020905b815481529060010190602001808311620006bf57829003601f168201915b505050505081565b600c60205260009081526040902080548190620007029062003473565b80601f0160208091040260200160405190810160405280929190818152602001828054620007309062003473565b8015620007815780601f10620007555761010080835404028352916020019162000781565b820191906000526020600020905b8154815290600101906020018083116200076357829003601f168201915b5050506001909301549192505060ff1682565b60026000541415620007c35760405162461bcd60e51b8152600401620007ba9062003226565b60405180910390fd5b60026000908155620007d586620015b8565b9050600080620007e583620015cb565b91509150806200084e5760405162461bcd60e51b815260206004820152602d60248201527f4661696c656420746f206578747261637420636f6e747261637420616464726560448201526c73732066726f6d2064656e6f6d60981b6064820152608401620007ba565b6000898152600f602090815260408083206001600160a01b0386168452909152902054861115620008d75760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420756e6c6f636b207468652072657175657374656420616d6f7560448201526b6e74206f6620746f6b656e7360a01b6064820152608401620007ba565b60008984888a8989604051602001620008f69695949392919062002fdd565b60405160208183030381529060405280519060200120905060006200091f8b888489336200164c565b9050801562000a5d5760008b8152600f602090815260408083206001600160a01b03881684529091529020546200095790896200166b565b60008c8152600f602090815260408083206001600160a01b03898116808652919093529281902093909355915163a9059cbb60e01b8152918b166004830152602482018a90529063a9059cbb90604401602060405180830381600087803b158015620009c257600080fd5b505af1158015620009d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009fd919062002b37565b5062000a098b62001680565b60008b815260046020526040908190205490517f189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb9062000a539088908d908d908c908790620031be565b60405180910390a1505b50506001600055505050505050505050565b6002600054141562000a955760405162461bcd60e51b8152600401620007ba9062003226565b6002600090815562000aa789620015b8565b905060008062000ab783620016a9565b915091508062000b165760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f206578747261637420636861696e49442066726f6d2064604482015263656e6f6d60e01b6064820152608401620007ba565b600082848c8c8c8c8c8c8c60405160200162000b3b9998979695949392919062002f44565b604051602081830303815290604052805190602001209050600062000b64848884893362001745565b9050801562000d5a5760405163130d191f60e11b8152309063261a323e9062000b9290889060040162003099565b60206040518083038186803b15801562000bab57600080fd5b505afa15801562000bc0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000be6919062002b37565b62000c045762000c048562000bfe878f8f8f6200175a565b620017fc565b60405163a2cc698160e01b8152600090309063a2cc69819062000c2c90899060040162003099565b60206040518083038186803b15801562000c4557600080fd5b505afa15801562000c5a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c809190620029f7565b90506001600160a01b03811662000ceb5760405162461bcd60e51b815260206004820152602860248201527f74686520766f756368657220666f72207468652064656e6f6d20646f6573206e6044820152671bdd08195e1a5cdd60c21b6064820152608401620007ba565b62000cf8818b8b62001a26565b62000d038562001a94565b600085815260066020526040908190205490517f5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf089062000d4f9089908e9086908f908e908890620030f0565b60405180910390a150505b505060016000555050505050505050505050565b6002600054141562000d945760405162461bcd60e51b8152600401620007ba9062003226565b600260009081556040516375ed4cb160e11b81526001600160a01b0385166004820152309063ebda99629060240160006040518083038186803b15801562000ddb57600080fd5b505afa15801562000df0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000e1a919081019062002b94565b905080516000141562000e885760405162461bcd60e51b815260206004820152602f60248201527f6661696c656420746f206c6f6f6b75702064656e6f6d20666f7220746865207660448201526e1bdd58da195c8818dbdb9d1c9858dd608a1b6064820152608401620007ba565b60405163130d191f60e11b8152309063261a323e9062000ead90849060040162003099565b60206040518083038186803b15801562000ec657600080fd5b505afa15801562000edb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f01919062002b37565b62000f4f5760405162461bcd60e51b815260206004820152601f60248201527f566f756368657220636f6e747261637420646f6573206e6f74206578697374006044820152606401620007ba565b3362000f5d85828562001ab5565b60008062000f6b84620016a9565b915091508062000fd15760405162461bcd60e51b815260206004820152602a60248201527f4661696c656420746f206578747261637420746172676574436861696e49442060448201526966726f6d2064656e6f6d60b01b6064820152608401620007ba565b62000fdc8262001aee565b600082815260056020526040908190205490517f8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d906200102690879087908b908b908790620030ae565b60405180910390a150506001600055505050505050565b6000806200104b83620015b8565b90506000600b8260405162001061919062002e6d565b908152604080516020928190038301812081830190925290546001600160a01b0381168252600160a01b900460ff16158015928201929092529150620010a957519392505050565b5060009392505050565b60026000541415620010d95760405162461bcd60e51b8152600401620007ba9062003226565b60026000556001548414806200116c57506002546040516343b71f0560e01b8152600481018690526001600160a01b03909116906343b71f0590602401602060405180830381600087803b1580156200113157600080fd5b505af115801562001146573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200116c919062002b37565b620011ba5760405162461bcd60e51b815260206004820152601960248201527f6e6f7420612076616c696420746172676574436861696e4944000000000000006044820152606401620007ba565b6040516323b872dd60e01b81523360048201523060248201526044810182905283906001600160a01b038216906323b872dd90606401602060405180830381600087803b1580156200120b57600080fd5b505af115801562001220573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001246919062002b37565b506000620012854660405180604001604052806002815260200161032360f41b8152506200127f886001600160a01b0316601462001b0f565b62001cc9565b6000878152600f602090815260408083206001600160a01b038a168452909152902054909150620012b7908462001d0d565b6000878152600f602090815260408083206001600160a01b038a168452909152902055620012e58662001d1b565b6000600360008881526020019081526020016000205490507fe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb8233898888886001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200135d57600080fd5b505afa15801562001372573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200139c919081019062002b94565b896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620013d657600080fd5b505afa158015620013eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001415919081019062002b94565b8a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200144f57600080fd5b505afa15801562001464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200148a919062002e1f565b89604051620014a2999897969594939291906200313a565b60405180910390a1505060016000555050505050565b6001600160a01b0381166000908152600c60205260408082208151808301909252805460609392919082908290620014f09062003473565b80601f01602080910402602001604051908101604052809291908181526020018280546200151e9062003473565b80156200156f5780601f1062001543576101008083540402835291602001916200156f565b820191906000526020600020905b8154815290600101906020018083116200155157829003601f168201915b50505091835250506001919091015460ff161515602091820152810151909150156200159c575192915050565b5050604080516020810190915260008152919050565b50919050565b6060620015c58262001d3c565b92915050565b600080600080620015e385602f60f81b600262001dc2565b9150915080620015fa575060009485945092505050565b60008062001617876200160f86600162003311565b895162001e5e565b9150915080620016305750600096879650945050505050565b60006200163d8362001f8d565b98600198509650505050505050565b60006200166186868686866008600a620021a8565b9695505050505050565b6000620016798284620033ea565b9392505050565b6000818152600460205260408120805460019290620016a190849062003311565b909155505050565b600080600080620016c185602f60f81b600162001dc2565b9150915080620016d8575060009485945092505050565b600080620016f48782620016ee87600162003311565b62001e5e565b91509150806200170d5750600096879650945050505050565b6000806200171b84620025df565b91509150806200173657506000988998509650505050505050565b50976001975095505050505050565b600062001661868686868660076009620021a8565b60008030905060008560405160200162001775919062002e8b565b60405160208183030381529060405290506000856040516020016200179b919062002f19565b604051602081830303815290604052905060008389848489604051620017c1906200283e565b620017d195949392919062003033565b604051809103906000f080158015620017ee573d6000803e3d6000fd5b509998505050505050505050565b60006200180983620015b8565b60405163130d191f60e11b8152909150309063261a323e906200183190849060040162003099565b60206040518083038186803b1580156200184a57600080fd5b505afa1580156200185f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001885919062002b37565b15620018df5760405162461bcd60e51b815260206004820152602260248201527f616e20766f756368657220636f6e747261637420616c72656164792065786973604482015261747360f01b6064820152608401620007ba565b6040805180820182526001600160a01b0384168152600160208201529051600b906200190d90849062002e6d565b90815260408051918290036020908101832084518154958301511515600160a01b026001600160a81b03199096166001600160a01b039182161795909517905582820182528483526001838201529285166000908152600c84522081518051929391926200197f92849201906200284c565b506020918201516001918201805460ff1916911515919091179055600d80548083019091557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b038616179055600e80549182018155600052825162001a20927fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd909201918401906200284c565b50505050565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390528491908216906340c10f19906044015b600060405180830381600087803b15801562001a7557600080fd5b505af115801562001a8a573d6000803e3d6000fd5b5050505050505050565b6000818152600660205260408120805460019290620016a190849062003311565b604051632770a7eb60e21b81526001600160a01b03838116600483015260248201839052849190821690639dc29fac9060440162001a5a565b6000818152600560205260408120805460019290620016a190849062003311565b6060600062001b208360026200339d565b62001b2d90600262003311565b67ffffffffffffffff81111562001b485762001b4862003521565b6040519080825280601f01601f19166020018201604052801562001b73576020820181803683370190505b509050600360fc1b8160008151811062001b915762001b916200350b565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062001bc35762001bc36200350b565b60200101906001600160f81b031916908160001a905350600062001be98460026200339d565b62001bf690600162003311565b90505b600181111562001c78576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001c2e5762001c2e6200350b565b1a60f81b82828151811062001c475762001c476200350b565b60200101906001600160f81b031916908160001a90535060049490941c9362001c708162003459565b905062001bf9565b508315620016795760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620007ba565b606062001d0562001cda85620026c7565b848460405160200162001cf09392919062002eb9565b604051602081830303815290604052620015b8565b949350505050565b600062001679828462003311565b6000818152600360205260408120805460019290620016a190849062003311565b60608160005b815181101562001dbb5762001d7a82828151811062001d655762001d656200350b565b01602001516001600160f81b031916620027dd565b82828151811062001d8f5762001d8f6200350b565b60200101906001600160f81b031916908160001a9053508062001db281620034aa565b91505062001d42565b5092915050565b82516000908190859082805b8281101562001e4a57876001600160f81b03191684828151811062001df75762001df76200350b565b01602001516001600160f81b031916141562001e355762001e1a60018362003311565b91508682141562001e355794506001935062001e5692505050565b8062001e4181620034aa565b91505062001dce565b50600080945094505050505b935093915050565b82516060906000908484101562001e8a5750506040805160208101909152600080825290915062001e56565b62001e978160016200166b565b84111562001eba5750506040805160208101909152600080825290915062001e56565b85600062001ec986886200166b565b67ffffffffffffffff81111562001ee45762001ee462003521565b6040519080825280601f01601f19166020018201604052801562001f0f576020820181803683370190505b509050865b86811015620017365782818151811062001f325762001f326200350b565b01602001516001600160f81b0319168262001f4e838b6200166b565b8151811062001f615762001f616200350b565b60200101906001600160f81b031916908160001a9053508062001f8481620034aa565b91505062001f14565b60008181808060025b602a8110156200219d5762001fae610100856200336b565b935084818151811062001fc55762001fc56200350b565b016020015160f81c92508462001fdd82600162003311565b8151811062001ff05762001ff06200350b565b016020015160f81c915060616001600160a01b038416108015906200201f57506066836001600160a01b031611155b156200203a5762002032605784620033bf565b9250620020ad565b6041836001600160a01b0316101580156200205f57506046836001600160a01b031611155b15620020725762002032603784620033bf565b6030836001600160a01b0316101580156200209757506039836001600160a01b031611155b15620020ad57620020aa603084620033bf565b92505b6061826001600160a01b031610158015620020d257506066826001600160a01b031611155b15620020ed57620020e5605783620033bf565b915062002160565b6041826001600160a01b0316101580156200211257506046826001600160a01b031611155b156200212557620020e5603783620033bf565b6030826001600160a01b0316101580156200214a57506039826001600160a01b031611155b1562002160576200215d603083620033bf565b91505b816200216e8460106200336b565b6200217a9190620032e3565b620021869085620032e3565b93506200219560028262003311565b905062001f96565b509195945050505050565b60006001548814806200223857506002546040516343b71f0560e01b8152600481018a90526001600160a01b03909116906343b71f0590602401602060405180830381600087803b158015620021fd57600080fd5b505af115801562002212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002238919062002b37565b620022785760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b6044820152606401620007ba565b6000888152602084905260409020546200229490600162003311565b8514620022a457506000620025d4565b600088815260208381526040808320898452909152812060015460609081908c90811415620022d05750465b6002546040516343f27e4560e01b815260048101839052602481018e90526001600160a01b03909116906343f27e4590604401600060405180830381600087803b1580156200231e57600080fd5b505af115801562002333573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200235d919081019062002a5d565b9350915060005b8251811015620024d157896001600160a01b03168382815181106200238d576200238d6200350b565b60200260200101516001600160a01b031614620023aa57620024bc565b6001955060005b60018601548110156200245457856001018181548110620023d657620023d66200350b565b6000918252602090912001546001600160a01b038c8116911614156200243f5760405162461bcd60e51b815260206004820152601c60248201527f546869732076616c696461746f7220616c726561647920766f746564000000006044820152606401620007ba565b806200244b81620034aa565b915050620023b1565b508c85556001808601805491820181556000908152602090200180546001600160a01b031916331790558351620024b6908590839081106200249a576200249a6200350b565b6020026020010151866002015462001d0d90919063ffffffff16565b60028601555b80620024c881620034aa565b91505062002364565b50505082620025155760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b6044820152606401620007ba565b6000805b82518110156200256b57620025548382815181106200253c576200253c6200350b565b60200260200101518362001d0d90919063ffffffff16565b9150806200256281620034aa565b91505062002519565b506200257981600262002830565b60028401546200258b90600362002830565b10620025cb5760008c815260208890526040902054620025ad90600162003311565b60008d8152602089905260409020555060019350620025d492505050565b60009450505050505b979650505050505050565b80516000908190839082805b82811015620026ba5760308482815181106200260b576200260b6200350b565b016020015160f81c108015906200263f575060398482815181106200263457620026346200350b565b016020015160f81c11155b1562002696576200265282600a62002830565b91506200268e60308583815181106200266f576200266f6200350b565b016020015162002683919060f81c62003404565b839060ff1662001d0d565b9150620026a5565b50600096879650945050505050565b80620026b181620034aa565b915050620025eb565b5095600195509350505050565b606081620026ec5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200271c57806200270381620034aa565b9150620027149050600a8362003354565b9150620026f0565b60008167ffffffffffffffff8111156200273a576200273a62003521565b6040519080825280601f01601f19166020018201604052801562002765576020820181803683370190505b5090505b841562001d05576200277d600183620033ea565b91506200278c600a86620034c8565b6200279990603062003311565b60f81b818381518110620027b157620027b16200350b565b60200101906001600160f81b031916908160001a905350620027d5600a8662003354565b945062002769565b6000604160f81b6001600160f81b03198316108015906200280c5750602d60f91b6001600160f81b0319831611155b156200282c576200282360f883901c60206200332c565b60f81b92915050565b5090565b60006200167982846200339d565b611149806200356183390190565b8280546200285a9062003473565b90600052602060002090601f0160209004810192826200287e5760008555620028c9565b82601f106200289957805160ff1916838001178555620028c9565b82800160010185558215620028c9579182015b82811115620028c9578251825591602001919060010190620028ac565b506200282c9291505b808211156200282c5760008155600101620028d2565b8035620028f58162003537565b919050565b600082601f8301126200290c57600080fd5b81516020620029256200291f8362003291565b6200325d565b80838252828201915082860187848660051b89010111156200294657600080fd5b60005b85811015620029675781518452928401929084019060010162002949565b5090979650505050505050565b600082601f8301126200298657600080fd5b8135620029976200291f82620032b8565b818152846020838601011115620029ad57600080fd5b816020850160208301376000918101602001919091529392505050565b8035620028f58162003550565b600060208284031215620029ea57600080fd5b8135620016798162003537565b60006020828403121562002a0a57600080fd5b8151620016798162003537565b60008060006060848603121562002a2d57600080fd5b833562002a3a8162003537565b9250602084013562002a4c8162003537565b929592945050506040919091013590565b6000806040838503121562002a7157600080fd5b825167ffffffffffffffff8082111562002a8a57600080fd5b818501915085601f83011262002a9f57600080fd5b8151602062002ab26200291f8362003291565b8083825282820191508286018a848660051b890101111562002ad357600080fd5b600096505b8487101562002b0357805162002aee8162003537565b83526001969096019591830191830162002ad8565b509188015191965090935050508082111562002b1e57600080fd5b5062002b2d85828601620028fa565b9150509250929050565b60006020828403121562002b4a57600080fd5b815180151581146200167957600080fd5b60006020828403121562002b6e57600080fd5b813567ffffffffffffffff81111562002b8657600080fd5b62001d058482850162002974565b60006020828403121562002ba757600080fd5b815167ffffffffffffffff81111562002bbf57600080fd5b8201601f8101841362002bd157600080fd5b805162002be26200291f82620032b8565b81815285602083850101111562002bf857600080fd5b62002c0b8260208301602086016200342a565b95945050505050565b600080600080600080600080610100898b03121562002c3257600080fd5b883567ffffffffffffffff8082111562002c4b57600080fd5b62002c598c838d0162002974565b995060208b013591508082111562002c7057600080fd5b62002c7e8c838d0162002974565b985060408b013591508082111562002c9557600080fd5b5062002ca48b828c0162002974565b96505062002cb560608a01620029ca565b945062002cc560808a01620028e8565b979a969950949793969560a0850135955060c08501359460e001359350915050565b60006020828403121562002cfa57600080fd5b5035919050565b6000806040838503121562002d1557600080fd5b82359150602083013562002d298162003537565b809150509250929050565b6000806000806080858703121562002d4b57600080fd5b84359350602085013562002d5f8162003537565b9250604085013562002d718162003537565b9396929550929360600135925050565b6000806040838503121562002d9557600080fd5b50508035926020909101359150565b60008060008060008060c0878903121562002dbe57600080fd5b86359550602087013567ffffffffffffffff81111562002ddd57600080fd5b62002deb89828a0162002974565b955050604087013562002dfe8162003537565b959894975094956060810135955060808101359460a0909101359350915050565b60006020828403121562002e3257600080fd5b8151620016798162003550565b6000815180845262002e598160208601602086016200342a565b601f01601f19169290920160200192915050565b6000825162002e818184602087016200342a565b9190910192915050565b6000825162002e9f8184602087016200342a565b67102b37bab1b432b960c11b920191825250600801919050565b6000845162002ecd8184602089016200342a565b8083019050602f60f81b808252855162002eef816001850160208a016200342a565b6001920191820152835162002f0c8160028401602088016200342a565b0160020195945050505050565b603b60f91b81526000825162002f378160018501602087016200342a565b9190910160010192915050565b898152600060208a5162002f5e81838601848f016200342a565b8a519084019062002f7581848401858f016200342a565b8a5191019062002f8b81848401858e016200342a565b60f89990991b6001600160f81b031916980190810197909752505060609390931b6bffffffffffffffffffffffff19166021850152603584019190915260558301526075820152609501949350505050565b8681526000865162002ff7816020850160208b016200342a565b602092019182019590955260609390931b6bffffffffffffffffffffffff19166040840152605483019190915260748201526094019392505050565b6001600160a01b038616815260a060208201819052600090620030599083018762002e3f565b82810360408401526200306d818762002e3f565b9050828103606084015262003083818662002e3f565b91505060ff831660808301529695505050505050565b60208152600062001679602083018462002e3f565b60a081526000620030c360a083018862002e3f565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b60c0815260006200310560c083018962002e3f565b6001600160a01b0397881660208401529590961660408201526060810193909352608083019190915260a09091015292915050565b6000610120808352620031508184018d62002e3f565b6001600160a01b038c81166020860152604085018c90528a1660608501526080840189905283810360a085015290506200318b818862002e3f565b905082810360c0840152620031a1818762002e3f565b60ff9590951660e084015250506101000152979650505050505050565b60a081526000620031d360a083018862002e3f565b6001600160a01b039690961660208301525060408101939093526060830191909152608090910152919050565b60408152600062003215604083018562002e3f565b905082151560208301529392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171562003289576200328962003521565b604052919050565b600067ffffffffffffffff821115620032ae57620032ae62003521565b5060051b60200190565b600067ffffffffffffffff821115620032d557620032d562003521565b50601f01601f191660200190565b60006001600160a01b03828116848216808303821115620033085762003308620034df565b01949350505050565b60008219821115620033275762003327620034df565b500190565b600060ff821660ff84168060ff038211156200334c576200334c620034df565b019392505050565b600082620033665762003366620034f5565b500490565b60006001600160a01b0382811684821681151582840482111615620033945762003394620034df565b02949350505050565b6000816000190483118215151615620033ba57620033ba620034df565b500290565b60006001600160a01b0383811690831681811015620033e257620033e2620034df565b039392505050565b600082821015620033ff57620033ff620034df565b500390565b600060ff821660ff841680821015620034215762003421620034df565b90039392505050565b60005b83811015620034475781810151838201526020016200342d565b8381111562001a205750506000910152565b6000816200346b576200346b620034df565b506000190190565b600181811c908216806200348857607f821691505b60208210811415620015b257634e487b7160e01b600052602260045260246000fd5b6000600019821415620034c157620034c1620034df565b5060010190565b600082620034da57620034da620034f5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200354d57600080fd5b50565b60ff811681146200354d57600080fdfe60806040523480156200001157600080fd5b50604051620011493803806200114983398101604081905262000034916200021b565b84838381600390805190602001906200004f929190620000be565b50805162000065906004906020840190620000be565b5050600580546001600160a01b0319166001600160a01b0393909316929092179091555083516200009e906006906020870190620000be565b506007805460ff191660ff92909216919091179055506200033c92505050565b828054620000cc90620002e9565b90600052602060002090601f016020900481019282620000f057600085556200013b565b82601f106200010b57805160ff19168380011785556200013b565b828001600101855582156200013b579182015b828111156200013b5782518255916020019190600101906200011e565b50620001499291506200014d565b5090565b5b808211156200014957600081556001016200014e565b600082601f8301126200017657600080fd5b81516001600160401b038082111562000193576200019362000326565b604051601f8301601f19908116603f01168101908282118183101715620001be57620001be62000326565b81604052838152602092508683858801011115620001db57600080fd5b600091505b83821015620001ff5785820183015181830184015290820190620001e0565b83821115620002115760008385830101525b9695505050505050565b600080600080600060a086880312156200023457600080fd5b85516001600160a01b03811681146200024c57600080fd5b60208701519095506001600160401b03808211156200026a57600080fd5b6200027889838a0162000164565b955060408801519150808211156200028f57600080fd5b6200029d89838a0162000164565b94506060880151915080821115620002b457600080fd5b50620002c38882890162000164565b925050608086015160ff81168114620002db57600080fd5b809150509295509295909350565b600181811c90821680620002fe57607f821691505b602082108114156200032057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610dfd806200034c6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063880cdc3111610097578063a457c2d711610066578063a457c2d71461022a578063a9059cbb1461023d578063c370b04214610250578063dd62ed3e1461025857600080fd5b8063880cdc31146101d15780638da5cb5b146101e457806395d89b411461020f5780639dc29fac1461021757600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461018057806340c10f191461019357806370a08231146101a857600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d61026b565b60405161011a9190610cbb565b60405180910390f35b610136610131366004610c91565b6102fd565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610c55565b610315565b60075460405160ff909116815260200161011a565b61013661018e366004610c91565b610339565b6101a66101a1366004610c91565b61035b565b005b61014a6101b6366004610c00565b6001600160a01b031660009081526020819052604090205490565b6101a66101df366004610c00565b61039c565b6005546101f7906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b61010d61042f565b6101a6610225366004610c91565b61043e565b610136610238366004610c91565b61058f565b61013661024b366004610c91565b61060a565b61010d610618565b61014a610266366004610c22565b610627565b60606003805461027a90610d76565b80601f01602080910402602001604051908101604052809291908181526020018280546102a690610d76565b80156102f35780601f106102c8576101008083540402835291602001916102f3565b820191906000526020600020905b8154815290600101906020018083116102d657829003601f168201915b5050505050905090565b60003361030b818585610652565b5060019392505050565b600033610323858285610777565b61032e8585856107f1565b506001949350505050565b60003361030b81858561034c8383610627565b6103569190610d47565b610652565b6005546001600160a01b0316331461038e5760405162461bcd60e51b815260040161038590610d10565b60405180910390fd5b61039882826109bf565b5050565b6005546001600160a01b031633146103c65760405162461bcd60e51b815260040161038590610d10565b600554604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b60606004805461027a90610d76565b6005546001600160a01b031633146104685760405162461bcd60e51b815260040161038590610d10565b6001600160a01b038216600090815260208190526040902054818110156104ec5760405162461bcd60e51b815260206004820152603260248201527f566f7563686572206f776e657220646f6573206e6f74206861766520656e6f7560448201527133b4103130b630b731b2903a3790313ab93760711b6064820152608401610385565b6005546001600160a01b031660006105048583610627565b9050838110156105735760405162461bcd60e51b815260206004820152603460248201527f566f7563686572206f776e657220646964206e6f7420617070726f76656420656044820152733737bab3b41030b6b7bab73a103a3790313ab93760611b6064820152608401610385565b61057e858386610777565b6105888585610a9e565b5050505050565b6000338161059d8286610627565b9050838110156105fd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610385565b61032e8286868403610652565b60003361030b8185856107f1565b60606006805461027a90610d76565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166106b45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610385565b6001600160a01b0382166107155760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610385565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006107838484610627565b905060001981146107eb57818110156107de5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610385565b6107eb8484848403610652565b50505050565b6001600160a01b0383166108555760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610385565b6001600160a01b0382166108b75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610385565b6001600160a01b0383166000908152602081905260409020548181101561092f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610385565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610966908490610d47565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109b291815260200190565b60405180910390a36107eb565b6001600160a01b038216610a155760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610385565b8060026000828254610a279190610d47565b90915550506001600160a01b03821660009081526020819052604081208054839290610a54908490610d47565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610afe5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610385565b6001600160a01b03821660009081526020819052604090205481811015610b725760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610385565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610ba1908490610d5f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161076a565b80356001600160a01b0381168114610bfb57600080fd5b919050565b600060208284031215610c1257600080fd5b610c1b82610be4565b9392505050565b60008060408385031215610c3557600080fd5b610c3e83610be4565b9150610c4c60208401610be4565b90509250929050565b600080600060608486031215610c6a57600080fd5b610c7384610be4565b9250610c8160208501610be4565b9150604084013590509250925092565b60008060408385031215610ca457600080fd5b610cad83610be4565b946020939093013593505050565b600060208083528351808285015260005b81811015610ce857858101830151858201604001528201610ccc565b81811115610cfa576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b60008219821115610d5a57610d5a610db1565b500190565b600082821015610d7157610d71610db1565b500390565b600181811c90821680610d8a57607f821691505b60208210811415610dab57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea264697066735822122006e787624f50c8ead11ce74a6bf683b85680f27a4f454d7535d522cb53994fb364736f6c63430008070033a264697066735822122030acc1b5a26db515b457396b5f9699e845fb6ce9a4d7a7c1c1ae51292f3f1f9764736f6c63430008070033",
}

// TNT20TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use TNT20TokenBankMetaData.ABI instead.
var TNT20TokenBankABI = TNT20TokenBankMetaData.ABI

// TNT20TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TNT20TokenBankMetaData.Bin instead.
var TNT20TokenBankBin = TNT20TokenBankMetaData.Bin

// DeployTNT20TokenBank deploys a new Ethereum contract, binding an instance of TNT20TokenBank to it.
func DeployTNT20TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, mainchainid_ *big.Int, chainregistrar_ common.Address) (common.Address, *types.Transaction, *TNT20TokenBank, error) {
	parsed, err := TNT20TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TNT20TokenBankBin), backend, mainchainid_, chainregistrar_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TNT20TokenBank{TNT20TokenBankCaller: TNT20TokenBankCaller{contract: contract}, TNT20TokenBankTransactor: TNT20TokenBankTransactor{contract: contract}, TNT20TokenBankFilterer: TNT20TokenBankFilterer{contract: contract}}, nil
}

// TNT20TokenBank is an auto generated Go binding around an Ethereum contract.
type TNT20TokenBank struct {
	TNT20TokenBankCaller     // Read-only binding to the contract
	TNT20TokenBankTransactor // Write-only binding to the contract
	TNT20TokenBankFilterer   // Log filterer for contract events
}

// TNT20TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type TNT20TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT20TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TNT20TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT20TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TNT20TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT20TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TNT20TokenBankSession struct {
	Contract     *TNT20TokenBank   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TNT20TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TNT20TokenBankCallerSession struct {
	Contract *TNT20TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// TNT20TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TNT20TokenBankTransactorSession struct {
	Contract     *TNT20TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// TNT20TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type TNT20TokenBankRaw struct {
	Contract *TNT20TokenBank // Generic contract binding to access the raw methods on
}

// TNT20TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TNT20TokenBankCallerRaw struct {
	Contract *TNT20TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// TNT20TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TNT20TokenBankTransactorRaw struct {
	Contract *TNT20TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTNT20TokenBank creates a new instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBank(address common.Address, backend bind.ContractBackend) (*TNT20TokenBank, error) {
	contract, err := bindTNT20TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBank{TNT20TokenBankCaller: TNT20TokenBankCaller{contract: contract}, TNT20TokenBankTransactor: TNT20TokenBankTransactor{contract: contract}, TNT20TokenBankFilterer: TNT20TokenBankFilterer{contract: contract}}, nil
}

// NewTNT20TokenBankCaller creates a new read-only instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBankCaller(address common.Address, caller bind.ContractCaller) (*TNT20TokenBankCaller, error) {
	contract, err := bindTNT20TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankCaller{contract: contract}, nil
}

// NewTNT20TokenBankTransactor creates a new write-only instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*TNT20TokenBankTransactor, error) {
	contract, err := bindTNT20TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTransactor{contract: contract}, nil
}

// NewTNT20TokenBankFilterer creates a new log filterer instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*TNT20TokenBankFilterer, error) {
	contract, err := bindTNT20TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankFilterer{contract: contract}, nil
}

// bindTNT20TokenBank binds a generic wrapper to an already deployed contract.
func bindTNT20TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TNT20TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT20TokenBank *TNT20TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT20TokenBank.Contract.TNT20TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT20TokenBank *TNT20TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.TNT20TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT20TokenBank *TNT20TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.TNT20TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT20TokenBank *TNT20TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT20TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT20TokenBank *TNT20TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT20TokenBank *TNT20TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.contract.Transact(opts, method, params...)
}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCaller) Alldenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "alldenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankSession) Alldenoms(arg0 *big.Int) (string, error) {
	return _TNT20TokenBank.Contract.Alldenoms(&_TNT20TokenBank.CallOpts, arg0)
}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Alldenoms(arg0 *big.Int) (string, error) {
	return _TNT20TokenBank.Contract.Alldenoms(&_TNT20TokenBank.CallOpts, arg0)
}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCaller) Allvouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "allvouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankSession) Allvouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT20TokenBank.Contract.Allvouchers(&_TNT20TokenBank.CallOpts, arg0)
}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Allvouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT20TokenBank.Contract.Allvouchers(&_TNT20TokenBank.CallOpts, arg0)
}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCaller) Denomtovoucherlookup(opts *bind.CallOpts, arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "denomtovoucherlookup", arg0)

	outstruct := new(struct {
		Contractaddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Contractaddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_TNT20TokenBank *TNT20TokenBankSession) Denomtovoucherlookup(arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	return _TNT20TokenBank.Contract.Denomtovoucherlookup(&_TNT20TokenBank.CallOpts, arg0)
}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Denomtovoucherlookup(arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	return _TNT20TokenBank.Contract.Denomtovoucherlookup(&_TNT20TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankSession) Exists(denom string) (bool, error) {
	return _TNT20TokenBank.Contract.Exists(&_TNT20TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _TNT20TokenBank.Contract.Exists(&_TNT20TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCaller) Exists0(opts *bind.CallOpts, voucheraddress common.Address) (bool, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "exists0", voucheraddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankSession) Exists0(voucheraddress common.Address) (bool, error) {
	return _TNT20TokenBank.Contract.Exists0(&_TNT20TokenBank.CallOpts, voucheraddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Exists0(voucheraddress common.Address) (bool, error) {
	return _TNT20TokenBank.Contract.Exists0(&_TNT20TokenBank.CallOpts, voucheraddress)
}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCaller) Getdenom(opts *bind.CallOpts, vouchercontractaddr common.Address) (string, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getdenom", vouchercontractaddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankSession) Getdenom(vouchercontractaddr common.Address) (string, error) {
	return _TNT20TokenBank.Contract.Getdenom(&_TNT20TokenBank.CallOpts, vouchercontractaddr)
}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Getdenom(vouchercontractaddr common.Address) (string, error) {
	return _TNT20TokenBank.Contract.Getdenom(&_TNT20TokenBank.CallOpts, vouchercontractaddr)
}

// Getmaxprocessedtokenlocknonce is a free data retrieval call binding the contract method 0x46e241e5.
//
// Solidity: function getmaxprocessedtokenlocknonce(uint256 chainid) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) Getmaxprocessedtokenlocknonce(opts *bind.CallOpts, chainid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getmaxprocessedtokenlocknonce", chainid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Getmaxprocessedtokenlocknonce is a free data retrieval call binding the contract method 0x46e241e5.
//
// Solidity: function getmaxprocessedtokenlocknonce(uint256 chainid) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) Getmaxprocessedtokenlocknonce(chainid *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Getmaxprocessedtokenlocknonce(&_TNT20TokenBank.CallOpts, chainid)
}

// Getmaxprocessedtokenlocknonce is a free data retrieval call binding the contract method 0x46e241e5.
//
// Solidity: function getmaxprocessedtokenlocknonce(uint256 chainid) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Getmaxprocessedtokenlocknonce(chainid *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Getmaxprocessedtokenlocknonce(&_TNT20TokenBank.CallOpts, chainid)
}

// Getmaxprocessedvoucherburnnonce is a free data retrieval call binding the contract method 0xd0f2c8f0.
//
// Solidity: function getmaxprocessedvoucherburnnonce(uint256 chainid) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) Getmaxprocessedvoucherburnnonce(opts *bind.CallOpts, chainid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getmaxprocessedvoucherburnnonce", chainid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Getmaxprocessedvoucherburnnonce is a free data retrieval call binding the contract method 0xd0f2c8f0.
//
// Solidity: function getmaxprocessedvoucherburnnonce(uint256 chainid) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) Getmaxprocessedvoucherburnnonce(chainid *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Getmaxprocessedvoucherburnnonce(&_TNT20TokenBank.CallOpts, chainid)
}

// Getmaxprocessedvoucherburnnonce is a free data retrieval call binding the contract method 0xd0f2c8f0.
//
// Solidity: function getmaxprocessedvoucherburnnonce(uint256 chainid) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Getmaxprocessedvoucherburnnonce(chainid *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Getmaxprocessedvoucherburnnonce(&_TNT20TokenBank.CallOpts, chainid)
}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCaller) Getvoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getvoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankSession) Getvoucher(denom string) (common.Address, error) {
	return _TNT20TokenBank.Contract.Getvoucher(&_TNT20TokenBank.CallOpts, denom)
}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Getvoucher(denom string) (common.Address, error) {
	return _TNT20TokenBank.Contract.Getvoucher(&_TNT20TokenBank.CallOpts, denom)
}

// Mainchainid is a free data retrieval call binding the contract method 0xba3599b3.
//
// Solidity: function mainchainid() view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) Mainchainid(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "mainchainid")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Mainchainid is a free data retrieval call binding the contract method 0xba3599b3.
//
// Solidity: function mainchainid() view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) Mainchainid() (*big.Int, error) {
	return _TNT20TokenBank.Contract.Mainchainid(&_TNT20TokenBank.CallOpts)
}

// Mainchainid is a free data retrieval call binding the contract method 0xba3599b3.
//
// Solidity: function mainchainid() view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Mainchainid() (*big.Int, error) {
	return _TNT20TokenBank.Contract.Mainchainid(&_TNT20TokenBank.CallOpts)
}

// Tokenlocknoncemap is a free data retrieval call binding the contract method 0x52baad62.
//
// Solidity: function tokenlocknoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) Tokenlocknoncemap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "tokenlocknoncemap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Tokenlocknoncemap is a free data retrieval call binding the contract method 0x52baad62.
//
// Solidity: function tokenlocknoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) Tokenlocknoncemap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Tokenlocknoncemap(&_TNT20TokenBank.CallOpts, arg0)
}

// Tokenlocknoncemap is a free data retrieval call binding the contract method 0x52baad62.
//
// Solidity: function tokenlocknoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Tokenlocknoncemap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Tokenlocknoncemap(&_TNT20TokenBank.CallOpts, arg0)
}

// Tokenlockvotingrecords is a free data retrieval call binding the contract method 0x1b637e32.
//
// Solidity: function tokenlockvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_TNT20TokenBank *TNT20TokenBankCaller) Tokenlockvotingrecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "tokenlockvotingrecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		Accumlatedshares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Accumlatedshares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Tokenlockvotingrecords is a free data retrieval call binding the contract method 0x1b637e32.
//
// Solidity: function tokenlockvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_TNT20TokenBank *TNT20TokenBankSession) Tokenlockvotingrecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.Tokenlockvotingrecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// Tokenlockvotingrecords is a free data retrieval call binding the contract method 0x1b637e32.
//
// Solidity: function tokenlockvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Tokenlockvotingrecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.Tokenlockvotingrecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// Tokenunlocknoncemap is a free data retrieval call binding the contract method 0x12d53e08.
//
// Solidity: function tokenunlocknoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) Tokenunlocknoncemap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "tokenunlocknoncemap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Tokenunlocknoncemap is a free data retrieval call binding the contract method 0x12d53e08.
//
// Solidity: function tokenunlocknoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) Tokenunlocknoncemap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Tokenunlocknoncemap(&_TNT20TokenBank.CallOpts, arg0)
}

// Tokenunlocknoncemap is a free data retrieval call binding the contract method 0x12d53e08.
//
// Solidity: function tokenunlocknoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Tokenunlocknoncemap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Tokenunlocknoncemap(&_TNT20TokenBank.CallOpts, arg0)
}

// Totallockedamounts is a free data retrieval call binding the contract method 0x103ad5cb.
//
// Solidity: function totallockedamounts(uint256 , address ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) Totallockedamounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "totallockedamounts", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Totallockedamounts is a free data retrieval call binding the contract method 0x103ad5cb.
//
// Solidity: function totallockedamounts(uint256 , address ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) Totallockedamounts(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Totallockedamounts(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// Totallockedamounts is a free data retrieval call binding the contract method 0x103ad5cb.
//
// Solidity: function totallockedamounts(uint256 , address ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Totallockedamounts(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Totallockedamounts(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCaller) Voucheraddresstodenomlookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucheraddresstodenomlookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_TNT20TokenBank *TNT20TokenBankSession) Voucheraddresstodenomlookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT20TokenBank.Contract.Voucheraddresstodenomlookup(&_TNT20TokenBank.CallOpts, arg0)
}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Voucheraddresstodenomlookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT20TokenBank.Contract.Voucheraddresstodenomlookup(&_TNT20TokenBank.CallOpts, arg0)
}

// Voucherburnnoncemap is a free data retrieval call binding the contract method 0x617d9140.
//
// Solidity: function voucherburnnoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) Voucherburnnoncemap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucherburnnoncemap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Voucherburnnoncemap is a free data retrieval call binding the contract method 0x617d9140.
//
// Solidity: function voucherburnnoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) Voucherburnnoncemap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Voucherburnnoncemap(&_TNT20TokenBank.CallOpts, arg0)
}

// Voucherburnnoncemap is a free data retrieval call binding the contract method 0x617d9140.
//
// Solidity: function voucherburnnoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Voucherburnnoncemap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Voucherburnnoncemap(&_TNT20TokenBank.CallOpts, arg0)
}

// Voucherburnvotingrecords is a free data retrieval call binding the contract method 0x147ea516.
//
// Solidity: function voucherburnvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_TNT20TokenBank *TNT20TokenBankCaller) Voucherburnvotingrecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucherburnvotingrecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		Accumlatedshares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Accumlatedshares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Voucherburnvotingrecords is a free data retrieval call binding the contract method 0x147ea516.
//
// Solidity: function voucherburnvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_TNT20TokenBank *TNT20TokenBankSession) Voucherburnvotingrecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.Voucherburnvotingrecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// Voucherburnvotingrecords is a free data retrieval call binding the contract method 0x147ea516.
//
// Solidity: function voucherburnvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Voucherburnvotingrecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.Voucherburnvotingrecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// Vouchermintnoncemap is a free data retrieval call binding the contract method 0xe7614834.
//
// Solidity: function vouchermintnoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) Vouchermintnoncemap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "vouchermintnoncemap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Vouchermintnoncemap is a free data retrieval call binding the contract method 0xe7614834.
//
// Solidity: function vouchermintnoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) Vouchermintnoncemap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Vouchermintnoncemap(&_TNT20TokenBank.CallOpts, arg0)
}

// Vouchermintnoncemap is a free data retrieval call binding the contract method 0xe7614834.
//
// Solidity: function vouchermintnoncemap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Vouchermintnoncemap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.Vouchermintnoncemap(&_TNT20TokenBank.CallOpts, arg0)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address sourcechainvouchercontractaddr, address targetchaintokenreceiver, uint256 burnedamount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) Burnvouchers(opts *bind.TransactOpts, sourcechainvouchercontractaddr common.Address, targetchaintokenreceiver common.Address, burnedamount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "burnvouchers", sourcechainvouchercontractaddr, targetchaintokenreceiver, burnedamount)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address sourcechainvouchercontractaddr, address targetchaintokenreceiver, uint256 burnedamount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankSession) Burnvouchers(sourcechainvouchercontractaddr common.Address, targetchaintokenreceiver common.Address, burnedamount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.Burnvouchers(&_TNT20TokenBank.TransactOpts, sourcechainvouchercontractaddr, targetchaintokenreceiver, burnedamount)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address sourcechainvouchercontractaddr, address targetchaintokenreceiver, uint256 burnedamount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) Burnvouchers(sourcechainvouchercontractaddr common.Address, targetchaintokenreceiver common.Address, burnedamount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.Burnvouchers(&_TNT20TokenBank.TransactOpts, sourcechainvouchercontractaddr, targetchaintokenreceiver, burnedamount)
}

// Locktokens is a paid mutator transaction binding the contract method 0x2d9b0fd5.
//
// Solidity: function locktokens(uint256 targetchainid, address sourcechaintnt20contract, address targetchainvoucherreceiver, uint256 lockamount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) Locktokens(opts *bind.TransactOpts, targetchainid *big.Int, sourcechaintnt20contract common.Address, targetchainvoucherreceiver common.Address, lockamount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "locktokens", targetchainid, sourcechaintnt20contract, targetchainvoucherreceiver, lockamount)
}

// Locktokens is a paid mutator transaction binding the contract method 0x2d9b0fd5.
//
// Solidity: function locktokens(uint256 targetchainid, address sourcechaintnt20contract, address targetchainvoucherreceiver, uint256 lockamount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankSession) Locktokens(targetchainid *big.Int, sourcechaintnt20contract common.Address, targetchainvoucherreceiver common.Address, lockamount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.Locktokens(&_TNT20TokenBank.TransactOpts, targetchainid, sourcechaintnt20contract, targetchainvoucherreceiver, lockamount)
}

// Locktokens is a paid mutator transaction binding the contract method 0x2d9b0fd5.
//
// Solidity: function locktokens(uint256 targetchainid, address sourcechaintnt20contract, address targetchainvoucherreceiver, uint256 lockamount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) Locktokens(targetchainid *big.Int, sourcechaintnt20contract common.Address, targetchainvoucherreceiver common.Address, lockamount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.Locktokens(&_TNT20TokenBank.TransactOpts, targetchainid, sourcechaintnt20contract, targetchainvoucherreceiver, lockamount)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0x472d8586.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, uint8 decimals, address targetchainvoucherreceiver, uint256 mintedamount, uint256 dynasty, uint256 sourcechaintokenlocknonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) Mintvouchers(opts *bind.TransactOpts, denom string, name string, symbol string, decimals uint8, targetchainvoucherreceiver common.Address, mintedamount *big.Int, dynasty *big.Int, sourcechaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "mintvouchers", denom, name, symbol, decimals, targetchainvoucherreceiver, mintedamount, dynasty, sourcechaintokenlocknonce)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0x472d8586.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, uint8 decimals, address targetchainvoucherreceiver, uint256 mintedamount, uint256 dynasty, uint256 sourcechaintokenlocknonce) returns()
func (_TNT20TokenBank *TNT20TokenBankSession) Mintvouchers(denom string, name string, symbol string, decimals uint8, targetchainvoucherreceiver common.Address, mintedamount *big.Int, dynasty *big.Int, sourcechaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.Mintvouchers(&_TNT20TokenBank.TransactOpts, denom, name, symbol, decimals, targetchainvoucherreceiver, mintedamount, dynasty, sourcechaintokenlocknonce)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0x472d8586.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, uint8 decimals, address targetchainvoucherreceiver, uint256 mintedamount, uint256 dynasty, uint256 sourcechaintokenlocknonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) Mintvouchers(denom string, name string, symbol string, decimals uint8, targetchainvoucherreceiver common.Address, mintedamount *big.Int, dynasty *big.Int, sourcechaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.Mintvouchers(&_TNT20TokenBank.TransactOpts, denom, name, symbol, decimals, targetchainvoucherreceiver, mintedamount, dynasty, sourcechaintokenlocknonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0xd072dc3f.
//
// Solidity: function unlocktokens(uint256 sourcechainid, string denom, address targetchaintokenreceiver, uint256 unlockamount, uint256 dynasty, uint256 sourcechainvoucherburnnonce) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) Unlocktokens(opts *bind.TransactOpts, sourcechainid *big.Int, denom string, targetchaintokenreceiver common.Address, unlockamount *big.Int, dynasty *big.Int, sourcechainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "unlocktokens", sourcechainid, denom, targetchaintokenreceiver, unlockamount, dynasty, sourcechainvoucherburnnonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0xd072dc3f.
//
// Solidity: function unlocktokens(uint256 sourcechainid, string denom, address targetchaintokenreceiver, uint256 unlockamount, uint256 dynasty, uint256 sourcechainvoucherburnnonce) payable returns()
func (_TNT20TokenBank *TNT20TokenBankSession) Unlocktokens(sourcechainid *big.Int, denom string, targetchaintokenreceiver common.Address, unlockamount *big.Int, dynasty *big.Int, sourcechainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.Unlocktokens(&_TNT20TokenBank.TransactOpts, sourcechainid, denom, targetchaintokenreceiver, unlockamount, dynasty, sourcechainvoucherburnnonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0xd072dc3f.
//
// Solidity: function unlocktokens(uint256 sourcechainid, string denom, address targetchaintokenreceiver, uint256 unlockamount, uint256 dynasty, uint256 sourcechainvoucherburnnonce) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) Unlocktokens(sourcechainid *big.Int, denom string, targetchaintokenreceiver common.Address, unlockamount *big.Int, dynasty *big.Int, sourcechainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.Unlocktokens(&_TNT20TokenBank.TransactOpts, sourcechainid, denom, targetchaintokenreceiver, unlockamount, dynasty, sourcechainvoucherburnnonce)
}

// TNT20TokenBankTnt20tokenlockedIterator is returned from FilterTnt20tokenlocked and is used to iterate over the raw logs and unpacked data for Tnt20tokenlocked events raised by the TNT20TokenBank contract.
type TNT20TokenBankTnt20tokenlockedIterator struct {
	Event *TNT20TokenBankTnt20tokenlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTnt20tokenlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTnt20tokenlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTnt20tokenlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTnt20tokenlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTnt20tokenlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTnt20tokenlocked represents a Tnt20tokenlocked event raised by the TNT20TokenBank contract.
type TNT20TokenBankTnt20tokenlocked struct {
	Denom                      string
	Sourcechaintokensender     common.Address
	Targetchainid              *big.Int
	Targetchainvoucherreceiver common.Address
	Lockedamount               *big.Int
	Name                       string
	Symbol                     string
	Decimal                    uint8
	Tokenlocknonce             *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTnt20tokenlocked is a free log retrieval operation binding the contract event 0x09886df38dfb96a3e21dcd0d93fd0b999f9a416f0e0c1c4bd57b42f417b53617.
//
// Solidity: event tnt20tokenlocked(string denom, address sourcechaintokensender, uint256 targetchainid, address targetchainvoucherreceiver, uint256 lockedamount, string name, string symbol, uint8 decimal, uint256 tokenlocknonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTnt20tokenlocked(opts *bind.FilterOpts) (*TNT20TokenBankTnt20tokenlockedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "tnt20tokenlocked")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTnt20tokenlockedIterator{contract: _TNT20TokenBank.contract, event: "tnt20tokenlocked", logs: logs, sub: sub}, nil
}

// WatchTnt20tokenlocked is a free log subscription operation binding the contract event 0x09886df38dfb96a3e21dcd0d93fd0b999f9a416f0e0c1c4bd57b42f417b53617.
//
// Solidity: event tnt20tokenlocked(string denom, address sourcechaintokensender, uint256 targetchainid, address targetchainvoucherreceiver, uint256 lockedamount, string name, string symbol, uint8 decimal, uint256 tokenlocknonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTnt20tokenlocked(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTnt20tokenlocked) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "tnt20tokenlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTnt20tokenlocked)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "tnt20tokenlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt20tokenlocked is a log parse operation binding the contract event 0x09886df38dfb96a3e21dcd0d93fd0b999f9a416f0e0c1c4bd57b42f417b53617.
//
// Solidity: event tnt20tokenlocked(string denom, address sourcechaintokensender, uint256 targetchainid, address targetchainvoucherreceiver, uint256 lockedamount, string name, string symbol, uint8 decimal, uint256 tokenlocknonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTnt20tokenlocked(log types.Log) (*TNT20TokenBankTnt20tokenlocked, error) {
	event := new(TNT20TokenBankTnt20tokenlocked)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "tnt20tokenlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTnt20tokenunlockedIterator is returned from FilterTnt20tokenunlocked and is used to iterate over the raw logs and unpacked data for Tnt20tokenunlocked events raised by the TNT20TokenBank contract.
type TNT20TokenBankTnt20tokenunlockedIterator struct {
	Event *TNT20TokenBankTnt20tokenunlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTnt20tokenunlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTnt20tokenunlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTnt20tokenunlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTnt20tokenunlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTnt20tokenunlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTnt20tokenunlocked represents a Tnt20tokenunlocked event raised by the TNT20TokenBank contract.
type TNT20TokenBankTnt20tokenunlocked struct {
	Denom                       string
	Targetchaintokenreceiver    common.Address
	Unlockedamount              *big.Int
	Sourcechainvoucherburnnonce *big.Int
	Tokenunlocknonce            *big.Int
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterTnt20tokenunlocked is a free log retrieval operation binding the contract event 0x84261a8bd3f64d2ec738c5da253d1767d8550f4b8ec18250bdd0885387b719bd.
//
// Solidity: event tnt20tokenunlocked(string denom, address targetchaintokenreceiver, uint256 unlockedamount, uint256 sourcechainvoucherburnnonce, uint256 tokenunlocknonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTnt20tokenunlocked(opts *bind.FilterOpts) (*TNT20TokenBankTnt20tokenunlockedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "tnt20tokenunlocked")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTnt20tokenunlockedIterator{contract: _TNT20TokenBank.contract, event: "tnt20tokenunlocked", logs: logs, sub: sub}, nil
}

// WatchTnt20tokenunlocked is a free log subscription operation binding the contract event 0x84261a8bd3f64d2ec738c5da253d1767d8550f4b8ec18250bdd0885387b719bd.
//
// Solidity: event tnt20tokenunlocked(string denom, address targetchaintokenreceiver, uint256 unlockedamount, uint256 sourcechainvoucherburnnonce, uint256 tokenunlocknonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTnt20tokenunlocked(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTnt20tokenunlocked) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "tnt20tokenunlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTnt20tokenunlocked)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "tnt20tokenunlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt20tokenunlocked is a log parse operation binding the contract event 0x84261a8bd3f64d2ec738c5da253d1767d8550f4b8ec18250bdd0885387b719bd.
//
// Solidity: event tnt20tokenunlocked(string denom, address targetchaintokenreceiver, uint256 unlockedamount, uint256 sourcechainvoucherburnnonce, uint256 tokenunlocknonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTnt20tokenunlocked(log types.Log) (*TNT20TokenBankTnt20tokenunlocked, error) {
	event := new(TNT20TokenBankTnt20tokenunlocked)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "tnt20tokenunlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTnt20voucherburnedIterator is returned from FilterTnt20voucherburned and is used to iterate over the raw logs and unpacked data for Tnt20voucherburned events raised by the TNT20TokenBank contract.
type TNT20TokenBankTnt20voucherburnedIterator struct {
	Event *TNT20TokenBankTnt20voucherburned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTnt20voucherburnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTnt20voucherburned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTnt20voucherburned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTnt20voucherburnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTnt20voucherburnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTnt20voucherburned represents a Tnt20voucherburned event raised by the TNT20TokenBank contract.
type TNT20TokenBankTnt20voucherburned struct {
	Denom                    string
	Sourcechainvoucherowner  common.Address
	Targetchaintokenreceiver common.Address
	Burnedamount             *big.Int
	Voucherburnnonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTnt20voucherburned is a free log retrieval operation binding the contract event 0x5669f3df88985cce96f0014a6e4351b646f286518bf339d35cde2f565650b386.
//
// Solidity: event tnt20voucherburned(string denom, address sourcechainvoucherowner, address targetchaintokenreceiver, uint256 burnedamount, uint256 voucherburnnonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTnt20voucherburned(opts *bind.FilterOpts) (*TNT20TokenBankTnt20voucherburnedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "tnt20voucherburned")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTnt20voucherburnedIterator{contract: _TNT20TokenBank.contract, event: "tnt20voucherburned", logs: logs, sub: sub}, nil
}

// WatchTnt20voucherburned is a free log subscription operation binding the contract event 0x5669f3df88985cce96f0014a6e4351b646f286518bf339d35cde2f565650b386.
//
// Solidity: event tnt20voucherburned(string denom, address sourcechainvoucherowner, address targetchaintokenreceiver, uint256 burnedamount, uint256 voucherburnnonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTnt20voucherburned(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTnt20voucherburned) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "tnt20voucherburned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTnt20voucherburned)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "tnt20voucherburned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt20voucherburned is a log parse operation binding the contract event 0x5669f3df88985cce96f0014a6e4351b646f286518bf339d35cde2f565650b386.
//
// Solidity: event tnt20voucherburned(string denom, address sourcechainvoucherowner, address targetchaintokenreceiver, uint256 burnedamount, uint256 voucherburnnonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTnt20voucherburned(log types.Log) (*TNT20TokenBankTnt20voucherburned, error) {
	event := new(TNT20TokenBankTnt20voucherburned)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "tnt20voucherburned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTnt20vouchermintedIterator is returned from FilterTnt20voucherminted and is used to iterate over the raw logs and unpacked data for Tnt20voucherminted events raised by the TNT20TokenBank contract.
type TNT20TokenBankTnt20vouchermintedIterator struct {
	Event *TNT20TokenBankTnt20voucherminted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTnt20vouchermintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTnt20voucherminted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTnt20voucherminted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTnt20vouchermintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTnt20vouchermintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTnt20voucherminted represents a Tnt20voucherminted event raised by the TNT20TokenBank contract.
type TNT20TokenBankTnt20voucherminted struct {
	Denom                      string
	Targetchainvoucherreceiver common.Address
	Vouchercontact             common.Address
	Mintedamount               *big.Int
	Sourcechaintokenlocknonce  *big.Int
	Vouchermintnonce           *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTnt20voucherminted is a free log retrieval operation binding the contract event 0x92e571e095174149fd09b04c8acfa9626f1e6ff36dc580d2d26d9030d8041925.
//
// Solidity: event tnt20voucherminted(string denom, address targetchainvoucherreceiver, address vouchercontact, uint256 mintedamount, uint256 sourcechaintokenlocknonce, uint256 vouchermintnonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTnt20voucherminted(opts *bind.FilterOpts) (*TNT20TokenBankTnt20vouchermintedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "tnt20voucherminted")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTnt20vouchermintedIterator{contract: _TNT20TokenBank.contract, event: "tnt20voucherminted", logs: logs, sub: sub}, nil
}

// WatchTnt20voucherminted is a free log subscription operation binding the contract event 0x92e571e095174149fd09b04c8acfa9626f1e6ff36dc580d2d26d9030d8041925.
//
// Solidity: event tnt20voucherminted(string denom, address targetchainvoucherreceiver, address vouchercontact, uint256 mintedamount, uint256 sourcechaintokenlocknonce, uint256 vouchermintnonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTnt20voucherminted(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTnt20voucherminted) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "tnt20voucherminted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTnt20voucherminted)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "tnt20voucherminted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt20voucherminted is a log parse operation binding the contract event 0x92e571e095174149fd09b04c8acfa9626f1e6ff36dc580d2d26d9030d8041925.
//
// Solidity: event tnt20voucherminted(string denom, address targetchainvoucherreceiver, address vouchercontact, uint256 mintedamount, uint256 sourcechaintokenlocknonce, uint256 vouchermintnonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTnt20voucherminted(log types.Log) (*TNT20TokenBankTnt20voucherminted, error) {
	event := new(TNT20TokenBankTnt20voucherminted)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "tnt20voucherminted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
