// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TNT721TokenBankMetaData contains all meta data concerning the TNT721TokenBank contract.
var TNT721TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mainchainID_\",\"type\":\"uint256\"},{\"internalType\":\"contractChainRegistrar\",\"name\":\"chainRegistrar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainTokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenUnlockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainVoucherOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721VoucherBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voucherContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherMintNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721VoucherMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDenoms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVouchers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomToVoucherLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherAddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"getAdjustedValidatorSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherContractAddr\",\"type\":\"address\"}],\"name\":\"getDenom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedTokenLockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedVoucherBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNonce\",\"type\":\"uint256\"}],\"name\":\"getTokenLockEventHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getVoucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNonce\",\"type\":\"uint256\"}],\"name\":\"getVoucherBurnEventHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenLockVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUnlockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalLockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucherAddressToDenomLookup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherBurnNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherBurnVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherMintNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceChainTNT721Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"mintVouchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceChainVoucherContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burnVouchers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// TNT721TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use TNT721TokenBankMetaData.ABI instead.
var TNT721TokenBankABI = TNT721TokenBankMetaData.ABI

// TNT721TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TNT721TokenBankMetaData.Bin instead.
var TNT721TokenBankBin = TNT721TokenBankMetaData.Bin

// DeployTNT721TokenBank deploys a new Ethereum contract, binding an instance of TNT721TokenBank to it.
func DeployTNT721TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, mainchainID_ *big.Int, chainRegistrar_ common.Address) (common.Address, *types.Transaction, *TNT721TokenBank, error) {
	parsed, err := TNT721TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TNT721TokenBankBin), backend, mainchainID_, chainRegistrar_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TNT721TokenBank{TNT721TokenBankCaller: TNT721TokenBankCaller{contract: contract}, TNT721TokenBankTransactor: TNT721TokenBankTransactor{contract: contract}, TNT721TokenBankFilterer: TNT721TokenBankFilterer{contract: contract}}, nil
}

// TNT721TokenBank is an auto generated Go binding around an Ethereum contract.
type TNT721TokenBank struct {
	TNT721TokenBankCaller     // Read-only binding to the contract
	TNT721TokenBankTransactor // Write-only binding to the contract
	TNT721TokenBankFilterer   // Log filterer for contract events
}

// TNT721TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type TNT721TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT721TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TNT721TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT721TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TNT721TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT721TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TNT721TokenBankSession struct {
	Contract     *TNT721TokenBank  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TNT721TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TNT721TokenBankCallerSession struct {
	Contract *TNT721TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// TNT721TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TNT721TokenBankTransactorSession struct {
	Contract     *TNT721TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TNT721TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type TNT721TokenBankRaw struct {
	Contract *TNT721TokenBank // Generic contract binding to access the raw methods on
}

// TNT721TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TNT721TokenBankCallerRaw struct {
	Contract *TNT721TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// TNT721TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TNT721TokenBankTransactorRaw struct {
	Contract *TNT721TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTNT721TokenBank creates a new instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBank(address common.Address, backend bind.ContractBackend) (*TNT721TokenBank, error) {
	contract, err := bindTNT721TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBank{TNT721TokenBankCaller: TNT721TokenBankCaller{contract: contract}, TNT721TokenBankTransactor: TNT721TokenBankTransactor{contract: contract}, TNT721TokenBankFilterer: TNT721TokenBankFilterer{contract: contract}}, nil
}

// NewTNT721TokenBankCaller creates a new read-only instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBankCaller(address common.Address, caller bind.ContractCaller) (*TNT721TokenBankCaller, error) {
	contract, err := bindTNT721TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankCaller{contract: contract}, nil
}

// NewTNT721TokenBankTransactor creates a new write-only instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*TNT721TokenBankTransactor, error) {
	contract, err := bindTNT721TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTransactor{contract: contract}, nil
}

// NewTNT721TokenBankFilterer creates a new log filterer instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*TNT721TokenBankFilterer, error) {
	contract, err := bindTNT721TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankFilterer{contract: contract}, nil
}

// bindTNT721TokenBank binds a generic wrapper to an already deployed contract.
func bindTNT721TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TNT721TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT721TokenBank *TNT721TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT721TokenBank.Contract.TNT721TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT721TokenBank *TNT721TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.TNT721TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT721TokenBank *TNT721TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.TNT721TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT721TokenBank *TNT721TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT721TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT721TokenBank *TNT721TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT721TokenBank *TNT721TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.contract.Transact(opts, method, params...)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCaller) AllDenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "allDenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT721TokenBank.Contract.AllDenoms(&_TNT721TokenBank.CallOpts, arg0)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT721TokenBank.Contract.AllDenoms(&_TNT721TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCaller) AllVouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "allVouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT721TokenBank.Contract.AllVouchers(&_TNT721TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT721TokenBank.Contract.AllVouchers(&_TNT721TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCaller) DenomToVoucherLookup(opts *bind.CallOpts, arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "denomToVoucherLookup", arg0)

	outstruct := new(struct {
		ContractAddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT721TokenBank *TNT721TokenBankSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT721TokenBank.Contract.DenomToVoucherLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT721TokenBank.Contract.DenomToVoucherLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankSession) Exists(denom string) (bool, error) {
	return _TNT721TokenBank.Contract.Exists(&_TNT721TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _TNT721TokenBank.Contract.Exists(&_TNT721TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCaller) Exists0(opts *bind.CallOpts, voucherAddress common.Address) (bool, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "exists0", voucherAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT721TokenBank.Contract.Exists0(&_TNT721TokenBank.CallOpts, voucherAddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT721TokenBank.Contract.Exists0(&_TNT721TokenBank.CallOpts, voucherAddress)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetAdjustedValidatorSet(opts *bind.CallOpts, subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getAdjustedValidatorSet", subchainID, dynasty)

	outstruct := new(struct {
		Validators   []common.Address
		ShareAmounts []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Validators = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.ShareAmounts = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT721TokenBank *TNT721TokenBankSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT721TokenBank.Contract.GetAdjustedValidatorSet(&_TNT721TokenBank.CallOpts, subchainID, dynasty)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT721TokenBank.Contract.GetAdjustedValidatorSet(&_TNT721TokenBank.CallOpts, subchainID, dynasty)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetDenom(opts *bind.CallOpts, voucherContractAddr common.Address) (string, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getDenom", voucherContractAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT721TokenBank.Contract.GetDenom(&_TNT721TokenBank.CallOpts, voucherContractAddr)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT721TokenBank.Contract.GetDenom(&_TNT721TokenBank.CallOpts, voucherContractAddr)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetMaxProcessedTokenLockNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getMaxProcessedTokenLockNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetMaxProcessedVoucherBurnNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getMaxProcessedVoucherBurnNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetTokenLockEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getTokenLockEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetTokenLockEventHeight(&_TNT721TokenBank.CallOpts, chainID, eventNonce)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetTokenLockEventHeight(&_TNT721TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetVoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getVoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT721TokenBank.Contract.GetVoucher(&_TNT721TokenBank.CallOpts, denom)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT721TokenBank.Contract.GetVoucher(&_TNT721TokenBank.CallOpts, denom)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetVoucherBurnEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getVoucherBurnEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT721TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT721TokenBank.CallOpts, chainID, eventNonce)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) MainchainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "mainchainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) MainchainID() (*big.Int, error) {
	return _TNT721TokenBank.Contract.MainchainID(&_TNT721TokenBank.CallOpts)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) MainchainID() (*big.Int, error) {
	return _TNT721TokenBank.Contract.MainchainID(&_TNT721TokenBank.CallOpts)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) TokenLockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "tokenLockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenLockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenLockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCaller) TokenLockVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "tokenLockVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.TokenLockVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.TokenLockVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) TokenUnlockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "tokenUnlockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenUnlockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenUnlockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) TotalLockedAmounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "totalLockedAmounts", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TotalLockedAmounts(&_TNT721TokenBank.CallOpts, arg0, arg1, arg2)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TotalLockedAmounts(&_TNT721TokenBank.CallOpts, arg0, arg1, arg2)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherAddressToDenomLookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherAddressToDenomLookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT721TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT721TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherBurnNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherBurnNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherBurnNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherBurnNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherBurnVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherBurnVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.VoucherBurnVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.VoucherBurnVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherMintNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherMintNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherMintNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherMintNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) BurnVouchers(opts *bind.TransactOpts, sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "burnVouchers", sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.BurnVouchers(&_TNT721TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.BurnVouchers(&_TNT721TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT721Contract, address targetChainVoucherReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) LockTokens(opts *bind.TransactOpts, targetChainID *big.Int, sourceChainTNT721Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "lockTokens", targetChainID, sourceChainTNT721Contract, targetChainVoucherReceiver, tokenID)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT721Contract, address targetChainVoucherReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankSession) LockTokens(targetChainID *big.Int, sourceChainTNT721Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.LockTokens(&_TNT721TokenBank.TransactOpts, targetChainID, sourceChainTNT721Contract, targetChainVoucherReceiver, tokenID)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT721Contract, address targetChainVoucherReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) LockTokens(targetChainID *big.Int, sourceChainTNT721Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.LockTokens(&_TNT721TokenBank.TransactOpts, targetChainID, sourceChainTNT721Contract, targetChainVoucherReceiver, tokenID)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x44b7b352.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, address targetChainVoucherReceiver, uint256 tokenID, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) MintVouchers(opts *bind.TransactOpts, denom string, name string, symbol string, targetChainVoucherReceiver common.Address, tokenID *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "mintVouchers", denom, name, symbol, targetChainVoucherReceiver, tokenID, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x44b7b352.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, address targetChainVoucherReceiver, uint256 tokenID, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankSession) MintVouchers(denom string, name string, symbol string, targetChainVoucherReceiver common.Address, tokenID *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.MintVouchers(&_TNT721TokenBank.TransactOpts, denom, name, symbol, targetChainVoucherReceiver, tokenID, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x44b7b352.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, address targetChainVoucherReceiver, uint256 tokenID, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) MintVouchers(denom string, name string, symbol string, targetChainVoucherReceiver common.Address, tokenID *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.MintVouchers(&_TNT721TokenBank.TransactOpts, denom, name, symbol, targetChainVoucherReceiver, tokenID, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) UnlockTokens(opts *bind.TransactOpts, sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "unlockTokens", sourceChainID, denom, targetChainTokenReceiver, tokenID, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.UnlockTokens(&_TNT721TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.UnlockTokens(&_TNT721TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, dynasty, sourceChainVoucherBurnNonce)
}

// TNT721TokenBankTNT721TokenLockedIterator is returned from FilterTNT721TokenLocked and is used to iterate over the raw logs and unpacked data for TNT721TokenLocked events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenLockedIterator struct {
	Event *TNT721TokenBankTNT721TokenLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721TokenLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721TokenLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721TokenLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721TokenLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721TokenLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721TokenLocked represents a TNT721TokenLocked event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenLocked struct {
	Denom                      string
	SourceChainTokenSender     common.Address
	TargetChainID              *big.Int
	TargetChainVoucherReceiver common.Address
	TokenID                    *big.Int
	Name                       string
	Symbol                     string
	TokenURI                   string
	TokenLockNonce             *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT721TokenLocked is a free log retrieval operation binding the contract event 0x4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b.
//
// Solidity: event TNT721TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, string name, string symbol, string tokenURI, uint256 tokenLockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721TokenLocked(opts *bind.FilterOpts) (*TNT721TokenBankTNT721TokenLockedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721TokenLocked")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721TokenLockedIterator{contract: _TNT721TokenBank.contract, event: "TNT721TokenLocked", logs: logs, sub: sub}, nil
}

// WatchTNT721TokenLocked is a free log subscription operation binding the contract event 0x4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b.
//
// Solidity: event TNT721TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, string name, string symbol, string tokenURI, uint256 tokenLockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721TokenLocked(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721TokenLocked) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721TokenLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721TokenLocked)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721TokenLocked is a log parse operation binding the contract event 0x4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b.
//
// Solidity: event TNT721TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, string name, string symbol, string tokenURI, uint256 tokenLockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721TokenLocked(log types.Log) (*TNT721TokenBankTNT721TokenLocked, error) {
	event := new(TNT721TokenBankTNT721TokenLocked)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT721TokenBankTNT721TokenUnlockedIterator is returned from FilterTNT721TokenUnlocked and is used to iterate over the raw logs and unpacked data for TNT721TokenUnlocked events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenUnlockedIterator struct {
	Event *TNT721TokenBankTNT721TokenUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721TokenUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721TokenUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721TokenUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721TokenUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721TokenUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721TokenUnlocked represents a TNT721TokenUnlocked event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenUnlocked struct {
	Denom                       string
	TargetChainTokenReceiver    common.Address
	TokenID                     *big.Int
	SourceChainVoucherBurnNonce *big.Int
	TokenUnlockNonce            *big.Int
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterTNT721TokenUnlocked is a free log retrieval operation binding the contract event 0xf8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd.
//
// Solidity: event TNT721TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721TokenUnlocked(opts *bind.FilterOpts) (*TNT721TokenBankTNT721TokenUnlockedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721TokenUnlockedIterator{contract: _TNT721TokenBank.contract, event: "TNT721TokenUnlocked", logs: logs, sub: sub}, nil
}

// WatchTNT721TokenUnlocked is a free log subscription operation binding the contract event 0xf8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd.
//
// Solidity: event TNT721TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721TokenUnlocked(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721TokenUnlocked) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721TokenUnlocked)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721TokenUnlocked is a log parse operation binding the contract event 0xf8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd.
//
// Solidity: event TNT721TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721TokenUnlocked(log types.Log) (*TNT721TokenBankTNT721TokenUnlocked, error) {
	event := new(TNT721TokenBankTNT721TokenUnlocked)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT721TokenBankTNT721VoucherBurnedIterator is returned from FilterTNT721VoucherBurned and is used to iterate over the raw logs and unpacked data for TNT721VoucherBurned events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherBurnedIterator struct {
	Event *TNT721TokenBankTNT721VoucherBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721VoucherBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721VoucherBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721VoucherBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721VoucherBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721VoucherBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721VoucherBurned represents a TNT721VoucherBurned event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherBurned struct {
	Denom                    string
	SourceChainVoucherOwner  common.Address
	TargetChainTokenReceiver common.Address
	TokenID                  *big.Int
	VoucherBurnNonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTNT721VoucherBurned is a free log retrieval operation binding the contract event 0xb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e.
//
// Solidity: event TNT721VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 voucherBurnNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721VoucherBurned(opts *bind.FilterOpts) (*TNT721TokenBankTNT721VoucherBurnedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721VoucherBurned")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721VoucherBurnedIterator{contract: _TNT721TokenBank.contract, event: "TNT721VoucherBurned", logs: logs, sub: sub}, nil
}

// WatchTNT721VoucherBurned is a free log subscription operation binding the contract event 0xb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e.
//
// Solidity: event TNT721VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 voucherBurnNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721VoucherBurned(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721VoucherBurned) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721VoucherBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721VoucherBurned)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721VoucherBurned is a log parse operation binding the contract event 0xb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e.
//
// Solidity: event TNT721VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 voucherBurnNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721VoucherBurned(log types.Log) (*TNT721TokenBankTNT721VoucherBurned, error) {
	event := new(TNT721TokenBankTNT721VoucherBurned)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT721TokenBankTNT721VoucherMintedIterator is returned from FilterTNT721VoucherMinted and is used to iterate over the raw logs and unpacked data for TNT721VoucherMinted events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherMintedIterator struct {
	Event *TNT721TokenBankTNT721VoucherMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721VoucherMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721VoucherMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721VoucherMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721VoucherMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721VoucherMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721VoucherMinted represents a TNT721VoucherMinted event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherMinted struct {
	Denom                      string
	TargetChainVoucherReceiver common.Address
	VoucherContract            common.Address
	TokenID                    *big.Int
	SourceChainTokenLockNonce  *big.Int
	VoucherMintNonce           *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT721VoucherMinted is a free log retrieval operation binding the contract event 0x9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91.
//
// Solidity: event TNT721VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721VoucherMinted(opts *bind.FilterOpts) (*TNT721TokenBankTNT721VoucherMintedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721VoucherMinted")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721VoucherMintedIterator{contract: _TNT721TokenBank.contract, event: "TNT721VoucherMinted", logs: logs, sub: sub}, nil
}

// WatchTNT721VoucherMinted is a free log subscription operation binding the contract event 0x9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91.
//
// Solidity: event TNT721VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721VoucherMinted(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721VoucherMinted) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721VoucherMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721VoucherMinted)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721VoucherMinted is a log parse operation binding the contract event 0x9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91.
//
// Solidity: event TNT721VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721VoucherMinted(log types.Log) (*TNT721TokenBankTNT721VoucherMinted, error) {
	event := new(TNT721TokenBankTNT721VoucherMinted)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
