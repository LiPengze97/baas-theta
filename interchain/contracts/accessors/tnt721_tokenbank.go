// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TNT721TokenBankMetaData contains all meta data concerning the TNT721TokenBank contract.
var TNT721TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mainchainID_\",\"type\":\"uint256\"},{\"internalType\":\"contractChainRegistrar\",\"name\":\"chainRegistrar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainTokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenUnlockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainVoucherOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721VoucherBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voucherContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherMintNonce\",\"type\":\"uint256\"}],\"name\":\"TNT721VoucherMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDenoms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVouchers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomToVoucherLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherAddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherContractAddr\",\"type\":\"address\"}],\"name\":\"getDenom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedTokenLockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedVoucherBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getVoucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenLockVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUnlockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalLockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucherAddressToDenomLookup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherBurnNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherBurnVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherMintNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceChainTNT721Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"mintVouchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceChainVoucherContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burnVouchers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200522038038062005220833981016040819052620000349162000064565b6001600081905591909155600280546001600160a01b0319166001600160a01b03909216919091179055620000a3565b600080604083850312156200007857600080fd5b825160208401519092506001600160a01b03811681146200009857600080fd5b809150509250929050565b61516d80620000b36000396000f3fe6080604052600436106200014f5760003560e01c80638883931e11620000b9578063ca2075691162000078578063ca207569146200048c578063ccf187c714620004bd578063ebda996214620004ee578063f6a3d24e1462000513578063f95627ac1462000553578063feaff052146200058457600080fd5b80638883931e14620003c65780639c67257d14620003f7578063a0df5cc51462000439578063a2cc69811462000450578063bff4c41a146200047557600080fd5b806344b7b352116200011257806344b7b35214620002bd578063588b140814620002e457806360569b5e1462000318578063740cb7f8146200034d578063766f8fb0146200037e5780637ff75b4614620003af57600080fd5b8063073b950214620001545780631527b14d146200017f5780631eb7873714620001f0578063261a323e146200024957806327ca4df1146200027f575b600080fd5b3480156200016157600080fd5b506200016c60015481565b6040519081526020015b60405180910390f35b3480156200018c57600080fd5b50620001d06200019e36600462002c7e565b8051602081830181018051600b825292820191909301209152546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b03909316835290151560208301520162000176565b348015620001fd57600080fd5b50620002336200020f36600462002eb2565b60096020908152600092835260408084209091529082529020805460029091015482565b6040805192835260208301919091520162000176565b3480156200025657600080fd5b506200026e6200026836600462002c7e565b620005c7565b604051901515815260200162000176565b3480156200028c57600080fd5b50620002a46200029e36600462002e21565b6200060b565b6040516001600160a01b03909116815260200162000176565b348015620002ca57600080fd5b50620002e2620002dc36600462002d37565b62000636565b005b348015620002f157600080fd5b50620003096200030336600462002e21565b62000945565b604051620001769190620031c1565b3480156200032557600080fd5b506200033d6200033736600462002afa565b620009fa565b60405162000176929190620033e1565b3480156200035a57600080fd5b506200016c6200036c36600462002e21565b60066020526000908152604090205481565b3480156200038b57600080fd5b506200016c6200039d36600462002e21565b60009081526008602052604090205490565b620002e2620003c036600462002ed5565b62000aa9565b348015620003d357600080fd5b506200016c620003e536600462002e21565b60036020526000908152604090205481565b3480156200040457600080fd5b506200016c6200041636600462002e88565b600f60209081526000938452604080852082529284528284209052825290205481565b620002e26200044a36600462002b3a565b62000d6e565b3480156200045d57600080fd5b50620002a46200046f36600462002c7e565b6200103d565b620002e26200048636600462002e3b565b620010b3565b3480156200049957600080fd5b506200016c620004ab36600462002e21565b60056020526000908152604090205481565b348015620004ca57600080fd5b506200016c620004dc36600462002e21565b60046020526000908152604090205481565b348015620004fb57600080fd5b50620003096200050d36600462002afa565b6200158a565b3480156200052057600080fd5b506200026e6200053236600462002afa565b6001600160a01b03166000908152600c602052604090206001015460ff1690565b3480156200056057600080fd5b506200016c6200057236600462002e21565b60009081526007602052604090205490565b3480156200059157600080fd5b5062000233620005a336600462002eb2565b600a6020908152600092835260408084209091529082529020805460029091015482565b600080620005d5836200168a565b9050600b81604051620005e9919062002f7e565b9081526040519081900360200190205460ff600160a01b909104169392505050565b600d81815481106200061c57600080fd5b6000918252602090912001546001600160a01b0316905081565b60026000541415620006655760405162461bcd60e51b81526004016200065c9062003407565b60405180910390fd5b6002600090815562000677896200168a565b905060008062000687836200169d565b9150915080620006e65760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f206578747261637420636861696e49442066726f6d2064604482015263656e6f6d60e01b60648201526084016200065c565b600082848c8c8c8c8c8c8c6040516020016200070b9998979695949392919062003055565b60405160208183030381529060405280519060200120905060006200073484888489336200172e565b90508015620009315760405163130d191f60e11b8152309063261a323e9062000762908890600401620031c1565b60206040518083038186803b1580156200077b57600080fd5b505afa15801562000790573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007b6919062002c5a565b620007d357620007d385620007cd878f8f6200174d565b620017ec565b60405163a2cc698160e01b8152600090309063a2cc698190620007fb908990600401620031c1565b60206040518083038186803b1580156200081457600080fd5b505afa15801562000829573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200084f919062002b1a565b90506001600160a01b038116620008ba5760405162461bcd60e51b815260206004820152602860248201527f74686520766f756368657220666f72207468652064656e6f6d20646f6573206e6044820152671bdd08195e1a5cdd60c21b60648201526084016200065c565b620008c8818c8c8c62001a16565b620008d38562001a85565b6000600660008781526020019081526020016000205490507f9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91878d848e8c86604051620009269695949392919062003218565b60405180910390a150505b505060016000555050505050505050505050565b600e81815481106200095657600080fd5b906000526020600020016000915090508054620009739062003654565b80601f0160208091040260200160405190810160405280929190818152602001828054620009a19062003654565b8015620009f25780601f10620009c657610100808354040283529160200191620009f2565b820191906000526020600020905b815481529060010190602001808311620009d457829003601f168201915b505050505081565b600c6020526000908152604090208054819062000a179062003654565b80601f016020809104026020016040519081016040528092919081815260200182805462000a459062003654565b801562000a965780601f1062000a6a5761010080835404028352916020019162000a96565b820191906000526020600020905b81548152906001019060200180831162000a7857829003601f168201915b5050506001909301549192505060ff1682565b6002600054141562000acf5760405162461bcd60e51b81526004016200065c9062003407565b6002600090815562000ae1866200168a565b905060008062000af18362001aae565b915091508062000b5a5760405162461bcd60e51b815260206004820152602d60248201527f4661696c656420746f206578747261637420636f6e747261637420616464726560448201526c73732066726f6d2064656e6f6d60981b60648201526084016200065c565b6000898152600f602090815260408083206001600160a01b0386168452825280832089845290915290205460011462000be25760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f7420756e6c6f636b207468652072657175657374656420746f6b656044820152621b925160ea1b60648201526084016200065c565b60008984888a898960405160200162000c0196959493929190620030f2565b604051602081830303815290604052805190602001209050600062000c2a8b8884893362001b2f565b9050801562000d5c5760008b8152600f602090815260408083206001600160a01b038816845282528083208b845290915290205462000c6b90600162001b44565b60008c8152600f602090815260408083206001600160a01b038981168086529184528285208e8652909352928190209390935591516323b872dd60e01b8152306004820152918b166024830152604482018a9052906323b872dd90606401600060405180830381600087803b15801562000ce457600080fd5b505af115801562000cf9573d6000803e3d6000fd5b5050505062000d088b62001b59565b60008b815260046020526040908190205490517ff8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd9062000d529088908d908d908c9087906200339f565b60405180910390a1505b50506001600055505050505050505050565b6002600054141562000d945760405162461bcd60e51b81526004016200065c9062003407565b600260009081556040516375ed4cb160e11b81526001600160a01b0385166004820152309063ebda99629060240160006040518083038186803b15801562000ddb57600080fd5b505afa15801562000df0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000e1a919081019062002cb7565b905080516000141562000e885760405162461bcd60e51b815260206004820152602f60248201527f6661696c656420746f206c6f6f6b75702064656e6f6d20666f7220746865207660448201526e1bdd58da195c8818dbdb9d1c9858dd608a1b60648201526084016200065c565b60405163130d191f60e11b8152309063261a323e9062000ead908490600401620031c1565b60206040518083038186803b15801562000ec657600080fd5b505afa15801562000edb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f01919062002c5a565b62000f4f5760405162461bcd60e51b815260206004820152601f60248201527f566f756368657220636f6e747261637420646f6573206e6f742065786973740060448201526064016200065c565b3362000f5d85828562001b7a565b60008062000f6b846200169d565b915091508062000fd15760405162461bcd60e51b815260206004820152602a60248201527f4661696c656420746f206578747261637420746172676574436861696e49442060448201526966726f6d2064656e6f6d60b01b60648201526084016200065c565b62000fdc8262001be7565b600082815260056020526040908190205490517fb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e906200102690879087908b908b908790620031d6565b60405180910390a150506001600055505050505050565b6000806200104b836200168a565b90506000600b8260405162001061919062002f7e565b908152604080516020928190038301812081830190925290546001600160a01b0381168252600160a01b900460ff16158015928201929092529150620010a957519392505050565b5060009392505050565b60026000541415620010d95760405162461bcd60e51b81526004016200065c9062003407565b60026000556001548414806200116c57506002546040516343b71f0560e01b8152600481018690526001600160a01b03909116906343b71f0590602401602060405180830381600087803b1580156200113157600080fd5b505af115801562001146573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200116c919062002c5a565b620011ba5760405162461bcd60e51b815260206004820152601960248201527f6e6f7420612076616c696420746172676574436861696e49440000000000000060448201526064016200065c565b6040516323b872dd60e01b81523360048201523060248201526044810182905283906001600160a01b038216906323b872dd90606401600060405180830381600087803b1580156200120b57600080fd5b505af115801562001220573d6000803e3d6000fd5b50505050600062001263466040518060400160405280600381526020016237323160e81b8152506200125d886001600160a01b0316601462001c08565b62001dc2565b6000878152600f602090815260408083206001600160a01b038a168452825280832087845290915290205490915015620012ec5760405162461bcd60e51b8152602060048201526024808201527f7468697320746f6b656e49442068617320616c7265616479206265656e206c6f60448201526318dad95960e21b60648201526084016200065c565b6000868152600f602090815260408083206001600160a01b038916845282528083208684529091529020546200132490600162001e06565b6000878152600f602090815260408083206001600160a01b038a16845282528083208784529091529020556200135a8662001e14565b600086815260036020526040902054620013748662001e35565b1562001538577f4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b8233898888886001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015620013da57600080fd5b505afa158015620013ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001419919081019062002cb7565b896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200145357600080fd5b505afa15801562001468573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001492919081019062002cb7565b60405163c87b56dd60e01b8152600481018d90526001600160a01b038c169063c87b56dd9060240160006040518083038186803b158015620014d357600080fd5b505afa158015620014e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001512919081019062002cb7565b896040516200152a9998979695949392919062003262565b60405180910390a16200157c565b7f4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b8233898888866040516200157396959493929190620032f7565b60405180910390a15b505060016000555050505050565b6001600160a01b0381166000908152600c60205260408082208151808301909252805460609392919082908290620015c29062003654565b80601f0160208091040260200160405190810160405280929190818152602001828054620015f09062003654565b8015620016415780601f10620016155761010080835404028352916020019162001641565b820191906000526020600020905b8154815290600101906020018083116200162357829003601f168201915b50505091835250506001919091015460ff161515602091820152810151909150156200166e575192915050565b5050604080516020810190915260008152919050565b50919050565b6060620016978262001e78565b92915050565b600080600080620016b585602f60f81b600162001efe565b9150915080620016cc575060009485945092505050565b600080620016dd8760008662001f9a565b9150915080620016f65750600096879650945050505050565b6000806200170484620020bd565b91509150806200171f57506000988998509650505050505050565b50976001975095505050505050565b600062001743868686868660076009620021a5565b9695505050505050565b60008030905060008460405160200162001768919062002f9c565b60405160208183030381529060405290506000846040516020016200178e91906200302a565b6040516020818303038152906040529050600083888484604051620017b3906200296e565b620017c2949392919062003148565b604051809103906000f080158015620017df573d6000803e3d6000fd5b5098975050505050505050565b6000620017f9836200168a565b60405163130d191f60e11b8152909150309063261a323e9062001821908490600401620031c1565b60206040518083038186803b1580156200183a57600080fd5b505afa1580156200184f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001875919062002c5a565b15620018cf5760405162461bcd60e51b815260206004820152602260248201527f616e20766f756368657220636f6e747261637420616c72656164792065786973604482015261747360f01b60648201526084016200065c565b6040805180820182526001600160a01b0384168152600160208201529051600b90620018fd90849062002f7e565b90815260408051918290036020908101832084518154958301511515600160a01b026001600160a81b03199096166001600160a01b039182161795909517905582820182528483526001838201529285166000908152600c84522081518051929391926200196f92849201906200297c565b506020918201516001918201805460ff1916911515919091179055600d80548083019091557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b038616179055600e80549182018155600052825162001a10927fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd909201918401906200297c565b50505050565b6040516334ff261960e21b815284906001600160a01b0382169063d3fc98649062001a4a9087908790879060040162003198565b600060405180830381600087803b15801562001a6557600080fd5b505af115801562001a7a573d6000803e3d6000fd5b505050505050505050565b600081815260066020526040812080546001929062001aa6908490620034f2565b909155505050565b60008060008062001ac685602f60f81b600262001efe565b915091508062001add575060009485945092505050565b60008062001afa8762001af2866001620034f2565b895162001f9a565b915091508062001b135750600096879650945050505050565b600062001b2083620025dc565b98600198509650505050505050565b60006200174386868686866008600a620021a5565b600062001b528284620035cb565b9392505050565b600081815260046020526040812080546001929062001aa6908490620034f2565b604051632770a7eb60e21b81526001600160a01b03838116600483015260248201839052849190821690639dc29fac90604401600060405180830381600087803b15801562001bc857600080fd5b505af115801562001bdd573d6000803e3d6000fd5b5050505050505050565b600081815260056020526040812080546001929062001aa6908490620034f2565b6060600062001c198360026200357e565b62001c26906002620034f2565b67ffffffffffffffff81111562001c415762001c4162003702565b6040519080825280601f01601f19166020018201604052801562001c6c576020820181803683370190505b509050600360fc1b8160008151811062001c8a5762001c8a620036ec565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062001cbc5762001cbc620036ec565b60200101906001600160f81b031916908160001a905350600062001ce28460026200357e565b62001cef906001620034f2565b90505b600181111562001d71576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001d275762001d27620036ec565b1a60f81b82828151811062001d405762001d40620036ec565b60200101906001600160f81b031916908160001a90535060049490941c9362001d69816200363a565b905062001cf2565b50831562001b525760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200065c565b606062001dfe62001dd385620027f7565b848460405160200162001de99392919062002fca565b6040516020818303038152906040526200168a565b949350505050565b600062001b528284620034f2565b600081815260036020526040812080546001929062001aa6908490620034f2565b6040805160048152602481019091526020810180516001600160e01b03166306fdde0360e01b178152815160009283929091839182919082885af1949350505050565b60608160005b815181101562001ef75762001eb682828151811062001ea15762001ea1620036ec565b01602001516001600160f81b0319166200290d565b82828151811062001ecb5762001ecb620036ec565b60200101906001600160f81b031916908160001a9053508062001eee816200368b565b91505062001e7e565b5092915050565b82516000908190859082805b8281101562001f8657876001600160f81b03191684828151811062001f335762001f33620036ec565b01602001516001600160f81b031916141562001f715762001f56600183620034f2565b91508682141562001f715794506001935062001f9292505050565b8062001f7d816200368b565b91505062001f0a565b50600080945094505050505b935093915050565b82516060906000908484101562001fc65750506040805160208101909152600080825290915062001f92565b8084111562001fea5750506040805160208101909152600080825290915062001f92565b85600062001ff9868862001b44565b67ffffffffffffffff81111562002014576200201462003702565b6040519080825280601f01601f1916602001820160405280156200203f576020820181803683370190505b509050865b868110156200171f57828181518110620020625762002062620036ec565b01602001516001600160f81b031916826200207e838b62001b44565b81518110620020915762002091620036ec565b60200101906001600160f81b031916908160001a90535080620020b4816200368b565b91505062002044565b80516000908190839082805b8281101562002198576030848281518110620020e957620020e9620036ec565b016020015160f81c108015906200211d57506039848281518110620021125762002112620036ec565b016020015160f81c11155b1562002174576200213082600a62002960565b91506200216c60308583815181106200214d576200214d620036ec565b016020015162002161919060f81c620035e5565b839060ff1662001e06565b915062002183565b50600096879650945050505050565b806200218f816200368b565b915050620020c9565b5095600195509350505050565b60006001548814806200223557506002546040516343b71f0560e01b8152600481018a90526001600160a01b03909116906343b71f0590602401602060405180830381600087803b158015620021fa57600080fd5b505af11580156200220f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002235919062002c5a565b620022755760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b60448201526064016200065c565b60008881526020849052604090205462002291906001620034f2565b8514620022a157506000620025d1565b600088815260208381526040808320898452909152812060015460609081908c90811415620022cd5750465b6002546040516343f27e4560e01b815260048101839052602481018e90526001600160a01b03909116906343f27e4590604401600060405180830381600087803b1580156200231b57600080fd5b505af115801562002330573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200235a919081019062002b80565b9350915060005b8251811015620024ce57896001600160a01b03168382815181106200238a576200238a620036ec565b60200260200101516001600160a01b031614620023a757620024b9565b6001955060005b60018601548110156200245157856001018181548110620023d357620023d3620036ec565b6000918252602090912001546001600160a01b038c8116911614156200243c5760405162461bcd60e51b815260206004820152601c60248201527f546869732076616c696461746f7220616c726561647920766f7465640000000060448201526064016200065c565b8062002448816200368b565b915050620023ae565b508c85556001808601805491820181556000908152602090200180546001600160a01b031916331790558351620024b390859083908110620024975762002497620036ec565b6020026020010151866002015462001e0690919063ffffffff16565b60028601555b80620024c5816200368b565b91505062002361565b50505082620025125760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b60448201526064016200065c565b6000805b8251811015620025685762002551838281518110620025395762002539620036ec565b60200260200101518362001e0690919063ffffffff16565b9150806200255f816200368b565b91505062002516565b506200257681600262002960565b60028401546200258890600362002960565b10620025c85760008c815260208890526040902054620025aa906001620034f2565b60008d8152602089905260409020555060019350620025d192505050565b60009450505050505b979650505050505050565b60008181808060025b602a811015620027ec57620025fd610100856200354c565b9350848181518110620026145762002614620036ec565b016020015160f81c9250846200262c826001620034f2565b815181106200263f576200263f620036ec565b016020015160f81c915060616001600160a01b038416108015906200266e57506066836001600160a01b031611155b15620026895762002681605784620035a0565b9250620026fc565b6041836001600160a01b031610158015620026ae57506046836001600160a01b031611155b15620026c15762002681603784620035a0565b6030836001600160a01b031610158015620026e657506039836001600160a01b031611155b15620026fc57620026f9603084620035a0565b92505b6061826001600160a01b0316101580156200272157506066826001600160a01b031611155b156200273c5762002734605783620035a0565b9150620027af565b6041826001600160a01b0316101580156200276157506046826001600160a01b031611155b15620027745762002734603783620035a0565b6030826001600160a01b0316101580156200279957506039826001600160a01b031611155b15620027af57620027ac603083620035a0565b91505b81620027bd8460106200354c565b620027c99190620034c4565b620027d59085620034c4565b9350620027e4600282620034f2565b9050620025e5565b509195945050505050565b6060816200281c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200284c578062002833816200368b565b9150620028449050600a8362003535565b915062002820565b60008167ffffffffffffffff8111156200286a576200286a62003702565b6040519080825280601f01601f19166020018201604052801562002895576020820181803683370190505b5090505b841562001dfe57620028ad600183620035cb565b9150620028bc600a86620036a9565b620028c9906030620034f2565b60f81b818381518110620028e157620028e1620036ec565b60200101906001600160f81b031916908160001a90535062002905600a8662003535565b945062002899565b6000604160f81b6001600160f81b03198316108015906200293c5750602d60f91b6001600160f81b0319831611155b156200295c576200295360f883901c60206200350d565b60f81b92915050565b5090565b600062001b5282846200357e565b611a06806200373283390190565b8280546200298a9062003654565b90600052602060002090601f016020900481019282620029ae5760008555620029f9565b82601f10620029c957805160ff1916838001178555620029f9565b82800160010185558215620029f9579182015b82811115620029f9578251825591602001919060010190620029dc565b506200295c9291505b808211156200295c576000815560010162002a02565b803562002a258162003718565b919050565b600082601f83011262002a3c57600080fd5b8151602062002a5562002a4f8362003472565b6200343e565b80838252828201915082860187848660051b890101111562002a7657600080fd5b60005b8581101562002a975781518452928401929084019060010162002a79565b5090979650505050505050565b600082601f83011262002ab657600080fd5b813562002ac762002a4f8262003499565b81815284602083860101111562002add57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121562002b0d57600080fd5b813562001b528162003718565b60006020828403121562002b2d57600080fd5b815162001b528162003718565b60008060006060848603121562002b5057600080fd5b833562002b5d8162003718565b9250602084013562002b6f8162003718565b929592945050506040919091013590565b6000806040838503121562002b9457600080fd5b825167ffffffffffffffff8082111562002bad57600080fd5b818501915085601f83011262002bc257600080fd5b8151602062002bd562002a4f8362003472565b8083825282820191508286018a848660051b890101111562002bf657600080fd5b600096505b8487101562002c2657805162002c118162003718565b83526001969096019591830191830162002bfb565b509188015191965090935050508082111562002c4157600080fd5b5062002c508582860162002a2a565b9150509250929050565b60006020828403121562002c6d57600080fd5b8151801515811462001b5257600080fd5b60006020828403121562002c9157600080fd5b813567ffffffffffffffff81111562002ca957600080fd5b62001dfe8482850162002aa4565b60006020828403121562002cca57600080fd5b815167ffffffffffffffff81111562002ce257600080fd5b8201601f8101841362002cf457600080fd5b805162002d0562002a4f8262003499565b81815285602083850101111562002d1b57600080fd5b62002d2e8260208301602086016200360b565b95945050505050565b600080600080600080600080610100898b03121562002d5557600080fd5b883567ffffffffffffffff8082111562002d6e57600080fd5b62002d7c8c838d0162002aa4565b995060208b013591508082111562002d9357600080fd5b62002da18c838d0162002aa4565b985060408b013591508082111562002db857600080fd5b62002dc68c838d0162002aa4565b975062002dd660608c0162002a18565b965060808b0135955060a08b013591508082111562002df457600080fd5b5062002e038b828c0162002aa4565b93505060c0890135915060e089013590509295985092959890939650565b60006020828403121562002e3457600080fd5b5035919050565b6000806000806080858703121562002e5257600080fd5b84359350602085013562002e668162003718565b9250604085013562002e788162003718565b9396929550929360600135925050565b60008060006060848603121562002e9e57600080fd5b83359250602084013562002b6f8162003718565b6000806040838503121562002ec657600080fd5b50508035926020909101359150565b60008060008060008060c0878903121562002eef57600080fd5b86359550602087013567ffffffffffffffff81111562002f0e57600080fd5b62002f1c89828a0162002aa4565b955050604087013562002f2f8162003718565b959894975094956060810135955060808101359460a0909101359350915050565b6000815180845262002f6a8160208601602086016200360b565b601f01601f19169290920160200192915050565b6000825162002f928184602087016200360b565b9190910192915050565b6000825162002fb08184602087016200360b565b67102b37bab1b432b960c11b920191825250600801919050565b6000845162002fde8184602089016200360b565b8083019050602f60f81b808252855162003000816001850160208a016200360b565b600192019182015283516200301d8160028401602088016200360b565b0160020195945050505050565b603b60f91b815260008251620030488160018501602087016200360b565b9190910160010192915050565b898152600060208a516200306f81838601848f016200360b565b8a51908401906200308681848401858f016200360b565b8a519101906200309c81848401858e016200360b565b8082019150506bffffffffffffffffffffffff198960601b16828201528760348201528651620030d38160548401858b016200360b565b0160548101959095525050506074820152609401979650505050505050565b868152600086516200310c816020850160208b016200360b565b602092019182019590955260609390931b6bffffffffffffffffffffffff19166040840152605483019190915260748201526094019392505050565b6001600160a01b03851681526080602082018190526000906200316e9083018662002f50565b828103604084015262003182818662002f50565b90508281036060840152620025d1818562002f50565b60018060a01b038416815282602082015260606040820152600062002d2e606083018462002f50565b60208152600062001b52602083018462002f50565b60a081526000620031eb60a083018862002f50565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b60c0815260006200322d60c083018962002f50565b6001600160a01b0397881660208401529590961660408201526060810193909352608083019190915260a09091015292915050565b6000610120808352620032788184018d62002f50565b6001600160a01b038c81166020860152604085018c90528a1660608501526080840189905283810360a08501529050620032b3818862002f50565b905082810360c0840152620032c9818762002f50565b905082810360e0840152620032df818662002f50565b915050826101008301529a9950505050505050505050565b60006101208083526200330d8184018a62002f50565b6001600160a01b03898116602086015260408501899052871660608501526080840186905283810360a085015290506200335a816006815265544e5437323160d01b602082015260400190565b83810360c08501526006815265544e5437323160d01b602082015290506040810183810360e08501526000815261010090930193909352506020019695505050505050565b60a081526000620033b460a083018862002f50565b6001600160a01b039690961660208301525060408101939093526060830191909152608090910152919050565b604081526000620033f6604083018562002f50565b905082151560208301529392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156200346a576200346a62003702565b604052919050565b600067ffffffffffffffff8211156200348f576200348f62003702565b5060051b60200190565b600067ffffffffffffffff821115620034b657620034b662003702565b50601f01601f191660200190565b60006001600160a01b03828116848216808303821115620034e957620034e9620036c0565b01949350505050565b60008219821115620035085762003508620036c0565b500190565b600060ff821660ff84168060ff038211156200352d576200352d620036c0565b019392505050565b600082620035475762003547620036d6565b500490565b60006001600160a01b0382811684821681151582840482111615620035755762003575620036c0565b02949350505050565b60008160001904831182151516156200359b576200359b620036c0565b500290565b60006001600160a01b0383811690831681811015620035c357620035c3620036c0565b039392505050565b600082821015620035e057620035e0620036c0565b500390565b600060ff821660ff841680821015620036025762003602620036c0565b90039392505050565b60005b83811015620036285781810151838201526020016200360e565b8381111562001a105750506000910152565b6000816200364c576200364c620036c0565b506000190190565b600181811c908216806200366957607f821691505b602082108114156200168457634e487b7160e01b600052602260045260246000fd5b6000600019821415620036a257620036a2620036c0565b5060010190565b600082620036bb57620036bb620036d6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200372e57600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001a0638038062001a0683398101604081905262000034916200020c565b83828281600090805190602001906200004f929190620000af565b50805162000065906001906020840190620000af565b5050600680546001600160a01b0319166001600160a01b0393909316929092179091555082516200009e906007906020860190620000af565b505060006008555062000311915050565b828054620000bd90620002be565b90600052602060002090601f016020900481019282620000e157600085556200012c565b82601f10620000fc57805160ff19168380011785556200012c565b828001600101855582156200012c579182015b828111156200012c5782518255916020019190600101906200010f565b506200013a9291506200013e565b5090565b5b808211156200013a57600081556001016200013f565b600082601f8301126200016757600080fd5b81516001600160401b0380821115620001845762000184620002fb565b604051601f8301601f19908116603f01168101908282118183101715620001af57620001af620002fb565b81604052838152602092508683858801011115620001cc57600080fd5b600091505b83821015620001f05785820183015181830184015290820190620001d1565b83821115620002025760008385830101525b9695505050505050565b600080600080608085870312156200022357600080fd5b84516001600160a01b03811681146200023b57600080fd5b60208601519094506001600160401b03808211156200025957600080fd5b620002678883890162000155565b945060408701519150808211156200027e57600080fd5b6200028c8883890162000155565b93506060870151915080821115620002a357600080fd5b50620002b28782880162000155565b91505092959194509250565b600181811c90821680620002d357607f821691505b60208210811415620002f557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6116e580620003216000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063880cdc31116100ad578063b88d4fde11610071578063b88d4fde14610271578063c370b04214610284578063c87b56dd1461028c578063d3fc98641461029f578063e985e9c5146102b257600080fd5b8063880cdc311461021d5780638da5cb5b1461023057806395d89b41146102435780639dc29fac1461024b578063a22cb4651461025e57600080fd5b806323b872dd116100f457806323b872dd146101c057806342842e0e146101d3578063442890d5146101e65780636352211e146101f757806370a082311461020a57600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f36600461143c565b6102ee565b60405190151581526020015b60405180910390f35b610161610340565b6040516101509190611519565b61018161017c366004611476565b6103d2565b6040516001600160a01b039091168152602001610150565b6101ac6101a73660046113a7565b6103f9565b005b6008545b604051908152602001610150565b6101ac6101ce3660046112b3565b610514565b6101ac6101e13660046112b3565b610545565b6006546001600160a01b0316610181565b610181610205366004611476565b610560565b6101b261021836600461125e565b6105c0565b6101ac61022b36600461125e565b610646565b600654610181906001600160a01b031681565b6101616106d9565b6101ac6102593660046113a7565b6106e8565b6101ac61026c36600461136b565b61086c565b6101ac61027f3660046112ef565b61087b565b6101616108b3565b61016161029a366004611476565b6108c2565b6101ac6102ad3660046113d1565b610964565b6101446102c0366004611280565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061031f57506001600160e01b03198216635b5e139f60e01b145b8061033a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461034f90611632565b80601f016020809104026020016040519081016040528092919081815260200182805461037b90611632565b80156103c85780601f1061039d576101008083540402835291602001916103c8565b820191906000526020600020905b8154815290600101906020018083116103ab57829003601f168201915b5050505050905090565b60006103dd826109d5565b506000908152600460205260409020546001600160a01b031690565b600061040482610560565b9050806001600160a01b0316836001600160a01b031614156104775760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610493575061049381336102c0565b6105055760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161046e565b61050f8383610a37565b505050565b61051e3382610aa5565b61053a5760405162461bcd60e51b815260040161046e906115b5565b61050f838383610b24565b61050f8383836040518060200160405280600081525061087b565b6000818152600260205260408120546001600160a01b03168061033a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161046e565b60006001600160a01b03821661062a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161046e565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146106705760405162461bcd60e51b815260040161046e9061157e565b600654604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600680546001600160a01b0319166001600160a01b0392909216919091179055565b60606001805461034f90611632565b6006546001600160a01b031633146107125760405162461bcd60e51b815260040161046e9061157e565b6000600854116107575760405162461bcd60e51b815260206004820152601060248201526f3737903a37b5b2b7103a3790313ab93760811b604482015260640161046e565b600061076282610560565b9050826001600160a01b0316816001600160a01b0316146107bb5760405162461bcd60e51b815260206004820152601360248201527237b7363c9037bbb732b91031b0b710313ab93760691b604482015260640161046e565b6006546001600160a01b03166107d18184610aa5565b61082e5760405162461bcd60e51b815260206004820152602860248201527f566f7563686572206f776e657220646964206e6f7420617070726f766520746f60448201526735b2b710313ab93760c11b606482015260840161046e565b61083783610cc0565b600083815260096020526040812061084e916110f9565b600160086000828254610861919061161b565b909155505050505050565b610877338383610d5b565b5050565b6108853383610aa5565b6108a15760405162461bcd60e51b815260040161046e906115b5565b6108ad84848484610e2a565b50505050565b60606007805461034f90611632565b60008181526009602052604090208054606091906108df90611632565b80601f016020809104026020016040519081016040528092919081815260200182805461090b90611632565b80156109585780601f1061092d57610100808354040283529160200191610958565b820191906000526020600020905b81548152906001019060200180831161093b57829003601f168201915b50505050509050919050565b6006546001600160a01b0316331461098e5760405162461bcd60e51b815260040161046e9061157e565b6109988383610e5d565b600082815260096020908152604090912082516109b792840190611133565b506001600860008282546109cb9190611603565b9091555050505050565b6000818152600260205260409020546001600160a01b0316610a345760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161046e565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a6c82610560565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ab183610560565b9050806001600160a01b0316846001600160a01b03161480610af857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610b1c5750836001600160a01b0316610b11846103d2565b6001600160a01b0316145b949350505050565b826001600160a01b0316610b3782610560565b6001600160a01b031614610b9b5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161046e565b6001600160a01b038216610bfd5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161046e565b610c08600082610a37565b6001600160a01b0383166000908152600360205260408120805460019290610c3190849061161b565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c5f908490611603565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610ccb82610560565b9050610cd8600083610a37565b6001600160a01b0381166000908152600360205260408120805460019290610d0190849061161b565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b03161415610dbd5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161046e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e35848484610b24565b610e4184848484610e77565b6108ad5760405162461bcd60e51b815260040161046e9061152c565b610877828260405180602001604052806000815250610f84565b60006001600160a01b0384163b15610f7957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610ebb9033908990889088906004016114dc565b602060405180830381600087803b158015610ed557600080fd5b505af1925050508015610f05575060408051601f3d908101601f19168201909252610f0291810190611459565b60015b610f5f573d808015610f33576040519150601f19603f3d011682016040523d82523d6000602084013e610f38565b606091505b508051610f575760405162461bcd60e51b815260040161046e9061152c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b1c565b506001949350505050565b610f8e8383610fb7565b610f9b6000848484610e77565b61050f5760405162461bcd60e51b815260040161046e9061152c565b6001600160a01b03821661100d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161046e565b6000818152600260205260409020546001600160a01b0316156110725760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161046e565b6001600160a01b038216600090815260036020526040812080546001929061109b908490611603565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b50805461110590611632565b6000825580601f10611115575050565b601f016020900490600052602060002090810190610a3491906111b7565b82805461113f90611632565b90600052602060002090601f01602090048101928261116157600085556111a7565b82601f1061117a57805160ff19168380011785556111a7565b828001600101855582156111a7579182015b828111156111a757825182559160200191906001019061118c565b506111b39291506111b7565b5090565b5b808211156111b357600081556001016111b8565b600067ffffffffffffffff808411156111e7576111e7611683565b604051601f8501601f19908116603f0116810190828211818310171561120f5761120f611683565b8160405280935085815286868601111561122857600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461125957600080fd5b919050565b60006020828403121561127057600080fd5b61127982611242565b9392505050565b6000806040838503121561129357600080fd5b61129c83611242565b91506112aa60208401611242565b90509250929050565b6000806000606084860312156112c857600080fd5b6112d184611242565b92506112df60208501611242565b9150604084013590509250925092565b6000806000806080858703121561130557600080fd5b61130e85611242565b935061131c60208601611242565b925060408501359150606085013567ffffffffffffffff81111561133f57600080fd5b8501601f8101871361135057600080fd5b61135f878235602084016111cc565b91505092959194509250565b6000806040838503121561137e57600080fd5b61138783611242565b91506020830135801515811461139c57600080fd5b809150509250929050565b600080604083850312156113ba57600080fd5b6113c383611242565b946020939093013593505050565b6000806000606084860312156113e657600080fd5b6113ef84611242565b925060208401359150604084013567ffffffffffffffff81111561141257600080fd5b8401601f8101861361142357600080fd5b611432868235602084016111cc565b9150509250925092565b60006020828403121561144e57600080fd5b813561127981611699565b60006020828403121561146b57600080fd5b815161127981611699565b60006020828403121561148857600080fd5b5035919050565b6000815180845260005b818110156114b557602081850181015186830182015201611499565b818111156114c7576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061150f9083018461148f565b9695505050505050565b602081526000611279602083018461148f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b600082198211156116165761161661166d565b500190565b60008282101561162d5761162d61166d565b500390565b600181811c9082168061164657607f821691505b6020821081141561166757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610a3457600080fdfea2646970667358221220611a25c632922318282c3df92400dbf730b99ce21f2c83666704a4c073e2c56864736f6c63430008070033a26469706673582212209554bf3bb8ed2b7eb3772dca129940f3a0ea71816eade02173843f97bad649bb64736f6c63430008070033",
}

// TNT721TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use TNT721TokenBankMetaData.ABI instead.
var TNT721TokenBankABI = TNT721TokenBankMetaData.ABI

// TNT721TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TNT721TokenBankMetaData.Bin instead.
var TNT721TokenBankBin = TNT721TokenBankMetaData.Bin

// DeployTNT721TokenBank deploys a new Ethereum contract, binding an instance of TNT721TokenBank to it.
func DeployTNT721TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, mainchainID_ *big.Int, chainRegistrar_ common.Address) (common.Address, *types.Transaction, *TNT721TokenBank, error) {
	parsed, err := TNT721TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TNT721TokenBankBin), backend, mainchainID_, chainRegistrar_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TNT721TokenBank{TNT721TokenBankCaller: TNT721TokenBankCaller{contract: contract}, TNT721TokenBankTransactor: TNT721TokenBankTransactor{contract: contract}, TNT721TokenBankFilterer: TNT721TokenBankFilterer{contract: contract}}, nil
}

// TNT721TokenBank is an auto generated Go binding around an Ethereum contract.
type TNT721TokenBank struct {
	TNT721TokenBankCaller     // Read-only binding to the contract
	TNT721TokenBankTransactor // Write-only binding to the contract
	TNT721TokenBankFilterer   // Log filterer for contract events
}

// TNT721TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type TNT721TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT721TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TNT721TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT721TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TNT721TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT721TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TNT721TokenBankSession struct {
	Contract     *TNT721TokenBank  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TNT721TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TNT721TokenBankCallerSession struct {
	Contract *TNT721TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// TNT721TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TNT721TokenBankTransactorSession struct {
	Contract     *TNT721TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TNT721TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type TNT721TokenBankRaw struct {
	Contract *TNT721TokenBank // Generic contract binding to access the raw methods on
}

// TNT721TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TNT721TokenBankCallerRaw struct {
	Contract *TNT721TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// TNT721TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TNT721TokenBankTransactorRaw struct {
	Contract *TNT721TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTNT721TokenBank creates a new instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBank(address common.Address, backend bind.ContractBackend) (*TNT721TokenBank, error) {
	contract, err := bindTNT721TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBank{TNT721TokenBankCaller: TNT721TokenBankCaller{contract: contract}, TNT721TokenBankTransactor: TNT721TokenBankTransactor{contract: contract}, TNT721TokenBankFilterer: TNT721TokenBankFilterer{contract: contract}}, nil
}

// NewTNT721TokenBankCaller creates a new read-only instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBankCaller(address common.Address, caller bind.ContractCaller) (*TNT721TokenBankCaller, error) {
	contract, err := bindTNT721TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankCaller{contract: contract}, nil
}

// NewTNT721TokenBankTransactor creates a new write-only instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*TNT721TokenBankTransactor, error) {
	contract, err := bindTNT721TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTransactor{contract: contract}, nil
}

// NewTNT721TokenBankFilterer creates a new log filterer instance of TNT721TokenBank, bound to a specific deployed contract.
func NewTNT721TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*TNT721TokenBankFilterer, error) {
	contract, err := bindTNT721TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankFilterer{contract: contract}, nil
}

// bindTNT721TokenBank binds a generic wrapper to an already deployed contract.
func bindTNT721TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TNT721TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT721TokenBank *TNT721TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT721TokenBank.Contract.TNT721TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT721TokenBank *TNT721TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.TNT721TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT721TokenBank *TNT721TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.TNT721TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT721TokenBank *TNT721TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT721TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT721TokenBank *TNT721TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT721TokenBank *TNT721TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.contract.Transact(opts, method, params...)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCaller) AllDenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "allDenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT721TokenBank.Contract.AllDenoms(&_TNT721TokenBank.CallOpts, arg0)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT721TokenBank.Contract.AllDenoms(&_TNT721TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCaller) AllVouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "allVouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT721TokenBank.Contract.AllVouchers(&_TNT721TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT721TokenBank.Contract.AllVouchers(&_TNT721TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCaller) DenomToVoucherLookup(opts *bind.CallOpts, arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "denomToVoucherLookup", arg0)

	outstruct := new(struct {
		ContractAddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT721TokenBank *TNT721TokenBankSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT721TokenBank.Contract.DenomToVoucherLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT721TokenBank.Contract.DenomToVoucherLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankSession) Exists(denom string) (bool, error) {
	return _TNT721TokenBank.Contract.Exists(&_TNT721TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _TNT721TokenBank.Contract.Exists(&_TNT721TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCaller) Exists0(opts *bind.CallOpts, voucherAddress common.Address) (bool, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "exists0", voucherAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT721TokenBank.Contract.Exists0(&_TNT721TokenBank.CallOpts, voucherAddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT721TokenBank.Contract.Exists0(&_TNT721TokenBank.CallOpts, voucherAddress)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetAdjustedValidatorSet(opts *bind.CallOpts, subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getAdjustedValidatorSet", subchainID, dynasty)

	outstruct := new(struct {
		Validators   []common.Address
		ShareAmounts []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Validators = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.ShareAmounts = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT721TokenBank *TNT721TokenBankSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT721TokenBank.Contract.GetAdjustedValidatorSet(&_TNT721TokenBank.CallOpts, subchainID, dynasty)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT721TokenBank.Contract.GetAdjustedValidatorSet(&_TNT721TokenBank.CallOpts, subchainID, dynasty)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetDenom(opts *bind.CallOpts, voucherContractAddr common.Address) (string, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getDenom", voucherContractAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT721TokenBank.Contract.GetDenom(&_TNT721TokenBank.CallOpts, voucherContractAddr)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT721TokenBank.Contract.GetDenom(&_TNT721TokenBank.CallOpts, voucherContractAddr)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetMaxProcessedTokenLockNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getMaxProcessedTokenLockNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetMaxProcessedVoucherBurnNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getMaxProcessedVoucherBurnNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT721TokenBank.CallOpts, chainID)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetTokenLockEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getTokenLockEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetTokenLockEventHeight(&_TNT721TokenBank.CallOpts, chainID, eventNonce)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetTokenLockEventHeight(&_TNT721TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetVoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getVoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT721TokenBank.Contract.GetVoucher(&_TNT721TokenBank.CallOpts, denom)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT721TokenBank.Contract.GetVoucher(&_TNT721TokenBank.CallOpts, denom)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) GetVoucherBurnEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "getVoucherBurnEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT721TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT721TokenBank.CallOpts, chainID, eventNonce)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) MainchainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "mainchainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) MainchainID() (*big.Int, error) {
	return _TNT721TokenBank.Contract.MainchainID(&_TNT721TokenBank.CallOpts)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) MainchainID() (*big.Int, error) {
	return _TNT721TokenBank.Contract.MainchainID(&_TNT721TokenBank.CallOpts)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) TokenLockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "tokenLockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenLockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenLockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCaller) TokenLockVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "tokenLockVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.TokenLockVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.TokenLockVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) TokenUnlockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "tokenUnlockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenUnlockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TokenUnlockNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) TotalLockedAmounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "totalLockedAmounts", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TotalLockedAmounts(&_TNT721TokenBank.CallOpts, arg0, arg1, arg2)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.TotalLockedAmounts(&_TNT721TokenBank.CallOpts, arg0, arg1, arg2)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherAddressToDenomLookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherAddressToDenomLookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT721TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT721TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherBurnNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherBurnNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherBurnNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherBurnNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherBurnVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherBurnVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.VoucherBurnVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT721TokenBank.Contract.VoucherBurnVotingRecords(&_TNT721TokenBank.CallOpts, arg0, arg1)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCaller) VoucherMintNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT721TokenBank.contract.Call(opts, &out, "voucherMintNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherMintNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT721TokenBank *TNT721TokenBankCallerSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT721TokenBank.Contract.VoucherMintNonceMap(&_TNT721TokenBank.CallOpts, arg0)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) BurnVouchers(opts *bind.TransactOpts, sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "burnVouchers", sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.BurnVouchers(&_TNT721TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.BurnVouchers(&_TNT721TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT721Contract, address targetChainVoucherReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) LockTokens(opts *bind.TransactOpts, targetChainID *big.Int, sourceChainTNT721Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "lockTokens", targetChainID, sourceChainTNT721Contract, targetChainVoucherReceiver, tokenID)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT721Contract, address targetChainVoucherReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankSession) LockTokens(targetChainID *big.Int, sourceChainTNT721Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.LockTokens(&_TNT721TokenBank.TransactOpts, targetChainID, sourceChainTNT721Contract, targetChainVoucherReceiver, tokenID)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT721Contract, address targetChainVoucherReceiver, uint256 tokenID) payable returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) LockTokens(targetChainID *big.Int, sourceChainTNT721Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.LockTokens(&_TNT721TokenBank.TransactOpts, targetChainID, sourceChainTNT721Contract, targetChainVoucherReceiver, tokenID)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x44b7b352.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, address targetChainVoucherReceiver, uint256 tokenID, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) MintVouchers(opts *bind.TransactOpts, denom string, name string, symbol string, targetChainVoucherReceiver common.Address, tokenID *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "mintVouchers", denom, name, symbol, targetChainVoucherReceiver, tokenID, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x44b7b352.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, address targetChainVoucherReceiver, uint256 tokenID, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankSession) MintVouchers(denom string, name string, symbol string, targetChainVoucherReceiver common.Address, tokenID *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.MintVouchers(&_TNT721TokenBank.TransactOpts, denom, name, symbol, targetChainVoucherReceiver, tokenID, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x44b7b352.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, address targetChainVoucherReceiver, uint256 tokenID, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) MintVouchers(denom string, name string, symbol string, targetChainVoucherReceiver common.Address, tokenID *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.MintVouchers(&_TNT721TokenBank.TransactOpts, denom, name, symbol, targetChainVoucherReceiver, tokenID, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankTransactor) UnlockTokens(opts *bind.TransactOpts, sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.contract.Transact(opts, "unlockTokens", sourceChainID, denom, targetChainTokenReceiver, tokenID, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.UnlockTokens(&_TNT721TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT721TokenBank *TNT721TokenBankTransactorSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT721TokenBank.Contract.UnlockTokens(&_TNT721TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, dynasty, sourceChainVoucherBurnNonce)
}

// TNT721TokenBankTNT721TokenLockedIterator is returned from FilterTNT721TokenLocked and is used to iterate over the raw logs and unpacked data for TNT721TokenLocked events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenLockedIterator struct {
	Event *TNT721TokenBankTNT721TokenLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721TokenLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721TokenLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721TokenLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721TokenLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721TokenLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721TokenLocked represents a TNT721TokenLocked event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenLocked struct {
	Denom                      string
	SourceChainTokenSender     common.Address
	TargetChainID              *big.Int
	TargetChainVoucherReceiver common.Address
	TokenID                    *big.Int
	Name                       string
	Symbol                     string
	TokenURI                   string
	TokenLockNonce             *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT721TokenLocked is a free log retrieval operation binding the contract event 0x4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b.
//
// Solidity: event TNT721TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, string name, string symbol, string tokenURI, uint256 tokenLockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721TokenLocked(opts *bind.FilterOpts) (*TNT721TokenBankTNT721TokenLockedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721TokenLocked")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721TokenLockedIterator{contract: _TNT721TokenBank.contract, event: "TNT721TokenLocked", logs: logs, sub: sub}, nil
}

// WatchTNT721TokenLocked is a free log subscription operation binding the contract event 0x4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b.
//
// Solidity: event TNT721TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, string name, string symbol, string tokenURI, uint256 tokenLockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721TokenLocked(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721TokenLocked) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721TokenLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721TokenLocked)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721TokenLocked is a log parse operation binding the contract event 0x4f9f4d5de31a3b62319d89542b16a804341d645cf6f3ddf2e28a03f7d227cb0b.
//
// Solidity: event TNT721TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, string name, string symbol, string tokenURI, uint256 tokenLockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721TokenLocked(log types.Log) (*TNT721TokenBankTNT721TokenLocked, error) {
	event := new(TNT721TokenBankTNT721TokenLocked)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT721TokenBankTNT721TokenUnlockedIterator is returned from FilterTNT721TokenUnlocked and is used to iterate over the raw logs and unpacked data for TNT721TokenUnlocked events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenUnlockedIterator struct {
	Event *TNT721TokenBankTNT721TokenUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721TokenUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721TokenUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721TokenUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721TokenUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721TokenUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721TokenUnlocked represents a TNT721TokenUnlocked event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721TokenUnlocked struct {
	Denom                       string
	TargetChainTokenReceiver    common.Address
	TokenID                     *big.Int
	SourceChainVoucherBurnNonce *big.Int
	TokenUnlockNonce            *big.Int
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterTNT721TokenUnlocked is a free log retrieval operation binding the contract event 0xf8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd.
//
// Solidity: event TNT721TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721TokenUnlocked(opts *bind.FilterOpts) (*TNT721TokenBankTNT721TokenUnlockedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721TokenUnlockedIterator{contract: _TNT721TokenBank.contract, event: "TNT721TokenUnlocked", logs: logs, sub: sub}, nil
}

// WatchTNT721TokenUnlocked is a free log subscription operation binding the contract event 0xf8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd.
//
// Solidity: event TNT721TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721TokenUnlocked(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721TokenUnlocked) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721TokenUnlocked)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721TokenUnlocked is a log parse operation binding the contract event 0xf8a9006f96df65bd7b661f7c867ef002bd7c6efcae464f83b84095af188497dd.
//
// Solidity: event TNT721TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721TokenUnlocked(log types.Log) (*TNT721TokenBankTNT721TokenUnlocked, error) {
	event := new(TNT721TokenBankTNT721TokenUnlocked)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721TokenUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT721TokenBankTNT721VoucherBurnedIterator is returned from FilterTNT721VoucherBurned and is used to iterate over the raw logs and unpacked data for TNT721VoucherBurned events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherBurnedIterator struct {
	Event *TNT721TokenBankTNT721VoucherBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721VoucherBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721VoucherBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721VoucherBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721VoucherBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721VoucherBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721VoucherBurned represents a TNT721VoucherBurned event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherBurned struct {
	Denom                    string
	SourceChainVoucherOwner  common.Address
	TargetChainTokenReceiver common.Address
	TokenID                  *big.Int
	VoucherBurnNonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTNT721VoucherBurned is a free log retrieval operation binding the contract event 0xb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e.
//
// Solidity: event TNT721VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 voucherBurnNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721VoucherBurned(opts *bind.FilterOpts) (*TNT721TokenBankTNT721VoucherBurnedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721VoucherBurned")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721VoucherBurnedIterator{contract: _TNT721TokenBank.contract, event: "TNT721VoucherBurned", logs: logs, sub: sub}, nil
}

// WatchTNT721VoucherBurned is a free log subscription operation binding the contract event 0xb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e.
//
// Solidity: event TNT721VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 voucherBurnNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721VoucherBurned(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721VoucherBurned) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721VoucherBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721VoucherBurned)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721VoucherBurned is a log parse operation binding the contract event 0xb097dcf0d8777f11a1ca4b2510f3df57029b1d2f8ce89a94ad11d4ca61df056e.
//
// Solidity: event TNT721VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 voucherBurnNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721VoucherBurned(log types.Log) (*TNT721TokenBankTNT721VoucherBurned, error) {
	event := new(TNT721TokenBankTNT721VoucherBurned)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT721TokenBankTNT721VoucherMintedIterator is returned from FilterTNT721VoucherMinted and is used to iterate over the raw logs and unpacked data for TNT721VoucherMinted events raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherMintedIterator struct {
	Event *TNT721TokenBankTNT721VoucherMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT721TokenBankTNT721VoucherMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT721TokenBankTNT721VoucherMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT721TokenBankTNT721VoucherMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT721TokenBankTNT721VoucherMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT721TokenBankTNT721VoucherMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT721TokenBankTNT721VoucherMinted represents a TNT721VoucherMinted event raised by the TNT721TokenBank contract.
type TNT721TokenBankTNT721VoucherMinted struct {
	Denom                      string
	TargetChainVoucherReceiver common.Address
	VoucherContract            common.Address
	TokenID                    *big.Int
	SourceChainTokenLockNonce  *big.Int
	VoucherMintNonce           *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT721VoucherMinted is a free log retrieval operation binding the contract event 0x9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91.
//
// Solidity: event TNT721VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) FilterTNT721VoucherMinted(opts *bind.FilterOpts) (*TNT721TokenBankTNT721VoucherMintedIterator, error) {

	logs, sub, err := _TNT721TokenBank.contract.FilterLogs(opts, "TNT721VoucherMinted")
	if err != nil {
		return nil, err
	}
	return &TNT721TokenBankTNT721VoucherMintedIterator{contract: _TNT721TokenBank.contract, event: "TNT721VoucherMinted", logs: logs, sub: sub}, nil
}

// WatchTNT721VoucherMinted is a free log subscription operation binding the contract event 0x9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91.
//
// Solidity: event TNT721VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) WatchTNT721VoucherMinted(opts *bind.WatchOpts, sink chan<- *TNT721TokenBankTNT721VoucherMinted) (event.Subscription, error) {

	logs, sub, err := _TNT721TokenBank.contract.WatchLogs(opts, "TNT721VoucherMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT721TokenBankTNT721VoucherMinted)
				if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT721VoucherMinted is a log parse operation binding the contract event 0x9b5e85947adbfffa61d52bc536966418240a4d92744deb02c50f02d031419c91.
//
// Solidity: event TNT721VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT721TokenBank *TNT721TokenBankFilterer) ParseTNT721VoucherMinted(log types.Log) (*TNT721TokenBankTNT721VoucherMinted, error) {
	event := new(TNT721TokenBankTNT721VoucherMinted)
	if err := _TNT721TokenBank.contract.UnpackLog(event, "TNT721VoucherMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
