// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TestSubchainTNT20TokenBankMetaData contains all meta data concerning the TestSubchainTNT20TokenBank contract.
var TestSubchainTNT20TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainTokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenUnlockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainVoucherOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20VoucherBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voucherContact\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherMintNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20VoucherMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDenoms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVouchers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomToVoucherLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherAddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherContractAddr\",\"type\":\"address\"}],\"name\":\"getDenom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedTokenLockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedVoucherBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getVoucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenLockVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUnlockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucherAddressToDenomLookup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherBurnNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherBurnVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherMintNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceChainTNT20Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"mintVouchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceChainVoucherContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnVouchers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506145e5806100206000396000f3fe6080604052600436106200014f5760003560e01c80638883931e11620000b9578063ca2075691162000078578063ca2075691462000486578063ccf187c714620004b7578063ebda996214620004e8578063f6a3d24e146200050d578063f95627ac146200054d578063feaff052146200057e57600080fd5b80638883931e14620003dd5780639d3a0f0c146200040e578063a0df5cc51462000433578063a2cc6981146200044a578063bff4c41a146200046f57600080fd5b80633f1a8aa811620001125780633f1a8aa814620002bd578063588b140814620002f957806360569b5e146200032d578063740cb7f81462000362578063766f8fb014620003935780637ff75b4614620003c457600080fd5b8063073b950214620001545780631527b14d146200017f5780631eb7873714620001f0578063261a323e146200024957806327ca4df1146200027f575b600080fd5b3480156200016157600080fd5b506200016c61016e81565b6040519081526020015b60405180910390f35b3480156200018c57600080fd5b50620001d06200019e366004620029c9565b80516020818301810180516008825292820191909301209152546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b03909316835290151560208301520162000176565b348015620001fd57600080fd5b50620002336200020f36600462002bef565b60066020908152600092835260408084209091529082529020805460029091015482565b6040805192835260208301919091520162000176565b3480156200025657600080fd5b506200026e62000268366004620029c9565b620005c1565b604051901515815260200162000176565b3480156200028c57600080fd5b50620002a46200029e36600462002b55565b62000605565b6040516001600160a01b03909116815260200162000176565b348015620002ca57600080fd5b506200016c620002dc36600462002b6f565b600c60209081526000928352604080842090915290825290205481565b3480156200030657600080fd5b506200031e6200031836600462002b55565b62000630565b60405162000176919062002f07565b3480156200033a57600080fd5b50620003526200034c36600462002845565b620006e5565b604051620001769291906200306e565b3480156200036f57600080fd5b506200016c6200038136600462002b55565b60036020526000908152604090205481565b348015620003a057600080fd5b506200016c620003b236600462002b55565b60009081526005602052604090205490565b620003db620003d536600462002c12565b62000794565b005b348015620003ea57600080fd5b506200016c620003fc36600462002b55565b60006020819052908152604090205481565b3480156200041b57600080fd5b50620003db6200042d36600462002a82565b62000a3a565b620003db6200044436600462002885565b62000d09565b3480156200045757600080fd5b50620002a462000469366004620029c9565b62000fa9565b620003db6200048036600462002ba2565b6200101f565b3480156200049357600080fd5b506200016c620004a536600462002b55565b60026020526000908152604090205481565b348015620004c457600080fd5b506200016c620004d636600462002b55565b60016020526000908152604090205481565b348015620004f557600080fd5b506200031e6200050736600462002845565b62001317565b3480156200051a57600080fd5b506200026e6200052c36600462002845565b6001600160a01b031660009081526009602052604090206001015460ff1690565b3480156200055a57600080fd5b506200016c6200056c36600462002b55565b60009081526004602052604090205490565b3480156200058b57600080fd5b50620002336200059d36600462002bef565b60076020908152600092835260408084209091529082529020805460029091015482565b600080620005cf8362001417565b9050600881604051620005e3919062002cdb565b9081526040519081900360200190205460ff600160a01b909104169392505050565b600a81815481106200061657600080fd5b6000918252602090912001546001600160a01b0316905081565b600b81815481106200064157600080fd5b9060005260206000200160009150905080546200065e90620032aa565b80601f01602080910402602001604051908101604052809291908181526020018280546200068c90620032aa565b8015620006dd5780601f10620006b157610100808354040283529160200191620006dd565b820191906000526020600020905b815481529060010190602001808311620006bf57829003601f168201915b505050505081565b6009602052600090815260409020805481906200070290620032aa565b80601f01602080910402602001604051908101604052809291908181526020018280546200073090620032aa565b8015620007815780601f10620007555761010080835404028352916020019162000781565b820191906000526020600020905b8154815290600101906020018083116200076357829003601f168201915b5050506001909301549192505060ff1682565b6000620007a18662001417565b9050600080620007b1836200142a565b91509150806200081e5760405162461bcd60e51b815260206004820152602d60248201527f4661696c656420746f206578747261637420636f6e747261637420616464726560448201526c73732066726f6d2064656e6f6d60981b60648201526084015b60405180910390fd5b6000898152600c602090815260408083206001600160a01b0386168452909152902054861115620008a75760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420756e6c6f636b207468652072657175657374656420616d6f7560448201526b6e74206f6620746f6b656e7360a01b606482015260840162000815565b60008984888a8989604051602001620008c69695949392919062002e4b565b6040516020818303038152906040528051906020012090506000620008ef8b88848933620014ab565b9050801562000a2d5760008b8152600c602090815260408083206001600160a01b0388168452909152902054620009279089620014ca565b60008c8152600c602090815260408083206001600160a01b03898116808652919093529281902093909355915163a9059cbb60e01b8152918b166004830152602482018a90529063a9059cbb90604401602060405180830381600087803b1580156200099257600080fd5b505af1158015620009a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009cd9190620029a5565b50620009d98b620014df565b60008b815260016020526040908190205490517f189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb9062000a239088908d908d908c9087906200302c565b60405180910390a1505b5050505050505050505050565b600062000a478962001417565b905060008062000a57836200150c565b915091508062000ab65760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f206578747261637420636861696e49442066726f6d2064604482015263656e6f6d60e01b606482015260840162000815565b600082848c8c8c8c8c8c8c60405160200162000adb9998979695949392919062002db2565b604051602081830303815290604052805190602001209050600062000b048488848933620015a8565b9050801562000cfa5760405163130d191f60e11b8152309063261a323e9062000b3290889060040162002f07565b60206040518083038186803b15801562000b4b57600080fd5b505afa15801562000b60573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b869190620029a5565b62000ba45762000ba48562000b9e878f8f8f620015bd565b6200165f565b60405163a2cc698160e01b8152600090309063a2cc69819062000bcc90899060040162002f07565b60206040518083038186803b15801562000be557600080fd5b505afa15801562000bfa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c20919062002865565b90506001600160a01b03811662000c8b5760405162461bcd60e51b815260206004820152602860248201527f74686520766f756368657220666f72207468652064656e6f6d20646f6573206e6044820152671bdd08195e1a5cdd60c21b606482015260840162000815565b62000c98818b8b62001889565b62000ca385620018f7565b600085815260036020526040908190205490517f5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf089062000cef9089908e9086908f908e90889062002f5e565b60405180910390a150505b50505050505050505050505050565b6040516375ed4cb160e11b81526001600160a01b0384166004820152600090309063ebda99629060240160006040518083038186803b15801562000d4c57600080fd5b505afa15801562000d61573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000d8b919081019062002a02565b905080516000141562000df95760405162461bcd60e51b815260206004820152602f60248201527f6661696c656420746f206c6f6f6b75702064656e6f6d20666f7220746865207660448201526e1bdd58da195c8818dbdb9d1c9858dd608a1b606482015260840162000815565b60405163130d191f60e11b8152309063261a323e9062000e1e90849060040162002f07565b60206040518083038186803b15801562000e3757600080fd5b505afa15801562000e4c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e729190620029a5565b62000ec05760405162461bcd60e51b815260206004820152601f60248201527f566f756368657220636f6e747261637420646f6573206e6f7420657869737400604482015260640162000815565b3362000ece85828562001918565b60008062000edc846200150c565b915091508062000f425760405162461bcd60e51b815260206004820152602a60248201527f4661696c656420746f206578747261637420746172676574436861696e49442060448201526966726f6d2064656e6f6d60b01b606482015260840162000815565b62000f4d8262001951565b600082815260026020526040908190205490517f8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d9062000f9790879087908b908b90879062002f1c565b60405180910390a15050505050505050565b60008062000fb78362001417565b9050600060088260405162000fcd919062002cdb565b908152604080516020928190038301812081830190925290546001600160a01b0381168252600160a01b900460ff161580159282019290925291506200101557519392505050565b5060009392505050565b6040516323b872dd60e01b81523360048201523060248201526044810182905283906001600160a01b038216906323b872dd90606401602060405180830381600087803b1580156200107057600080fd5b505af115801562001085573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010ab9190620029a5565b506000620010ea4660405180604001604052806002815260200161032360f41b815250620010e4886001600160a01b0316601462001972565b62001b2c565b6000878152600c602090815260408083206001600160a01b038a1684529091529020549091506200111c908462001b70565b6000878152600c602090815260408083206001600160a01b038a1684529091529020556200114a8662001b7e565b60008060008881526020019081526020016000205490507fe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb8233898888886001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015620011c157600080fd5b505afa158015620011d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001200919081019062002a02565b896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200123a57600080fd5b505afa1580156200124f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001279919081019062002a02565b8a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620012b357600080fd5b505afa158015620012c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012ee919062002c8d565b89604051620013069998979695949392919062002fa8565b60405180910390a150505050505050565b6001600160a01b03811660009081526009602052604080822081518083019092528054606093929190829082906200134f90620032aa565b80601f01602080910402602001604051908101604052809291908181526020018280546200137d90620032aa565b8015620013ce5780601f10620013a257610100808354040283529160200191620013ce565b820191906000526020600020905b815481529060010190602001808311620013b057829003601f168201915b50505091835250506001919091015460ff16151560209182015281015190915015620013fb575192915050565b5050604080516020810190915260008152919050565b50919050565b6060620014248262001b9f565b92915050565b6000806000806200144285602f60f81b600262001c25565b915091508062001459575060009485945092505050565b60008062001476876200146e86600162003148565b895162001cc1565b91509150806200148f5750600096879650945050505050565b60006200149c8362001df0565b98600198509650505050505050565b6000620014c08686868686600560076200200b565b9695505050505050565b6000620014d8828462003221565b9392505050565b6001806000838152602001908152602001600020600082825462001504919062003148565b909155505050565b6000806000806200152485602f60f81b600162001c25565b91509150806200153b575060009485945092505050565b6000806200155787826200155187600162003148565b62001cc1565b9150915080620015705750600096879650945050505050565b6000806200157e846200244d565b91509150806200159957506000988998509650505050505050565b50976001975095505050505050565b6000620014c08686868686600460066200200b565b600080309050600085604051602001620015d8919062002cf9565b6040516020818303038152906040529050600085604051602001620015fe919062002d87565b6040516020818303038152906040529050600083898484896040516200162490620026ac565b6200163495949392919062002ea1565b604051809103906000f08015801562001651573d6000803e3d6000fd5b509998505050505050505050565b60006200166c8362001417565b60405163130d191f60e11b8152909150309063261a323e906200169490849060040162002f07565b60206040518083038186803b158015620016ad57600080fd5b505afa158015620016c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016e89190620029a5565b15620017425760405162461bcd60e51b815260206004820152602260248201527f616e20766f756368657220636f6e747261637420616c72656164792065786973604482015261747360f01b606482015260840162000815565b6040805180820182526001600160a01b03841681526001602082015290516008906200177090849062002cdb565b90815260408051918290036020908101832084518154958301511515600160a01b026001600160a81b03199096166001600160a01b03918216179590951790558282018252848352600183820152928516600090815260098452208151805192939192620017e29284920190620026ba565b506020918201516001918201805460ff1916911515919091179055600a80548083019091557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b038616179055600b80549182018155600052825162001883927f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990920191840190620026ba565b50505050565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390528491908216906340c10f19906044015b600060405180830381600087803b158015620018d857600080fd5b505af1158015620018ed573d6000803e3d6000fd5b5050505050505050565b60008181526003602052604081208054600192906200150490849062003148565b604051632770a7eb60e21b81526001600160a01b03838116600483015260248201839052849190821690639dc29fac90604401620018bd565b60008181526002602052604081208054600192906200150490849062003148565b6060600062001983836002620031d4565b6200199090600262003148565b67ffffffffffffffff811115620019ab57620019ab62003358565b6040519080825280601f01601f191660200182016040528015620019d6576020820181803683370190505b509050600360fc1b81600081518110620019f457620019f462003342565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062001a265762001a2662003342565b60200101906001600160f81b031916908160001a905350600062001a4c846002620031d4565b62001a5990600162003148565b90505b600181111562001adb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001a915762001a9162003342565b1a60f81b82828151811062001aaa5762001aaa62003342565b60200101906001600160f81b031916908160001a90535060049490941c9362001ad38162003290565b905062001a5c565b508315620014d85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000815565b606062001b6862001b3d8562002535565b848460405160200162001b539392919062002d27565b60405160208183030381529060405262001417565b949350505050565b6000620014d8828462003148565b60008181526020819052604081208054600192906200150490849062003148565b60608160005b815181101562001c1e5762001bdd82828151811062001bc85762001bc862003342565b01602001516001600160f81b0319166200264b565b82828151811062001bf25762001bf262003342565b60200101906001600160f81b031916908160001a9053508062001c1581620032e1565b91505062001ba5565b5092915050565b82516000908190859082805b8281101562001cad57876001600160f81b03191684828151811062001c5a5762001c5a62003342565b01602001516001600160f81b031916141562001c985762001c7d60018362003148565b91508682141562001c985794506001935062001cb992505050565b8062001ca481620032e1565b91505062001c31565b50600080945094505050505b935093915050565b82516060906000908484101562001ced5750506040805160208101909152600080825290915062001cb9565b62001cfa816001620014ca565b84111562001d1d5750506040805160208101909152600080825290915062001cb9565b85600062001d2c8688620014ca565b67ffffffffffffffff81111562001d475762001d4762003358565b6040519080825280601f01601f19166020018201604052801562001d72576020820181803683370190505b509050865b86811015620015995782818151811062001d955762001d9562003342565b01602001516001600160f81b0319168262001db1838b620014ca565b8151811062001dc45762001dc462003342565b60200101906001600160f81b031916908160001a9053508062001de781620032e1565b91505062001d77565b60008181808060025b602a811015620020005762001e1161010085620031a2565b935084818151811062001e285762001e2862003342565b016020015160f81c92508462001e4082600162003148565b8151811062001e535762001e5362003342565b016020015160f81c915060616001600160a01b0384161080159062001e8257506066836001600160a01b031611155b1562001e9d5762001e95605784620031f6565b925062001f10565b6041836001600160a01b03161015801562001ec257506046836001600160a01b031611155b1562001ed55762001e95603784620031f6565b6030836001600160a01b03161015801562001efa57506039836001600160a01b031611155b1562001f105762001f0d603084620031f6565b92505b6061826001600160a01b03161015801562001f3557506066826001600160a01b031611155b1562001f505762001f48605783620031f6565b915062001fc3565b6041826001600160a01b03161015801562001f7557506046826001600160a01b031611155b1562001f885762001f48603783620031f6565b6030826001600160a01b03161015801562001fad57506039826001600160a01b031611155b1562001fc35762001fc0603083620031f6565b91505b8162001fd1846010620031a2565b62001fdd91906200311a565b62001fe990856200311a565b935062001ff860028262003148565b905062001df9565b509195945050505050565b600061016e881480620020a257506040516343b71f0560e01b81526004810189905273bd770416a3345f91e4b34576cb804a576fa48eb1906343b71f0590602401602060405180830381600087803b1580156200206757600080fd5b505af11580156200207c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020a29190620029a5565b620020e25760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b604482015260640162000815565b600088815260208490526040902054620020fe90600162003148565b85146200210e5750600062002442565b60008881526020838152604080832089845290915281206060808b61016e811415620021375750465b6040516343f27e4560e01b815260048101829052602481018d905273bd770416a3345f91e4b34576cb804a576fa48eb1906343f27e4590604401600060405180830381600087803b1580156200218c57600080fd5b505af1158015620021a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620021cb9190810190620028cb565b9350915060005b82518110156200233f57896001600160a01b0316838281518110620021fb57620021fb62003342565b60200260200101516001600160a01b03161462002218576200232a565b6001955060005b6001860154811015620022c25785600101818154811062002244576200224462003342565b6000918252602090912001546001600160a01b038c811691161415620022ad5760405162461bcd60e51b815260206004820152601c60248201527f546869732076616c696461746f7220616c726561647920766f74656400000000604482015260640162000815565b80620022b981620032e1565b9150506200221f565b508c85556001808601805491820181556000908152602090200180546001600160a01b031916331790558351620023249085908390811062002308576200230862003342565b6020026020010151866002015462001b7090919063ffffffff16565b60028601555b806200233681620032e1565b915050620021d2565b50505082620023835760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b604482015260640162000815565b6000805b8251811015620023d957620023c2838281518110620023aa57620023aa62003342565b60200260200101518362001b7090919063ffffffff16565b915080620023d081620032e1565b91505062002387565b50620023e78160026200269e565b6002840154620023f99060036200269e565b10620024395760008c8152602088905260409020546200241b90600162003148565b60008d81526020899052604090205550600193506200244292505050565b60009450505050505b979650505050505050565b80516000908190839082805b828110156200252857603084828151811062002479576200247962003342565b016020015160f81c10801590620024ad57506039848281518110620024a257620024a262003342565b016020015160f81c11155b156200250457620024c082600a6200269e565b9150620024fc6030858381518110620024dd57620024dd62003342565b0160200151620024f1919060f81c6200323b565b839060ff1662001b70565b915062002513565b50600096879650945050505050565b806200251f81620032e1565b91505062002459565b5095600195509350505050565b6060816200255a5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200258a57806200257181620032e1565b9150620025829050600a836200318b565b91506200255e565b60008167ffffffffffffffff811115620025a857620025a862003358565b6040519080825280601f01601f191660200182016040528015620025d3576020820181803683370190505b5090505b841562001b6857620025eb60018362003221565b9150620025fa600a86620032ff565b6200260790603062003148565b60f81b8183815181106200261f576200261f62003342565b60200101906001600160f81b031916908160001a90535062002643600a866200318b565b9450620025d7565b6000604160f81b6001600160f81b03198316108015906200267a5750602d60f91b6001600160f81b0319831611155b156200269a576200269160f883901c602062003163565b60f81b92915050565b5090565b6000620014d88284620031d4565b611218806200339883390190565b828054620026c890620032aa565b90600052602060002090601f016020900481019282620026ec576000855562002737565b82601f106200270757805160ff191683800117855562002737565b8280016001018555821562002737579182015b82811115620027375782518255916020019190600101906200271a565b506200269a9291505b808211156200269a576000815560010162002740565b803562002763816200336e565b919050565b600082601f8301126200277a57600080fd5b81516020620027936200278d83620030c8565b62003094565b80838252828201915082860187848660051b8901011115620027b457600080fd5b60005b85811015620027d557815184529284019290840190600101620027b7565b5090979650505050505050565b600082601f830112620027f457600080fd5b8135620028056200278d82620030ef565b8181528460208386010111156200281b57600080fd5b816020850160208301376000918101602001919091529392505050565b8035620027638162003387565b6000602082840312156200285857600080fd5b8135620014d8816200336e565b6000602082840312156200287857600080fd5b8151620014d8816200336e565b6000806000606084860312156200289b57600080fd5b8335620028a8816200336e565b92506020840135620028ba816200336e565b929592945050506040919091013590565b60008060408385031215620028df57600080fd5b825167ffffffffffffffff80821115620028f857600080fd5b818501915085601f8301126200290d57600080fd5b81516020620029206200278d83620030c8565b8083825282820191508286018a848660051b89010111156200294157600080fd5b600096505b84871015620029715780516200295c816200336e565b83526001969096019591830191830162002946565b50918801519196509093505050808211156200298c57600080fd5b506200299b8582860162002768565b9150509250929050565b600060208284031215620029b857600080fd5b81518015158114620014d857600080fd5b600060208284031215620029dc57600080fd5b813567ffffffffffffffff811115620029f457600080fd5b62001b6884828501620027e2565b60006020828403121562002a1557600080fd5b815167ffffffffffffffff81111562002a2d57600080fd5b8201601f8101841362002a3f57600080fd5b805162002a506200278d82620030ef565b81815285602083850101111562002a6657600080fd5b62002a7982602083016020860162003261565b95945050505050565b600080600080600080600080610100898b03121562002aa057600080fd5b883567ffffffffffffffff8082111562002ab957600080fd5b62002ac78c838d01620027e2565b995060208b013591508082111562002ade57600080fd5b62002aec8c838d01620027e2565b985060408b013591508082111562002b0357600080fd5b5062002b128b828c01620027e2565b96505062002b2360608a0162002838565b945062002b3360808a0162002756565b979a969950949793969560a0850135955060c08501359460e001359350915050565b60006020828403121562002b6857600080fd5b5035919050565b6000806040838503121562002b8357600080fd5b82359150602083013562002b97816200336e565b809150509250929050565b6000806000806080858703121562002bb957600080fd5b84359350602085013562002bcd816200336e565b9250604085013562002bdf816200336e565b9396929550929360600135925050565b6000806040838503121562002c0357600080fd5b50508035926020909101359150565b60008060008060008060c0878903121562002c2c57600080fd5b86359550602087013567ffffffffffffffff81111562002c4b57600080fd5b62002c5989828a01620027e2565b955050604087013562002c6c816200336e565b959894975094956060810135955060808101359460a0909101359350915050565b60006020828403121562002ca057600080fd5b8151620014d88162003387565b6000815180845262002cc781602086016020860162003261565b601f01601f19169290920160200192915050565b6000825162002cef81846020870162003261565b9190910192915050565b6000825162002d0d81846020870162003261565b67102b37bab1b432b960c11b920191825250600801919050565b6000845162002d3b81846020890162003261565b8083019050602f60f81b808252855162002d5d816001850160208a0162003261565b6001920191820152835162002d7a81600284016020880162003261565b0160020195945050505050565b603b60f91b81526000825162002da581600185016020870162003261565b9190910160010192915050565b898152600060208a5162002dcc81838601848f0162003261565b8a519084019062002de381848401858f0162003261565b8a5191019062002df981848401858e0162003261565b60f89990991b6001600160f81b031916980190810197909752505060609390931b6bffffffffffffffffffffffff19166021850152603584019190915260558301526075820152609501949350505050565b8681526000865162002e65816020850160208b0162003261565b602092019182019590955260609390931b6bffffffffffffffffffffffff19166040840152605483019190915260748201526094019392505050565b6001600160a01b038616815260a06020820181905260009062002ec79083018762002cad565b828103604084015262002edb818762002cad565b9050828103606084015262002ef1818662002cad565b91505060ff831660808301529695505050505050565b602081526000620014d8602083018462002cad565b60a08152600062002f3160a083018862002cad565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b60c08152600062002f7360c083018962002cad565b6001600160a01b0397881660208401529590961660408201526060810193909352608083019190915260a09091015292915050565b600061012080835262002fbe8184018d62002cad565b6001600160a01b038c81166020860152604085018c90528a1660608501526080840189905283810360a0850152905062002ff9818862002cad565b905082810360c08401526200300f818762002cad565b60ff9590951660e084015250506101000152979650505050505050565b60a0815260006200304160a083018862002cad565b6001600160a01b039690961660208301525060408101939093526060830191909152608090910152919050565b60408152600062003083604083018562002cad565b905082151560208301529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715620030c057620030c062003358565b604052919050565b600067ffffffffffffffff821115620030e557620030e562003358565b5060051b60200190565b600067ffffffffffffffff8211156200310c576200310c62003358565b50601f01601f191660200190565b60006001600160a01b038281168482168083038211156200313f576200313f62003316565b01949350505050565b600082198211156200315e576200315e62003316565b500190565b600060ff821660ff84168060ff0382111562003183576200318362003316565b019392505050565b6000826200319d576200319d6200332c565b500490565b60006001600160a01b0382811684821681151582840482111615620031cb57620031cb62003316565b02949350505050565b6000816000190483118215151615620031f157620031f162003316565b500290565b60006001600160a01b038381169083168181101562003219576200321962003316565b039392505050565b60008282101562003236576200323662003316565b500390565b600060ff821660ff84168082101562003258576200325862003316565b90039392505050565b60005b838110156200327e57818101518382015260200162003264565b83811115620018835750506000910152565b600081620032a257620032a262003316565b506000190190565b600181811c90821680620032bf57607f821691505b602082108114156200141157634e487b7160e01b600052602260045260246000fd5b6000600019821415620032f857620032f862003316565b5060010190565b6000826200331157620033116200332c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200338457600080fd5b50565b60ff811681146200338457600080fdfe60806040523480156200001157600080fd5b50604051620012183803806200121883398101604081905262000034916200021b565b84838381600390805190602001906200004f929190620000be565b50805162000065906004906020840190620000be565b5050600580546001600160a01b0319166001600160a01b0393909316929092179091555083516200009e906006906020870190620000be565b506007805460ff191660ff92909216919091179055506200033c92505050565b828054620000cc90620002e9565b90600052602060002090601f016020900481019282620000f057600085556200013b565b82601f106200010b57805160ff19168380011785556200013b565b828001600101855582156200013b579182015b828111156200013b5782518255916020019190600101906200011e565b50620001499291506200014d565b5090565b5b808211156200014957600081556001016200014e565b600082601f8301126200017657600080fd5b81516001600160401b038082111562000193576200019362000326565b604051601f8301601f19908116603f01168101908282118183101715620001be57620001be62000326565b81604052838152602092508683858801011115620001db57600080fd5b600091505b83821015620001ff5785820183015181830184015290820190620001e0565b83821115620002115760008385830101525b9695505050505050565b600080600080600060a086880312156200023457600080fd5b85516001600160a01b03811681146200024c57600080fd5b60208701519095506001600160401b03808211156200026a57600080fd5b6200027889838a0162000164565b955060408801519150808211156200028f57600080fd5b6200029d89838a0162000164565b94506060880151915080821115620002b457600080fd5b50620002c38882890162000164565b925050608086015160ff81168114620002db57600080fd5b809150509295509295909350565b600181811c90821680620002fe57607f821691505b602082108114156200032057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610ecc806200034c6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063880cdc3111610097578063a457c2d711610066578063a457c2d71461022a578063a9059cbb1461023d578063c370b04214610250578063dd62ed3e1461025857600080fd5b8063880cdc31146101d15780638da5cb5b146101e457806395d89b411461020f5780639dc29fac1461021757600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461018057806340c10f191461019357806370a08231146101a857600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d61026b565b60405161011a9190610d8a565b60405180910390f35b610136610131366004610d60565b6102fd565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610d24565b610315565b60075460405160ff909116815260200161011a565b61013661018e366004610d60565b610339565b6101a66101a1366004610d60565b61035b565b005b61014a6101b6366004610ccf565b6001600160a01b031660009081526020819052604090205490565b6101a66101df366004610ccf565b6103e1565b6005546101f7906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b61010d6104b9565b6101a6610225366004610d60565b6104c8565b610136610238366004610d60565b61065e565b61013661024b366004610d60565b6106d9565b61010d6106e7565b61014a610266366004610cf1565b6106f6565b60606003805461027a90610e45565b80601f01602080910402602001604051908101604052809291908181526020018280546102a690610e45565b80156102f35780601f106102c8576101008083540402835291602001916102f3565b820191906000526020600020905b8154815290600101906020018083116102d657829003601f168201915b5050505050905090565b60003361030b818585610721565b5060019392505050565b600033610323858285610846565b61032e8585856108c0565b506001949350505050565b60003361030b81858561034c83836106f6565b6103569190610e16565b610721565b600554604080513381526001600160a01b0390921660208301527f055decf46fd677bfe497b669febdaee9e74947808526a6cd30a19b3feab12c61910160405180910390a16005546001600160a01b031633146103d35760405162461bcd60e51b81526004016103ca90610ddf565b60405180910390fd5b6103dd8282610a8e565b5050565b600554604080513381526001600160a01b0390921660208301527f055decf46fd677bfe497b669febdaee9e74947808526a6cd30a19b3feab12c61910160405180910390a16005546001600160a01b031633146104505760405162461bcd60e51b81526004016103ca90610ddf565b600554604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b60606004805461027a90610e45565b600554604080513381526001600160a01b0390921660208301527f055decf46fd677bfe497b669febdaee9e74947808526a6cd30a19b3feab12c61910160405180910390a16005546001600160a01b031633146105375760405162461bcd60e51b81526004016103ca90610ddf565b6001600160a01b038216600090815260208190526040902054818110156105bb5760405162461bcd60e51b815260206004820152603260248201527f566f7563686572206f776e657220646f6573206e6f74206861766520656e6f7560448201527133b4103130b630b731b2903a3790313ab93760711b60648201526084016103ca565b6005546001600160a01b031660006105d385836106f6565b9050838110156106425760405162461bcd60e51b815260206004820152603460248201527f566f7563686572206f776e657220646964206e6f7420617070726f76656420656044820152733737bab3b41030b6b7bab73a103a3790313ab93760611b60648201526084016103ca565b61064d858386610846565b6106578585610b6d565b5050505050565b6000338161066c82866106f6565b9050838110156106cc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103ca565b61032e8286868403610721565b60003361030b8185856108c0565b60606006805461027a90610e45565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166107835760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103ca565b6001600160a01b0382166107e45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103ca565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061085284846106f6565b905060001981146108ba57818110156108ad5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103ca565b6108ba8484848403610721565b50505050565b6001600160a01b0383166109245760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103ca565b6001600160a01b0382166109865760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103ca565b6001600160a01b038316600090815260208190526040902054818110156109fe5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103ca565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610a35908490610e16565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a8191815260200190565b60405180910390a36108ba565b6001600160a01b038216610ae45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103ca565b8060026000828254610af69190610e16565b90915550506001600160a01b03821660009081526020819052604081208054839290610b23908490610e16565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610bcd5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103ca565b6001600160a01b03821660009081526020819052604090205481811015610c415760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103ca565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610c70908490610e2e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610839565b80356001600160a01b0381168114610cca57600080fd5b919050565b600060208284031215610ce157600080fd5b610cea82610cb3565b9392505050565b60008060408385031215610d0457600080fd5b610d0d83610cb3565b9150610d1b60208401610cb3565b90509250929050565b600080600060608486031215610d3957600080fd5b610d4284610cb3565b9250610d5060208501610cb3565b9150604084013590509250925092565b60008060408385031215610d7357600080fd5b610d7c83610cb3565b946020939093013593505050565b600060208083528351808285015260005b81811015610db757858101830151858201604001528201610d9b565b81811115610dc9576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b60008219821115610e2957610e29610e80565b500190565b600082821015610e4057610e40610e80565b500390565b600181811c90821680610e5957607f821691505b60208210811415610e7a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205a066009fb40cab58f1cefe2f759a41161f54ba5fa7127eb246a5fb54bb8758164736f6c63430008070033a2646970667358221220c55f0790dc000ad6b472170f30e8d5fea425a8c5582a4a44e5f5cf8cfa1e650f64736f6c63430008070033",
}

// TestSubchainTNT20TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use TestSubchainTNT20TokenBankMetaData.ABI instead.
var TestSubchainTNT20TokenBankABI = TestSubchainTNT20TokenBankMetaData.ABI

// TestSubchainTNT20TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestSubchainTNT20TokenBankMetaData.Bin instead.
var TestSubchainTNT20TokenBankBin = TestSubchainTNT20TokenBankMetaData.Bin

// DeployTestSubchainTNT20TokenBank deploys a new Ethereum contract, binding an instance of TestSubchainTNT20TokenBank to it.
func DeployTestSubchainTNT20TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TestSubchainTNT20TokenBank, error) {
	parsed, err := TestSubchainTNT20TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestSubchainTNT20TokenBankBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestSubchainTNT20TokenBank{TestSubchainTNT20TokenBankCaller: TestSubchainTNT20TokenBankCaller{contract: contract}, TestSubchainTNT20TokenBankTransactor: TestSubchainTNT20TokenBankTransactor{contract: contract}, TestSubchainTNT20TokenBankFilterer: TestSubchainTNT20TokenBankFilterer{contract: contract}}, nil
}

// TestSubchainTNT20TokenBank is an auto generated Go binding around an Ethereum contract.
type TestSubchainTNT20TokenBank struct {
	TestSubchainTNT20TokenBankCaller     // Read-only binding to the contract
	TestSubchainTNT20TokenBankTransactor // Write-only binding to the contract
	TestSubchainTNT20TokenBankFilterer   // Log filterer for contract events
}

// TestSubchainTNT20TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestSubchainTNT20TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestSubchainTNT20TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestSubchainTNT20TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestSubchainTNT20TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestSubchainTNT20TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestSubchainTNT20TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestSubchainTNT20TokenBankSession struct {
	Contract     *TestSubchainTNT20TokenBank // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// TestSubchainTNT20TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestSubchainTNT20TokenBankCallerSession struct {
	Contract *TestSubchainTNT20TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// TestSubchainTNT20TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestSubchainTNT20TokenBankTransactorSession struct {
	Contract     *TestSubchainTNT20TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// TestSubchainTNT20TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestSubchainTNT20TokenBankRaw struct {
	Contract *TestSubchainTNT20TokenBank // Generic contract binding to access the raw methods on
}

// TestSubchainTNT20TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestSubchainTNT20TokenBankCallerRaw struct {
	Contract *TestSubchainTNT20TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// TestSubchainTNT20TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestSubchainTNT20TokenBankTransactorRaw struct {
	Contract *TestSubchainTNT20TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTestSubchainTNT20TokenBank creates a new instance of TestSubchainTNT20TokenBank, bound to a specific deployed contract.
func NewTestSubchainTNT20TokenBank(address common.Address, backend bind.ContractBackend) (*TestSubchainTNT20TokenBank, error) {
	contract, err := bindTestSubchainTNT20TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestSubchainTNT20TokenBank{TestSubchainTNT20TokenBankCaller: TestSubchainTNT20TokenBankCaller{contract: contract}, TestSubchainTNT20TokenBankTransactor: TestSubchainTNT20TokenBankTransactor{contract: contract}, TestSubchainTNT20TokenBankFilterer: TestSubchainTNT20TokenBankFilterer{contract: contract}}, nil
}

// NewTestSubchainTNT20TokenBankCaller creates a new read-only instance of TestSubchainTNT20TokenBank, bound to a specific deployed contract.
func NewTestSubchainTNT20TokenBankCaller(address common.Address, caller bind.ContractCaller) (*TestSubchainTNT20TokenBankCaller, error) {
	contract, err := bindTestSubchainTNT20TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestSubchainTNT20TokenBankCaller{contract: contract}, nil
}

// NewTestSubchainTNT20TokenBankTransactor creates a new write-only instance of TestSubchainTNT20TokenBank, bound to a specific deployed contract.
func NewTestSubchainTNT20TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*TestSubchainTNT20TokenBankTransactor, error) {
	contract, err := bindTestSubchainTNT20TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestSubchainTNT20TokenBankTransactor{contract: contract}, nil
}

// NewTestSubchainTNT20TokenBankFilterer creates a new log filterer instance of TestSubchainTNT20TokenBank, bound to a specific deployed contract.
func NewTestSubchainTNT20TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*TestSubchainTNT20TokenBankFilterer, error) {
	contract, err := bindTestSubchainTNT20TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestSubchainTNT20TokenBankFilterer{contract: contract}, nil
}

// bindTestSubchainTNT20TokenBank binds a generic wrapper to an already deployed contract.
func bindTestSubchainTNT20TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestSubchainTNT20TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestSubchainTNT20TokenBank.Contract.TestSubchainTNT20TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.TestSubchainTNT20TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.TestSubchainTNT20TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestSubchainTNT20TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.contract.Transact(opts, method, params...)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) AllDenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "allDenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TestSubchainTNT20TokenBank.Contract.AllDenoms(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TestSubchainTNT20TokenBank.Contract.AllDenoms(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) AllVouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "allVouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TestSubchainTNT20TokenBank.Contract.AllVouchers(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TestSubchainTNT20TokenBank.Contract.AllVouchers(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) DenomToVoucherLookup(opts *bind.CallOpts, arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "denomToVoucherLookup", arg0)

	outstruct := new(struct {
		ContractAddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TestSubchainTNT20TokenBank.Contract.DenomToVoucherLookup(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TestSubchainTNT20TokenBank.Contract.DenomToVoucherLookup(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) Exists(denom string) (bool, error) {
	return _TestSubchainTNT20TokenBank.Contract.Exists(&_TestSubchainTNT20TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _TestSubchainTNT20TokenBank.Contract.Exists(&_TestSubchainTNT20TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) Exists0(opts *bind.CallOpts, voucherAddress common.Address) (bool, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "exists0", voucherAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TestSubchainTNT20TokenBank.Contract.Exists0(&_TestSubchainTNT20TokenBank.CallOpts, voucherAddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TestSubchainTNT20TokenBank.Contract.Exists0(&_TestSubchainTNT20TokenBank.CallOpts, voucherAddress)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) GetDenom(opts *bind.CallOpts, voucherContractAddr common.Address) (string, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "getDenom", voucherContractAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TestSubchainTNT20TokenBank.Contract.GetDenom(&_TestSubchainTNT20TokenBank.CallOpts, voucherContractAddr)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TestSubchainTNT20TokenBank.Contract.GetDenom(&_TestSubchainTNT20TokenBank.CallOpts, voucherContractAddr)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) GetMaxProcessedTokenLockNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "getMaxProcessedTokenLockNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TestSubchainTNT20TokenBank.CallOpts, chainID)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TestSubchainTNT20TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) GetMaxProcessedVoucherBurnNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "getMaxProcessedVoucherBurnNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TestSubchainTNT20TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TestSubchainTNT20TokenBank.CallOpts, chainID)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) GetVoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "getVoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) GetVoucher(denom string) (common.Address, error) {
	return _TestSubchainTNT20TokenBank.Contract.GetVoucher(&_TestSubchainTNT20TokenBank.CallOpts, denom)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) GetVoucher(denom string) (common.Address, error) {
	return _TestSubchainTNT20TokenBank.Contract.GetVoucher(&_TestSubchainTNT20TokenBank.CallOpts, denom)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) MainchainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "mainchainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) MainchainID() (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.MainchainID(&_TestSubchainTNT20TokenBank.CallOpts)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) MainchainID() (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.MainchainID(&_TestSubchainTNT20TokenBank.CallOpts)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) TokenLockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "tokenLockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.TokenLockNonceMap(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.TokenLockNonceMap(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) TokenLockVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "tokenLockVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TestSubchainTNT20TokenBank.Contract.TokenLockVotingRecords(&_TestSubchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TestSubchainTNT20TokenBank.Contract.TokenLockVotingRecords(&_TestSubchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) TokenUnlockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "tokenUnlockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.TokenUnlockNonceMap(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.TokenUnlockNonceMap(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x3f1a8aa8.
//
// Solidity: function totalLockedAmounts(uint256 , address ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) TotalLockedAmounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "totalLockedAmounts", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x3f1a8aa8.
//
// Solidity: function totalLockedAmounts(uint256 , address ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.TotalLockedAmounts(&_TestSubchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x3f1a8aa8.
//
// Solidity: function totalLockedAmounts(uint256 , address ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.TotalLockedAmounts(&_TestSubchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) VoucherAddressToDenomLookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "voucherAddressToDenomLookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TestSubchainTNT20TokenBank.Contract.VoucherAddressToDenomLookup(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TestSubchainTNT20TokenBank.Contract.VoucherAddressToDenomLookup(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) VoucherBurnNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "voucherBurnNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.VoucherBurnNonceMap(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.VoucherBurnNonceMap(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) VoucherBurnVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "voucherBurnVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TestSubchainTNT20TokenBank.Contract.VoucherBurnVotingRecords(&_TestSubchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TestSubchainTNT20TokenBank.Contract.VoucherBurnVotingRecords(&_TestSubchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCaller) VoucherMintNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TestSubchainTNT20TokenBank.contract.Call(opts, &out, "voucherMintNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.VoucherMintNonceMap(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankCallerSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TestSubchainTNT20TokenBank.Contract.VoucherMintNonceMap(&_TestSubchainTNT20TokenBank.CallOpts, arg0)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 burnedAmount) payable returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankTransactor) BurnVouchers(opts *bind.TransactOpts, sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, burnedAmount *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.contract.Transact(opts, "burnVouchers", sourceChainVoucherContractAddr, targetChainTokenReceiver, burnedAmount)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 burnedAmount) payable returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, burnedAmount *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.BurnVouchers(&_TestSubchainTNT20TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, burnedAmount)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 burnedAmount) payable returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankTransactorSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, burnedAmount *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.BurnVouchers(&_TestSubchainTNT20TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, burnedAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 lockAmount) payable returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankTransactor) LockTokens(opts *bind.TransactOpts, targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, lockAmount *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.contract.Transact(opts, "lockTokens", targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, lockAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 lockAmount) payable returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) LockTokens(targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, lockAmount *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.LockTokens(&_TestSubchainTNT20TokenBank.TransactOpts, targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, lockAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 lockAmount) payable returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankTransactorSession) LockTokens(targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, lockAmount *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.LockTokens(&_TestSubchainTNT20TokenBank.TransactOpts, targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, lockAmount)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x9d3a0f0c.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, uint8 decimals, address targetChainVoucherReceiver, uint256 mintedAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankTransactor) MintVouchers(opts *bind.TransactOpts, denom string, name string, symbol string, decimals uint8, targetChainVoucherReceiver common.Address, mintedAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.contract.Transact(opts, "mintVouchers", denom, name, symbol, decimals, targetChainVoucherReceiver, mintedAmount, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x9d3a0f0c.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, uint8 decimals, address targetChainVoucherReceiver, uint256 mintedAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) MintVouchers(denom string, name string, symbol string, decimals uint8, targetChainVoucherReceiver common.Address, mintedAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.MintVouchers(&_TestSubchainTNT20TokenBank.TransactOpts, denom, name, symbol, decimals, targetChainVoucherReceiver, mintedAmount, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x9d3a0f0c.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, uint8 decimals, address targetChainVoucherReceiver, uint256 mintedAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankTransactorSession) MintVouchers(denom string, name string, symbol string, decimals uint8, targetChainVoucherReceiver common.Address, mintedAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.MintVouchers(&_TestSubchainTNT20TokenBank.TransactOpts, denom, name, symbol, decimals, targetChainVoucherReceiver, mintedAmount, dynasty, sourceChainTokenLockNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) payable returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankTransactor) UnlockTokens(opts *bind.TransactOpts, sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.contract.Transact(opts, "unlockTokens", sourceChainID, denom, targetChainTokenReceiver, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) payable returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.UnlockTokens(&_TestSubchainTNT20TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) payable returns()
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankTransactorSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TestSubchainTNT20TokenBank.Contract.UnlockTokens(&_TestSubchainTNT20TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// TestSubchainTNT20TokenBankTNT20TokenLockedIterator is returned from FilterTNT20TokenLocked and is used to iterate over the raw logs and unpacked data for TNT20TokenLocked events raised by the TestSubchainTNT20TokenBank contract.
type TestSubchainTNT20TokenBankTNT20TokenLockedIterator struct {
	Event *TestSubchainTNT20TokenBankTNT20TokenLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestSubchainTNT20TokenBankTNT20TokenLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestSubchainTNT20TokenBankTNT20TokenLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestSubchainTNT20TokenBankTNT20TokenLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestSubchainTNT20TokenBankTNT20TokenLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestSubchainTNT20TokenBankTNT20TokenLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestSubchainTNT20TokenBankTNT20TokenLocked represents a TNT20TokenLocked event raised by the TestSubchainTNT20TokenBank contract.
type TestSubchainTNT20TokenBankTNT20TokenLocked struct {
	Denom                      string
	SourceChainTokenSender     common.Address
	TargetChainID              *big.Int
	TargetChainVoucherReceiver common.Address
	LockedAmount               *big.Int
	Name                       string
	Symbol                     string
	Decimal                    uint8
	TokenLockNonce             *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT20TokenLocked is a free log retrieval operation binding the contract event 0xe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb.
//
// Solidity: event TNT20TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 lockedAmount, string name, string symbol, uint8 decimal, uint256 tokenLockNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) FilterTNT20TokenLocked(opts *bind.FilterOpts) (*TestSubchainTNT20TokenBankTNT20TokenLockedIterator, error) {

	logs, sub, err := _TestSubchainTNT20TokenBank.contract.FilterLogs(opts, "TNT20TokenLocked")
	if err != nil {
		return nil, err
	}
	return &TestSubchainTNT20TokenBankTNT20TokenLockedIterator{contract: _TestSubchainTNT20TokenBank.contract, event: "TNT20TokenLocked", logs: logs, sub: sub}, nil
}

// WatchTNT20TokenLocked is a free log subscription operation binding the contract event 0xe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb.
//
// Solidity: event TNT20TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 lockedAmount, string name, string symbol, uint8 decimal, uint256 tokenLockNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) WatchTNT20TokenLocked(opts *bind.WatchOpts, sink chan<- *TestSubchainTNT20TokenBankTNT20TokenLocked) (event.Subscription, error) {

	logs, sub, err := _TestSubchainTNT20TokenBank.contract.WatchLogs(opts, "TNT20TokenLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestSubchainTNT20TokenBankTNT20TokenLocked)
				if err := _TestSubchainTNT20TokenBank.contract.UnpackLog(event, "TNT20TokenLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20TokenLocked is a log parse operation binding the contract event 0xe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb.
//
// Solidity: event TNT20TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 lockedAmount, string name, string symbol, uint8 decimal, uint256 tokenLockNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) ParseTNT20TokenLocked(log types.Log) (*TestSubchainTNT20TokenBankTNT20TokenLocked, error) {
	event := new(TestSubchainTNT20TokenBankTNT20TokenLocked)
	if err := _TestSubchainTNT20TokenBank.contract.UnpackLog(event, "TNT20TokenLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestSubchainTNT20TokenBankTNT20TokenUnlockedIterator is returned from FilterTNT20TokenUnlocked and is used to iterate over the raw logs and unpacked data for TNT20TokenUnlocked events raised by the TestSubchainTNT20TokenBank contract.
type TestSubchainTNT20TokenBankTNT20TokenUnlockedIterator struct {
	Event *TestSubchainTNT20TokenBankTNT20TokenUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestSubchainTNT20TokenBankTNT20TokenUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestSubchainTNT20TokenBankTNT20TokenUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestSubchainTNT20TokenBankTNT20TokenUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestSubchainTNT20TokenBankTNT20TokenUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestSubchainTNT20TokenBankTNT20TokenUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestSubchainTNT20TokenBankTNT20TokenUnlocked represents a TNT20TokenUnlocked event raised by the TestSubchainTNT20TokenBank contract.
type TestSubchainTNT20TokenBankTNT20TokenUnlocked struct {
	Denom                       string
	TargetChainTokenReceiver    common.Address
	UnlockedAmount              *big.Int
	SourceChainVoucherBurnNonce *big.Int
	TokenUnlockNonce            *big.Int
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterTNT20TokenUnlocked is a free log retrieval operation binding the contract event 0x189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb.
//
// Solidity: event TNT20TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) FilterTNT20TokenUnlocked(opts *bind.FilterOpts) (*TestSubchainTNT20TokenBankTNT20TokenUnlockedIterator, error) {

	logs, sub, err := _TestSubchainTNT20TokenBank.contract.FilterLogs(opts, "TNT20TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return &TestSubchainTNT20TokenBankTNT20TokenUnlockedIterator{contract: _TestSubchainTNT20TokenBank.contract, event: "TNT20TokenUnlocked", logs: logs, sub: sub}, nil
}

// WatchTNT20TokenUnlocked is a free log subscription operation binding the contract event 0x189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb.
//
// Solidity: event TNT20TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) WatchTNT20TokenUnlocked(opts *bind.WatchOpts, sink chan<- *TestSubchainTNT20TokenBankTNT20TokenUnlocked) (event.Subscription, error) {

	logs, sub, err := _TestSubchainTNT20TokenBank.contract.WatchLogs(opts, "TNT20TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestSubchainTNT20TokenBankTNT20TokenUnlocked)
				if err := _TestSubchainTNT20TokenBank.contract.UnpackLog(event, "TNT20TokenUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20TokenUnlocked is a log parse operation binding the contract event 0x189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb.
//
// Solidity: event TNT20TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) ParseTNT20TokenUnlocked(log types.Log) (*TestSubchainTNT20TokenBankTNT20TokenUnlocked, error) {
	event := new(TestSubchainTNT20TokenBankTNT20TokenUnlocked)
	if err := _TestSubchainTNT20TokenBank.contract.UnpackLog(event, "TNT20TokenUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestSubchainTNT20TokenBankTNT20VoucherBurnedIterator is returned from FilterTNT20VoucherBurned and is used to iterate over the raw logs and unpacked data for TNT20VoucherBurned events raised by the TestSubchainTNT20TokenBank contract.
type TestSubchainTNT20TokenBankTNT20VoucherBurnedIterator struct {
	Event *TestSubchainTNT20TokenBankTNT20VoucherBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestSubchainTNT20TokenBankTNT20VoucherBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestSubchainTNT20TokenBankTNT20VoucherBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestSubchainTNT20TokenBankTNT20VoucherBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestSubchainTNT20TokenBankTNT20VoucherBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestSubchainTNT20TokenBankTNT20VoucherBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestSubchainTNT20TokenBankTNT20VoucherBurned represents a TNT20VoucherBurned event raised by the TestSubchainTNT20TokenBank contract.
type TestSubchainTNT20TokenBankTNT20VoucherBurned struct {
	Denom                    string
	SourceChainVoucherOwner  common.Address
	TargetChainTokenReceiver common.Address
	BurnedAmount             *big.Int
	VoucherBurnNonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTNT20VoucherBurned is a free log retrieval operation binding the contract event 0x8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d.
//
// Solidity: event TNT20VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) FilterTNT20VoucherBurned(opts *bind.FilterOpts) (*TestSubchainTNT20TokenBankTNT20VoucherBurnedIterator, error) {

	logs, sub, err := _TestSubchainTNT20TokenBank.contract.FilterLogs(opts, "TNT20VoucherBurned")
	if err != nil {
		return nil, err
	}
	return &TestSubchainTNT20TokenBankTNT20VoucherBurnedIterator{contract: _TestSubchainTNT20TokenBank.contract, event: "TNT20VoucherBurned", logs: logs, sub: sub}, nil
}

// WatchTNT20VoucherBurned is a free log subscription operation binding the contract event 0x8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d.
//
// Solidity: event TNT20VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) WatchTNT20VoucherBurned(opts *bind.WatchOpts, sink chan<- *TestSubchainTNT20TokenBankTNT20VoucherBurned) (event.Subscription, error) {

	logs, sub, err := _TestSubchainTNT20TokenBank.contract.WatchLogs(opts, "TNT20VoucherBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestSubchainTNT20TokenBankTNT20VoucherBurned)
				if err := _TestSubchainTNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20VoucherBurned is a log parse operation binding the contract event 0x8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d.
//
// Solidity: event TNT20VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) ParseTNT20VoucherBurned(log types.Log) (*TestSubchainTNT20TokenBankTNT20VoucherBurned, error) {
	event := new(TestSubchainTNT20TokenBankTNT20VoucherBurned)
	if err := _TestSubchainTNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TestSubchainTNT20TokenBankTNT20VoucherMintedIterator is returned from FilterTNT20VoucherMinted and is used to iterate over the raw logs and unpacked data for TNT20VoucherMinted events raised by the TestSubchainTNT20TokenBank contract.
type TestSubchainTNT20TokenBankTNT20VoucherMintedIterator struct {
	Event *TestSubchainTNT20TokenBankTNT20VoucherMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestSubchainTNT20TokenBankTNT20VoucherMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestSubchainTNT20TokenBankTNT20VoucherMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestSubchainTNT20TokenBankTNT20VoucherMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestSubchainTNT20TokenBankTNT20VoucherMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestSubchainTNT20TokenBankTNT20VoucherMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestSubchainTNT20TokenBankTNT20VoucherMinted represents a TNT20VoucherMinted event raised by the TestSubchainTNT20TokenBank contract.
type TestSubchainTNT20TokenBankTNT20VoucherMinted struct {
	Denom                      string
	TargetChainVoucherReceiver common.Address
	VoucherContact             common.Address
	MintedAmount               *big.Int
	SourceChainTokenLockNonce  *big.Int
	VoucherMintNonce           *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT20VoucherMinted is a free log retrieval operation binding the contract event 0x5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf08.
//
// Solidity: event TNT20VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContact, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) FilterTNT20VoucherMinted(opts *bind.FilterOpts) (*TestSubchainTNT20TokenBankTNT20VoucherMintedIterator, error) {

	logs, sub, err := _TestSubchainTNT20TokenBank.contract.FilterLogs(opts, "TNT20VoucherMinted")
	if err != nil {
		return nil, err
	}
	return &TestSubchainTNT20TokenBankTNT20VoucherMintedIterator{contract: _TestSubchainTNT20TokenBank.contract, event: "TNT20VoucherMinted", logs: logs, sub: sub}, nil
}

// WatchTNT20VoucherMinted is a free log subscription operation binding the contract event 0x5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf08.
//
// Solidity: event TNT20VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContact, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) WatchTNT20VoucherMinted(opts *bind.WatchOpts, sink chan<- *TestSubchainTNT20TokenBankTNT20VoucherMinted) (event.Subscription, error) {

	logs, sub, err := _TestSubchainTNT20TokenBank.contract.WatchLogs(opts, "TNT20VoucherMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestSubchainTNT20TokenBankTNT20VoucherMinted)
				if err := _TestSubchainTNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20VoucherMinted is a log parse operation binding the contract event 0x5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf08.
//
// Solidity: event TNT20VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContact, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TestSubchainTNT20TokenBank *TestSubchainTNT20TokenBankFilterer) ParseTNT20VoucherMinted(log types.Log) (*TestSubchainTNT20TokenBankTNT20VoucherMinted, error) {
	event := new(TestSubchainTNT20TokenBankTNT20VoucherMinted)
	if err := _TestSubchainTNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
