// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TNT1155TokenBankMetaData contains all meta data concerning the TNT1155TokenBank contract.
var TNT1155TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mainchainID_\",\"type\":\"uint256\"},{\"internalType\":\"contractChainRegistrar\",\"name\":\"chainRegistrar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedToSendTFuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainTokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"name\":\"TNT1155TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenUnlockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT1155TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainVoucherOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherBurnNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"}],\"name\":\"TNT1155VoucherBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voucherContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherMintNonce\",\"type\":\"uint256\"}],\"name\":\"TNT1155VoucherMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDenoms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVouchers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomToVoucherLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherAddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"getAdjustedValidatorSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherContractAddr\",\"type\":\"address\"}],\"name\":\"getDenom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedTokenLockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedVoucherBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNonce\",\"type\":\"uint256\"}],\"name\":\"getTokenLockEventHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getVoucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNonce\",\"type\":\"uint256\"}],\"name\":\"getVoucherBurnEventHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenLockVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUnlockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalLockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucherAddressToDenomLookup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherBurnNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherBurnVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherMintNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceChainTNT1155Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transferBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uriForm\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"name\":\"mintVouchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceChainVoucherContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"}],\"name\":\"burnVouchers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200661e3803806200661e833981016040819052620000349162000064565b6001600081905591909155600280546001600160a01b0319166001600160a01b03909216919091179055620000a3565b600080604083850312156200007857600080fd5b825160208401519092506001600160a01b03811681146200009857600080fd5b809150509250929050565b61656b80620000b36000396000f3fe608060405260043610620001975760003560e01c80638883931e11620000dd578063ccf187c71162000084578063ccf187c714620005e5578063dd17eb6d1462000616578063ebda99621462000652578063f23a6e611462000677578063f6a3d24e14620006a7578063f95627ac14620006e7578063feaff052146200071857600080fd5b80638883931e14620004865780639c67257d14620004b7578063a2cc698114620004f9578063aa861c15146200051e578063abe7ce9c1462000553578063bc197c81146200056a578063ca20756914620005b457600080fd5b8063302ec0421162000142578063302ec0421462000343578063588b1408146200036857806360569b5e146200039c57806361d0708914620003d15780636ac739b914620003e8578063740cb7f81462000424578063766f8fb0146200045557600080fd5b806301ffc9a7146200019c578063073b950214620001d6578063090601b014620001fd5780631527b14d14620002165780631eb787371462000287578063261a323e14620002e057806327ca4df11462000305575b600080fd5b348015620001a957600080fd5b50620001c1620001bb36600462003600565b6200075b565b60405190151581526020015b60405180910390f35b348015620001e357600080fd5b50620001ee60015481565b604051908152602001620001cd565b620002146200020e36600462003499565b62000793565b005b3480156200022357600080fd5b5062000267620002353660046200362c565b8051602081830181018051600d825292820191909301209152546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b039093168352901515602083015201620001cd565b3480156200029457600080fd5b50620002ca620002a6366004620038fc565b600b6020908152600092835260408084209091529082529020805460029091015482565b60408051928352602083019190915201620001cd565b348015620002ed57600080fd5b50620001c1620002ff3660046200362c565b62000b53565b3480156200031257600080fd5b506200032a62000324366004620037ae565b62000b97565b6040516001600160a01b039091168152602001620001cd565b3480156200035057600080fd5b506200021462000362366004620036e3565b62000bc2565b3480156200037557600080fd5b506200038d62000387366004620037ae565b62000ec6565b604051620001cd919062003c2f565b348015620003a957600080fd5b50620003c1620003bb3660046200339e565b62000f7b565b604051620001cd92919062003dc2565b62000214620003e2366004620037e2565b6200102a565b348015620003f557600080fd5b50620001ee62000407366004620038fc565b600091825260086020908152604080842092845291905290205490565b3480156200043157600080fd5b50620001ee62000443366004620037ae565b60066020526000908152604090205481565b3480156200046257600080fd5b50620001ee62000474366004620037ae565b6000908152600a602052604090205490565b3480156200049357600080fd5b50620001ee620004a5366004620037ae565b60036020526000908152604090205481565b348015620004c457600080fd5b50620001ee620004d636600462003892565b601160209081526000938452604080852082529284528284209052825290205481565b3480156200050657600080fd5b506200032a620005183660046200362c565b62001406565b3480156200052b57600080fd5b50620005436200053d366004620038fc565b6200147c565b604051620001cd92919062003bb4565b62000214620005643660046200391f565b62001736565b3480156200057757600080fd5b506200059a62000589366004620033de565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001620001cd565b348015620005c157600080fd5b50620001ee620005d3366004620037ae565b60056020526000908152604090205481565b348015620005f257600080fd5b50620001ee62000604366004620037ae565b60046020526000908152604090205481565b3480156200062357600080fd5b50620001ee62000635366004620038fc565b600091825260076020908152604080842092845291905290205490565b3480156200065f57600080fd5b506200038d620006713660046200339e565b620019b7565b3480156200068457600080fd5b506200059a6200069636600462003499565b63f23a6e6160e01b95945050505050565b348015620006b457600080fd5b50620001c1620006c63660046200339e565b6001600160a01b03166000908152600e602052604090206001015460ff1690565b348015620006f457600080fd5b50620001ee62000706366004620037ae565b60009081526009602052604090205490565b3480156200072557600080fd5b50620002ca62000737366004620038fc565b600c6020908152600092835260408084209091529082529020805460029091015482565b60006001600160e01b03198216630271189760e51b14806200078d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60026000541415620007c25760405162461bcd60e51b8152600401620007b99062003e8a565b60405180910390fd5b60026000556001600160a01b038416620007f05760405162461bcd60e51b8152600401620007b99062003de8565b6040516375ed4cb160e11b81526001600160a01b0386166004820152600090309063ebda99629060240160006040518083038186803b1580156200083357600080fd5b505afa15801562000848573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000872919081019062003664565b9050805160001415620008e05760405162461bcd60e51b815260206004820152602f60248201527f6661696c656420746f206c6f6f6b75702064656e6f6d20666f7220746865207660448201526e1bdd58da195c8818dbdb9d1c9858dd608a1b6064820152608401620007b9565b60405163130d191f60e11b8152309063261a323e906200090590849060040162003c2f565b60206040518083038186803b1580156200091e57600080fd5b505afa15801562000933573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009599190620035e2565b620009a75760405162461bcd60e51b815260206004820152601f60248201527f566f756368657220636f6e747261637420646f6573206e6f74206578697374006044820152606401620007b9565b33620009b68782878762001ab7565b600080620009c48462001b2c565b915091508062000a2a5760405162461bcd60e51b815260206004820152602a60248201527f4661696c656420746f206578747261637420746172676574436861696e49442060448201526966726f6d2064656e6f6d60b01b6064820152608401620007b9565b62000a358262001bbd565b600082815260056020526040908190205490517fff848610ed51b081087d026cd710fa5216db9c1bb56c1e81cecc987417563b3b9062000a8390879087908d908d908d9088908e9062003c44565b60405180910390a1600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ada57600080fd5b505afa15801562000aef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b159190620037c8565b34101562000b375760405162461bcd60e51b8152600401620007b99062003e1f565b62000b428362001c08565b505060016000555050505050505050565b60008062000b618362002059565b9050600d8160405162000b759190620039df565b9081526040519081900360200190205460ff600160a01b909104169392505050565b600f818154811062000ba857600080fd5b6000918252602090912001546001600160a01b0316905081565b6002600054141562000be85760405162461bcd60e51b8152600401620007b99062003e8a565b6002600090815562000bfa8962002059565b905060008062000c0a8362001b2c565b915091508062000c695760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f206578747261637420636861696e49442066726f6d2064604482015263656e6f6d60e01b6064820152608401620007b9565b600082848b8b8b8b8b60405160200162000c8a979695949392919062003a5d565b604051602081830303815290604052805190602001209050600062000cb38489848a3362002066565b9050801562000eb25760405163130d191f60e11b8152309063261a323e9062000ce190889060040162003c2f565b60206040518083038186803b15801562000cfa57600080fd5b505afa15801562000d0f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d359190620035e2565b62000d515762000d518562000d4b878f62002085565b620020d3565b60405163a2cc698160e01b8152600090309063a2cc69819062000d7990899060040162003c2f565b60206040518083038186803b15801562000d9257600080fd5b505afa15801562000da7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dcd9190620033be565b90506001600160a01b03811662000e385760405162461bcd60e51b815260206004820152602860248201527f74686520766f756368657220666f72207468652064656e6f6d20646f6573206e6044820152671bdd08195e1a5cdd60c21b6064820152608401620007b9565b62000e47818d8d8d8b620022fd565b62000e528562002363565b6000600660008781526020019081526020016000205490507f4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53878e848f8f8e8760405162000ea7979695949392919062003ca7565b60405180910390a150505b505060016000555050505050505050505050565b6010818154811062000ed757600080fd5b90600052602060002001600091509050805462000ef490620040d4565b80601f016020809104026020016040519081016040528092919081815260200182805462000f2290620040d4565b801562000f735780601f1062000f475761010080835404028352916020019162000f73565b820191906000526020600020905b81548152906001019060200180831162000f5557829003601f168201915b505050505081565b600e6020526000908152604090208054819062000f9890620040d4565b80601f016020809104026020016040519081016040528092919081815260200182805462000fc690620040d4565b8015620010175780601f1062000feb5761010080835404028352916020019162001017565b820191906000526020600020905b81548152906001019060200180831162000ff957829003601f168201915b5050506001909301549192505060ff1682565b60026000541415620010505760405162461bcd60e51b8152600401620007b99062003e8a565b60026000556001600160a01b0385166200107e5760405162461bcd60e51b8152600401620007b99062003de8565b6001548714806200110a57506002546040516343b71f0560e01b8152600481018990526001600160a01b03909116906343b71f059060240160206040518083038186803b158015620010cf57600080fd5b505afa158015620010e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200110a9190620035e2565b620011545760405162461bcd60e51b81526020600482015260196024820152781b9bdd0818481d985b1a59081d185c99d95d10da185a5b9251603a1b6044820152606401620007b9565b604051637921219560e11b815286906001600160a01b0382169063f242432a906200118c90339030908a908a908a9060040162003b0f565b600060405180830381600087803b158015620011a757600080fd5b505af1158015620011bc573d6000803e3d6000fd5b5050505060006200120046604051806040016040528060048152602001633131353560e01b815250620011fa8b6001600160a01b031660146200238c565b6200254c565b60008a81526011602090815260408083206001600160a01b038d16845282528083208a84529091529020549091506200123a908662002590565b60008a81526011602090815260408083206001600160a01b038d16845282528083208a845290915290205562001270896200259e565b600089815260036020526040908190205490516303a24d0760e21b8152600481018890527f3e4c154c420b8aa393cfab67e386d5d7d889fe7ba59c1d838391e9060826e2ec90839033908d908c908c908c906001600160a01b038b1690630e89341c9060240160006040518083038186803b158015620012ef57600080fd5b505afa15801562001304573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200132e919081019062003664565b888c604051620013479998979695949392919062003cf6565b60405180910390a1600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200139e57600080fd5b505afa158015620013b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013d99190620037c8565b341015620013fb5760405162461bcd60e51b8152600401620007b99062003e1f565b62000b428a62001c08565b600080620014148362002059565b90506000600d826040516200142a9190620039df565b908152604080516020928190038301812081830190925290546001600160a01b0381168252600160a01b900460ff161580159282019290925291506200147257519392505050565b5060009392505050565b6060806000600154461490506000600260009054906101000a90046001600160a01b03166001600160a01b031663a7464b126040518163ffffffff1660e01b815260040160206040518083038186803b158015620014d957600080fd5b505afa158015620014ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015149190620037c8565b600254604051632f2c13b560e01b81526004810189905291925060009182916001600160a01b031690632f2c13b590602401604080518083038186803b1580156200155e57600080fd5b505afa15801562001573573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015999190620038cd565b915091506000818015620015b85750620015b48885620025e9565b8310155b8015620015dc5750620015d984620015d28a600162002590565b90620025e9565b83105b9050848015620015e95750805b156200169a576000620015fe89600162002590565b6002546040516343f27e4560e01b8152600481018d9052602481018390529192506001600160a01b0316906343f27e459060440160006040518083038186803b1580156200164b57600080fd5b505afa15801562001660573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200168a919081019062003509565b975097505050505050506200172f565b6002546040516343f27e4560e01b8152600481018b9052602481018a90526001600160a01b03909116906343f27e459060440160006040518083038186803b158015620016e657600080fd5b505afa158015620016fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001725919081019062003509565b9650965050505050505b9250929050565b600260005414156200175c5760405162461bcd60e51b8152600401620007b99062003e8a565b600260009081556200176e8862002059565b90506000806200177e83620025f7565b9150915080620017e75760405162461bcd60e51b815260206004820152602d60248201527f4661696c656420746f206578747261637420636f6e747261637420616464726560448201526c73732066726f6d2064656e6f6d60981b6064820152608401620007b9565b60008b81526011602090815260408083206001600160a01b038616845282528083208b8452909152902054871115620018785760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420756e6c6f636b207468652072657175657374656420616d6f7560448201526b6e74206f6620746f6b656e7360a01b6064820152608401620007b9565b60008b848a8a8d8b8b60405160200162001899979695949392919062003ab8565b6040516020818303038152906040528051906020012090506000620018c28d89848a3362002678565b9050801562000eb257620018d98d858c8c6200268d565b604051637921219560e11b81526001600160a01b0385169063f242432a906200190f9030908f908f908f908d9060040162003b0f565b600060405180830381600087803b1580156200192a57600080fd5b505af11580156200193f573d6000803e3d6000fd5b505050506200194e8d620026f5565b60008d815260046020526040908190205490517f4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a906200199a9088908f908f908f908e90889062003d7b565b60405180910390a150505060016000555050505050505050505050565b6001600160a01b0381166000908152600e60205260408082208151808301909252805460609392919082908290620019ef90620040d4565b80601f016020809104026020016040519081016040528092919081815260200182805462001a1d90620040d4565b801562001a6e5780601f1062001a425761010080835404028352916020019162001a6e565b820191906000526020600020905b81548152906001019060200180831162001a5057829003601f168201915b50505091835250506001919091015460ff1615156020918201528101519091501562001a9b575192915050565b5050604080516020810190915260008152919050565b50919050565b604051637a94c56560e11b81526001600160a01b038481166004830152602482018490526044820183905285919082169063f5298aca90606401600060405180830381600087803b15801562001b0c57600080fd5b505af115801562001b21573d6000803e3d6000fd5b505050505050505050565b60008060008062001b4485602f60f81b600162002716565b915091508062001b5b575060009485945092505050565b60008062001b6c87600086620027b2565b915091508062001b855750600096879650945050505050565b60008062001b9384620028d4565b915091508062001bae57506000988998509650505050505050565b50976001975095505050505050565b600081815260056020526040812080546001929062001bde90849062003f72565b90915550506000908152600860209081526040808320600583528184205484529091529020439055565b600062001c1582620029bc565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001c6857600080fd5b505afa15801562001c7d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ca39190620037c8565b90508062001cb057505050565b6002546040805163dba9de6b60e01b8152815160009384936001600160a01b039091169263dba9de6b9260048083019392829003018186803b15801562001cf657600080fd5b505afa15801562001d0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d319190620038cd565b915091508062001d7c5760405162461bcd60e51b81526020600482015260156024820152746661696c656420746f206765742064796e6173747960581b6044820152606401620007b9565b60008062001d8b86856200147c565b815191935091508062001da2575050505050505050565b8082511462001e065760405162461bcd60e51b815260206004820152602960248201527f76616c696461746f7220616e6420736861726520616d6f756e7420636f756e74604482015268040dad2e6dac2e8c6d60bb1b6064820152608401620007b9565b6000805b8281101562001e5b5762001e4484828151811062001e2c5762001e2c6200416c565b6020026020010151836200259090919063ffffffff16565b91508062001e52816200410b565b91505062001e0a565b508062001e6d57505050505050505050565b8660005b8381101562001f8a57600062001eb98462001eb288858151811062001e9a5762001e9a6200416c565b60200260200101518d620025e990919063ffffffff16565b90620029d9565b905086828151811062001ed05762001ed06200416c565b60200260200101516001600160a01b03166108fc829081150290604051600060405180830381858888f1935050505062001f655786828151811062001f195762001f196200416c565b60200260200101516001600160a01b03167f562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f48858260405162001f5c91815260200190565b60405180910390a25b62001f718382620029e7565b925050808062001f81906200410b565b91505062001e71565b508462001f996001856200404b565b8151811062001fac5762001fac6200416c565b60200260200101516001600160a01b03166108fc829081150290604051600060405180830381858888f193505050506200204d578462001fee6001856200404b565b815181106200200157620020016200416c565b60200260200101516001600160a01b03167f562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885826040516200204491815260200190565b60405180910390a25b50505050505050505050565b60606200078d82620029f5565b60006200207b86868686866009600b62002a7b565b9695505050505050565b60008030905060008185856040516200209e906200319a565b620020ac9392919062003b4b565b604051809103906000f080158015620020c9573d6000803e3d6000fd5b5095945050505050565b6000620020e08362002059565b60405163130d191f60e11b8152909150309063261a323e906200210890849060040162003c2f565b60206040518083038186803b1580156200212157600080fd5b505afa15801562002136573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200215c9190620035e2565b15620021b65760405162461bcd60e51b815260206004820152602260248201527f616e20766f756368657220636f6e747261637420616c72656164792065786973604482015261747360f01b6064820152608401620007b9565b6040805180820182526001600160a01b0384168152600160208201529051600d90620021e4908490620039df565b90815260408051918290036020908101832084518154958301511515600160a01b026001600160a81b03199096166001600160a01b039182161795909517905582820182528483526001838201529285166000908152600e8452208151805192939192620022569284920190620031a8565b506020918201516001918201805460ff1916911515919091179055600f80548083019091557f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b0386161790556010805491820181556000528251620022f7927f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290920191840190620031a8565b50505050565b60405163731133e960e01b815285906001600160a01b0382169063731133e9906200233390889088908890889060040162003b85565b600060405180830381600087803b1580156200234e57600080fd5b505af11580156200204d573d6000803e3d6000fd5b60008181526006602052604081208054600192906200238490849062003f72565b909155505050565b606060006200239d83600262003ffe565b620023aa90600262003f72565b6001600160401b03811115620023c457620023c462004182565b6040519080825280601f01601f191660200182016040528015620023ef576020820181803683370190505b509050600360fc1b816000815181106200240d576200240d6200416c565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200243f576200243f6200416c565b60200101906001600160f81b031916908160001a90535060006200246584600262003ffe565b6200247290600162003f72565b90505b6001811115620024f4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620024aa57620024aa6200416c565b1a60f81b828281518110620024c357620024c36200416c565b60200101906001600160f81b031916908160001a90535060049490941c93620024ec81620040ba565b905062002475565b508315620025455760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620007b9565b9392505050565b6060620025886200255d8562002e17565b84846040516020016200257393929190620039fd565b60405160208183030381529060405262002059565b949350505050565b600062002545828462003f72565b6000818152600360205260408120805460019290620025bf90849062003f72565b90915550506000908152600760209081526040808320600383528184205484529091529020439055565b600062002545828462003ffe565b6000806000806200260f85602f60f81b600262002716565b915091508062002626575060009485945092505050565b60008062002643876200263b86600162003f72565b8951620027b2565b91509150806200265c5750600096879650945050505050565b6000620026698362002f2c565b98600198509650505050505050565b60006200207b8686868686600a600c62002a7b565b60008481526011602090815260408083206001600160a01b03871684528252808320858452909152902054620026c49082620029e7565b60009485526011602090815260408087206001600160a01b0390961687529481528486209386529290925250912055565b60008181526004602052604081208054600192906200238490849062003f72565b82516000908190859082805b828110156200279e57876001600160f81b0319168482815181106200274b576200274b6200416c565b01602001516001600160f81b031916141562002789576200276e60018362003f72565b9150868214156200278957945060019350620027aa92505050565b8062002795816200410b565b91505062002722565b50600080945094505050505b935093915050565b825160609060009084841015620027de57505060408051602081019091526000808252909150620027aa565b808411156200280257505060408051602081019091526000808252909150620027aa565b856000620028118688620029e7565b6001600160401b038111156200282b576200282b62004182565b6040519080825280601f01601f19166020018201604052801562002856576020820181803683370190505b509050865b8681101562001bae578281815181106200287957620028796200416c565b01602001516001600160f81b0319168262002895838b620029e7565b81518110620028a857620028a86200416c565b60200101906001600160f81b031916908160001a90535080620028cb816200410b565b9150506200285b565b80516000908190839082805b82811015620029af5760308482815181106200290057620029006200416c565b016020015160f81c1080159062002934575060398482815181106200292957620029296200416c565b016020015160f81c11155b156200298b576200294782600a620025e9565b91506200298360308583815181106200296457620029646200416c565b016020015162002978919060f81c62004065565b839060ff1662002590565b91506200299a565b50600096879650945050505050565b80620029a6816200410b565b915050620028e0565b5095600195509350505050565b600080600154831415620029d25750466200078d565b5090919050565b600062002545828462003fb5565b60006200254582846200404b565b60608160005b815181101562002a745762002a3382828151811062002a1e5762002a1e6200416c565b01602001516001600160f81b03191662003147565b82828151811062002a485762002a486200416c565b60200101906001600160f81b031916908160001a9053508062002a6b816200410b565b915050620029fb565b5092915050565b600060015488148062002b0957506002546040516343b71f0560e01b8152600481018a90526001600160a01b03909116906343b71f059060240160206040518083038186803b15801562002ace57600080fd5b505afa15801562002ae3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b099190620035e2565b62002b495760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b6044820152606401620007b9565b60008881526020849052604090205462002b6590600162003f72565b851462002b755750600062002e0c565b600088815260208381526040808320898452909152812060015460609081908c9081141562002ba15750465b62002bad818d6200147c565b9350915060005b825181101562002d2157896001600160a01b031683828151811062002bdd5762002bdd6200416c565b60200260200101516001600160a01b03161462002bfa5762002d0c565b6001955060005b600186015481101562002ca45785600101818154811062002c265762002c266200416c565b6000918252602090912001546001600160a01b038c81169116141562002c8f5760405162461bcd60e51b815260206004820152601c60248201527f546869732076616c696461746f7220616c726561647920766f746564000000006044820152606401620007b9565b8062002c9b816200410b565b91505062002c01565b508c85556001808601805491820181556000908152602090200180546001600160a01b03191633179055835162002d069085908390811062002cea5762002cea6200416c565b602002602001015186600201546200259090919063ffffffff16565b60028601555b8062002d18816200410b565b91505062002bb4565b5050508262002d655760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b6044820152606401620007b9565b6000805b825181101562002da35762002d8c83828151811062001e2c5762001e2c6200416c565b91508062002d9a816200410b565b91505062002d69565b5062002db1816002620025e9565b600284015462002dc3906003620025e9565b1062002e035760008c81526020889052604090205462002de590600162003f72565b60008d815260208990526040902055506001935062002e0c92505050565b60009450505050505b979650505050505050565b60608162002e3c5750506040805180820190915260018152600360fc1b602082015290565b8160005b811562002e6c578062002e53816200410b565b915062002e649050600a8362003fb5565b915062002e40565b6000816001600160401b0381111562002e895762002e8962004182565b6040519080825280601f01601f19166020018201604052801562002eb4576020820181803683370190505b5090505b8415620025885762002ecc6001836200404b565b915062002edb600a8662004129565b62002ee890603062003f72565b60f81b81838151811062002f005762002f006200416c565b60200101906001600160f81b031916908160001a90535062002f24600a8662003fb5565b945062002eb8565b60008181808060025b602a8110156200313c5762002f4d6101008562003fcc565b935084818151811062002f645762002f646200416c565b016020015160f81c92508462002f7c82600162003f72565b8151811062002f8f5762002f8f6200416c565b016020015160f81c915060616001600160a01b0384161080159062002fbe57506066836001600160a01b031611155b1562002fd95762002fd160578462004020565b92506200304c565b6041836001600160a01b03161015801562002ffe57506046836001600160a01b031611155b15620030115762002fd160378462004020565b6030836001600160a01b0316101580156200303657506039836001600160a01b031611155b156200304c576200304960308462004020565b92505b6061826001600160a01b0316101580156200307157506066826001600160a01b031611155b156200308c576200308460578362004020565b9150620030ff565b6041826001600160a01b031610158015620030b157506046826001600160a01b031611155b15620030c4576200308460378362004020565b6030826001600160a01b031610158015620030e957506039826001600160a01b031611155b15620030ff57620030fc60308362004020565b91505b816200310d84601062003fcc565b62003119919062003f44565b62003125908562003f44565b93506200313460028262003f72565b905062002f35565b509195945050505050565b6000604160f81b6001600160f81b0319831610801590620031765750602d60f91b6001600160f81b0319831611155b1562003196576200318d60f883901c602062003f8d565b60f81b92915050565b5090565b61238480620041b283390190565b828054620031b690620040d4565b90600052602060002090601f016020900481019282620031da576000855562003225565b82601f10620031f557805160ff191683800117855562003225565b8280016001018555821562003225579182015b828111156200322557825182559160200191906001019062003208565b50620031969291505b808211156200319657600081556001016200322e565b8035620032518162004198565b919050565b600082601f8301126200326857600080fd5b81356020620032816200327b8362003ef4565b62003ec1565b80838252828201915082860187848660051b8901011115620032a257600080fd5b60005b85811015620032c357813584529284019290840190600101620032a5565b5090979650505050505050565b600082601f830112620032e257600080fd5b81516020620032f56200327b8362003ef4565b80838252828201915082860187848660051b89010111156200331657600080fd5b60005b85811015620032c35781518452928401929084019060010162003319565b805180151581146200325157600080fd5b600082601f8301126200335a57600080fd5b81356200336b6200327b8262003f1a565b8181528460208386010111156200338157600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215620033b157600080fd5b8135620025458162004198565b600060208284031215620033d157600080fd5b8151620025458162004198565b600080600080600060a08688031215620033f757600080fd5b8535620034048162004198565b94506020860135620034168162004198565b935060408601356001600160401b03808211156200343357600080fd5b6200344189838a0162003256565b945060608801359150808211156200345857600080fd5b6200346689838a0162003256565b935060808801359150808211156200347d57600080fd5b506200348c8882890162003348565b9150509295509295909350565b600080600080600060a08688031215620034b257600080fd5b8535620034bf8162004198565b94506020860135620034d18162004198565b9350604086013592506060860135915060808601356001600160401b03811115620034fb57600080fd5b6200348c8882890162003348565b600080604083850312156200351d57600080fd5b82516001600160401b03808211156200353557600080fd5b818501915085601f8301126200354a57600080fd5b815160206200355d6200327b8362003ef4565b8083825282820191508286018a848660051b89010111156200357e57600080fd5b600096505b84871015620035ae578051620035998162004198565b83526001969096019591830191830162003583565b5091880151919650909350505080821115620035c957600080fd5b50620035d885828601620032d0565b9150509250929050565b600060208284031215620035f557600080fd5b620025458262003337565b6000602082840312156200361357600080fd5b81356001600160e01b0319811681146200254557600080fd5b6000602082840312156200363f57600080fd5b81356001600160401b038111156200365657600080fd5b620025888482850162003348565b6000602082840312156200367757600080fd5b81516001600160401b038111156200368e57600080fd5b8201601f81018413620036a057600080fd5b8051620036b16200327b8262003f1a565b818152856020838501011115620036c757600080fd5b620036da8260208301602086016200408b565b95945050505050565b600080600080600080600080610100898b0312156200370157600080fd5b88356001600160401b03808211156200371957600080fd5b620037278c838d0162003348565b995060208b01359150808211156200373e57600080fd5b6200374c8c838d0162003348565b98506200375c60408c0162003244565b975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b01359150808211156200378f57600080fd5b506200379e8b828c0162003348565b9150509295985092959890939650565b600060208284031215620037c157600080fd5b5035919050565b600060208284031215620037db57600080fd5b5051919050565b600080600080600080600060e0888a031215620037fe57600080fd5b873596506020880135620038128162004198565b95506040880135620038248162004198565b9450606088013593506080880135925060a08801356001600160401b03808211156200384f57600080fd5b6200385d8b838c0162003348565b935060c08a01359150808211156200387457600080fd5b50620038838a828b0162003348565b91505092959891949750929550565b600080600060608486031215620038a857600080fd5b833592506020840135620038bc8162004198565b929592945050506040919091013590565b60008060408385031215620038e157600080fd5b82519150620038f36020840162003337565b90509250929050565b600080604083850312156200391057600080fd5b50508035926020909101359150565b600080600080600080600080610100898b0312156200393d57600080fd5b8835975060208901356001600160401b03808211156200395c57600080fd5b6200396a8c838d0162003348565b985060408b013591506200397e8262004198565b90965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013590808211156200378f57600080fd5b60008151808452620039cb8160208601602086016200408b565b601f01601f19169290920160200192915050565b60008251620039f38184602087016200408b565b9190910192915050565b6000845162003a118184602089016200408b565b8083019050602f60f81b808252855162003a33816001850160208a016200408b565b6001920191820152835162003a508160028401602088016200408b565b0160020195945050505050565b8781526000875162003a77816020850160208c016200408b565b60609790971b6001600160601b03191660209290970191820196909652603481019490945260548401929092526074830152609482015260b4019392505050565b8781526000875162003ad2816020850160208c016200408b565b60209201918201969096526040810194909452606092831b6001600160601b031916928401929092526074830152609482015260b4019392505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009062002e0c90830184620039b1565b6001600160a01b038416815260606020820181905260009062003b7190830185620039b1565b82810360408401526200207b8185620039b1565b60018060a01b03851681528360208201528260408201526080606082015260006200207b6080830184620039b1565b604080825283519082018190526000906020906060840190828701845b8281101562003bf85781516001600160a01b03168452928401929084019060010162003bd1565b5050508381038285015284518082528583019183019060005b81811015620032c35783518352928401929184019160010162003c11565b602081526000620025456020830184620039b1565b60e08152600062003c5960e083018a620039b1565b6001600160a01b03898116602085015288166040840152606083018790526080830186905260a0830185905282810360c084015262003c998185620039b1565b9a9950505050505050505050565b60e08152600062003cbc60e083018a620039b1565b6001600160a01b0398891660208401529690971660408201526060810194909452608084019290925260a083015260c09091015292915050565b600061012080835262003d0c8184018d620039b1565b6001600160a01b038c81166020860152604085018c90528a1660608501526080840189905260a0840188905283810360c0850152905062003d4e8187620039b1565b90508460e084015282810361010084015262003d6b8185620039b1565b9c9b505050505050505050505050565b60c08152600062003d9060c0830189620039b1565b6001600160a01b039790971660208301525060408101949094526060840192909252608083015260a090910152919050565b60408152600062003dd76040830185620039b1565b905082151560208301529392505050565b6020808252601b908201527f63616e6e6f742073656e6420746f207a65726f20616464726573730000000000604082015260600190565b60208082526045908201527f6e6f7420656e6f75676820544675656c20286d73672e76616c75652920746f2060408201527f636f766572207468652063726f73732d636861696e207472616e73616374696f6060820152646e2066656560d81b608082015260a00190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f191681016001600160401b038111828210171562003eec5762003eec62004182565b604052919050565b60006001600160401b0382111562003f105762003f1062004182565b5060051b60200190565b60006001600160401b0382111562003f365762003f3662004182565b50601f01601f191660200190565b60006001600160a01b0382811684821680830382111562003f695762003f6962004140565b01949350505050565b6000821982111562003f885762003f8862004140565b500190565b600060ff821660ff84168060ff0382111562003fad5762003fad62004140565b019392505050565b60008262003fc75762003fc762004156565b500490565b60006001600160a01b038281168482168115158284048211161562003ff55762003ff562004140565b02949350505050565b60008160001904831182151516156200401b576200401b62004140565b500290565b60006001600160a01b038381169083168181101562004043576200404362004140565b039392505050565b60008282101562004060576200406062004140565b500390565b600060ff821660ff84168082101562004082576200408262004140565b90039392505050565b60005b83811015620040a85781810151838201526020016200408e565b83811115620022f75750506000910152565b600081620040cc57620040cc62004140565b506000190190565b600181811c90821680620040e957607f821691505b6020821081141562001ab157634e487b7160e01b600052602260045260246000fd5b600060001982141562004122576200412262004140565b5060010190565b6000826200413b576200413b62004156565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620041ae57600080fd5b5056fe60806040523480156200001157600080fd5b5060405162002384380380620023848339810160408190526200003491620001f7565b8281620000418162000081565b50600380546001600160a01b0319166001600160a01b03929092169190911790558151620000779060049060208501906200009a565b50505050620002d4565b8051620000969060029060208401906200009a565b5050565b828054620000a89062000281565b90600052602060002090601f016020900481019282620000cc576000855562000117565b82601f10620000e757805160ff191683800117855562000117565b8280016001018555821562000117579182015b8281111562000117578251825591602001919060010190620000fa565b506200012592915062000129565b5090565b5b808211156200012557600081556001016200012a565b600082601f8301126200015257600080fd5b81516001600160401b03808211156200016f576200016f620002be565b604051601f8301601f19908116603f011681019082821181831017156200019a576200019a620002be565b81604052838152602092508683858801011115620001b757600080fd5b600091505b83821015620001db5785820183015181830184015290820190620001bc565b83821115620001ed5760008385830101525b9695505050505050565b6000806000606084860312156200020d57600080fd5b83516001600160a01b03811681146200022557600080fd5b60208501519093506001600160401b03808211156200024357600080fd5b620002518783880162000140565b935060408601519150808211156200026857600080fd5b50620002778682870162000140565b9150509250925092565b600181811c908216806200029657607f821691505b60208210811415620002b857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6120a080620002e46000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063731133e911610092578063731133e9146101d8578063880cdc31146101eb5780638da5cb5b146101fe578063a22cb46514610211578063c370b04214610224578063c87b56dd1461022c578063e985e9c51461023f578063f242432a14610252578063f5298aca1461026557600080fd5b8062fdd58e146100ef57806301ffc9a7146101155780630e89341c146101385780631f7fdffa146101585780632eb2c2d61461016d578063442890d5146101805780634e1273f4146101a55780636b20c454146101c5575b600080fd5b6101026100fd366004611861565b610278565b6040519081526020015b60405180910390f35b6101286101233660046119e2565b61030f565b604051901515815260200161010c565b61014b610146366004611a1c565b610361565b60405161010c9190611ba1565b61016b61016636600461178d565b6103f5565b005b61016b61017b366004611600565b610431565b6003546001600160a01b03165b6040516001600160a01b03909116815260200161010c565b6101b86101b3366004611912565b6104c8565b60405161010c9190611b60565b61016b6101d336600461170d565b6105f1565b61016b6101e63660046118be565b61073a565b61016b6101f93660046115ab565b610770565b60035461018d906001600160a01b031681565b61016b61021f366004611825565b610803565b61014b610812565b61014b61023a366004611a1c565b6108a4565b61012861024d3660046115cd565b6108af565b61016b6102603660046116a9565b6108dd565b61016b61027336600461188b565b610964565b60006001600160a01b0383166102e95760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061034057506001600160e01b031982166303a24d0760e21b145b8061035b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461037090611ea8565b80601f016020809104026020016040519081016040528092919081815260200182805461039c90611ea8565b80156103e95780601f106103be576101008083540402835291602001916103e9565b820191906000526020600020905b8154815290600101906020018083116103cc57829003601f168201915b50505050509050919050565b6003546001600160a01b0316331461041f5760405162461bcd60e51b81526004016102e090611d5b565b61042b848484846109f4565b50505050565b6001600160a01b03851633148061044d575061044d85336108af565b6104b45760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016102e0565b6104c18585858585610b2d565b5050505050565b6060815183511461052d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016102e0565b600083516001600160401b0381111561054857610548611f56565b604051908082528060200260200182016040528015610571578160200160208202803683370190505b50905060005b84518110156105e9576105bc85828151811061059557610595611f40565b60200260200101518583815181106105af576105af611f40565b6020026020010151610278565b8282815181106105ce576105ce611f40565b60209081029190910101526105e281611f0f565b9050610577565b509392505050565b6003546001600160a01b0316331461061b5760405162461bcd60e51b81526004016102e090611d5b565b6003546001600160a01b031661063186826108af565b61064d5760405162461bcd60e51b81526004016102e090611c85565b60005b848110156106c35783838281811061066a5761066a611f40565b905060200201356106938888888581811061068757610687611f40565b90506020020135610278565b10156106b15760405162461bcd60e51b81526004016102e090611e1b565b806106bb81611f0f565b915050610650565b506107328686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250610caf92505050565b505050505050565b6003546001600160a01b031633146107645760405162461bcd60e51b81526004016102e090611d5b565b61042b84848484610e27565b6003546001600160a01b0316331461079a5760405162461bcd60e51b81526004016102e090611d5b565b600354604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b61080e338383610eef565b5050565b60606004805461082190611ea8565b80601f016020809104026020016040519081016040528092919081815260200182805461084d90611ea8565b801561089a5780601f1061086f5761010080835404028352916020019161089a565b820191906000526020600020905b81548152906001019060200180831161087d57829003601f168201915b5050505050905090565b606061035b82610361565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6001600160a01b0385163314806108f957506108f985336108af565b6109575760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016102e0565b6104c18585858585610fd0565b6003546001600160a01b0316331461098e5760405162461bcd60e51b81526004016102e090611d5b565b806109998484610278565b10156109b75760405162461bcd60e51b81526004016102e090611e1b565b6003546001600160a01b03166109cd84826108af565b6109e95760405162461bcd60e51b81526004016102e090611c85565b61042b8484846110e8565b6001600160a01b038416610a1a5760405162461bcd60e51b81526004016102e090611dda565b8151835114610a3b5760405162461bcd60e51b81526004016102e090611d92565b3360005b8451811015610ad757838181518110610a5a57610a5a611f40565b6020026020010151600080878481518110610a7757610a77611f40565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254610abf9190611e90565b90915550819050610acf81611f0f565b915050610a3f565b50846001600160a01b031660006001600160a01b0316826001600160a01b031660008051602061202b8339815191528787604051610b16929190611b73565b60405180910390a46104c1816000878787876111da565b8151835114610b4e5760405162461bcd60e51b81526004016102e090611d92565b6001600160a01b038416610b745760405162461bcd60e51b81526004016102e090611c40565b3360005b8451811015610c5b576000858281518110610b9557610b95611f40565b602002602001015190506000858381518110610bb357610bb3611f40565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610c035760405162461bcd60e51b81526004016102e090611d11565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610c40908490611e90565b9250508190555050505080610c5490611f0f565b9050610b78565b50846001600160a01b0316866001600160a01b0316826001600160a01b031660008051602061202b8339815191528787604051610c99929190611b73565b60405180910390a46107328187878787876111da565b6001600160a01b038316610cd55760405162461bcd60e51b81526004016102e090611cce565b8051825114610cf65760405162461bcd60e51b81526004016102e090611d92565b604080516020810190915260009081905233905b8351811015610dcc576000848281518110610d2757610d27611f40565b602002602001015190506000848381518110610d4557610d45611f40565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610d955760405162461bcd60e51b81526004016102e090611bfc565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610dc481611f0f565b915050610d0a565b5060006001600160a01b0316846001600160a01b0316826001600160a01b031660008051602061202b8339815191528686604051610e0b929190611b73565b60405180910390a460408051602081019091526000905261042b565b6001600160a01b038416610e4d5760405162461bcd60e51b81526004016102e090611dda565b336000610e5985611345565b90506000610e6685611345565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610e98908490611e90565b909155505060408051878152602081018790526001600160a01b03808a16926000929187169160008051602061204b833981519152910160405180910390a4610ee683600089898989611390565b50505050505050565b816001600160a01b0316836001600160a01b03161415610f635760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016102e0565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610ff65760405162461bcd60e51b81526004016102e090611c40565b33600061100285611345565b9050600061100f85611345565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156110525760405162461bcd60e51b81526004016102e090611d11565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061108f908490611e90565b909155505060408051888152602081018890526001600160a01b03808b16928c8216929188169160008051602061204b833981519152910160405180910390a46110dd848a8a8a8a8a611390565b505050505050505050565b6001600160a01b03831661110e5760405162461bcd60e51b81526004016102e090611cce565b33600061111a84611345565b9050600061112784611345565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156111745760405162461bcd60e51b81526004016102e090611bfc565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a905290929088169160008051602061204b833981519152910160405180910390a4604080516020810190915260009052610ee6565b6001600160a01b0384163b156107325760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061121e9089908990889088908890600401611abd565b602060405180830381600087803b15801561123857600080fd5b505af1925050508015611268575060408051601f3d908101601f19168201909252611265918101906119ff565b60015b61131557611274611f6c565b806308c379a014156112ae5750611289611f88565b8061129457506112b0565b8060405162461bcd60e51b81526004016102e09190611ba1565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016102e0565b6001600160e01b0319811663bc197c8160e01b14610ee65760405162461bcd60e51b81526004016102e090611bb4565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061137f5761137f611f40565b602090810291909101015292915050565b6001600160a01b0384163b156107325760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906113d49089908990889088908890600401611b1b565b602060405180830381600087803b1580156113ee57600080fd5b505af192505050801561141e575060408051601f3d908101601f1916820190925261141b918101906119ff565b60015b61142a57611274611f6c565b6001600160e01b0319811663f23a6e6160e01b14610ee65760405162461bcd60e51b81526004016102e090611bb4565b80356001600160a01b038116811461147157600080fd5b919050565b60008083601f84011261148857600080fd5b5081356001600160401b0381111561149f57600080fd5b6020830191508360208260051b85010111156114ba57600080fd5b9250929050565b600082601f8301126114d257600080fd5b813560206114df82611e6d565b6040516114ec8282611ee3565b8381528281019150858301600585901b8701840188101561150c57600080fd5b60005b8581101561152b5781358452928401929084019060010161150f565b5090979650505050505050565b600082601f83011261154957600080fd5b81356001600160401b0381111561156257611562611f56565b604051611579601f8301601f191660200182611ee3565b81815284602083860101111561158e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156115bd57600080fd5b6115c68261145a565b9392505050565b600080604083850312156115e057600080fd5b6115e98361145a565b91506115f76020840161145a565b90509250929050565b600080600080600060a0868803121561161857600080fd5b6116218661145a565b945061162f6020870161145a565b935060408601356001600160401b038082111561164b57600080fd5b61165789838a016114c1565b9450606088013591508082111561166d57600080fd5b61167989838a016114c1565b9350608088013591508082111561168f57600080fd5b5061169c88828901611538565b9150509295509295909350565b600080600080600060a086880312156116c157600080fd5b6116ca8661145a565b94506116d86020870161145a565b9350604086013592506060860135915060808601356001600160401b0381111561170157600080fd5b61169c88828901611538565b60008060008060006060868803121561172557600080fd5b61172e8661145a565b945060208601356001600160401b038082111561174a57600080fd5b61175689838a01611476565b9096509450604088013591508082111561176f57600080fd5b5061177c88828901611476565b969995985093965092949392505050565b600080600080608085870312156117a357600080fd5b6117ac8561145a565b935060208501356001600160401b03808211156117c857600080fd5b6117d4888389016114c1565b945060408701359150808211156117ea57600080fd5b6117f6888389016114c1565b9350606087013591508082111561180c57600080fd5b5061181987828801611538565b91505092959194509250565b6000806040838503121561183857600080fd5b6118418361145a565b91506020830135801515811461185657600080fd5b809150509250929050565b6000806040838503121561187457600080fd5b61187d8361145a565b946020939093013593505050565b6000806000606084860312156118a057600080fd5b6118a98461145a565b95602085013595506040909401359392505050565b600080600080608085870312156118d457600080fd5b6118dd8561145a565b9350602085013592506040850135915060608501356001600160401b0381111561190657600080fd5b61181987828801611538565b6000806040838503121561192557600080fd5b82356001600160401b038082111561193c57600080fd5b818501915085601f83011261195057600080fd5b8135602061195d82611e6d565b60405161196a8282611ee3565b8381528281019150858301600585901b870184018b101561198a57600080fd5b600096505b848710156119b4576119a08161145a565b83526001969096019591830191830161198f565b50965050860135925050808211156119cb57600080fd5b506119d8858286016114c1565b9150509250929050565b6000602082840312156119f457600080fd5b81356115c681612011565b600060208284031215611a1157600080fd5b81516115c681612011565b600060208284031215611a2e57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611a6557815187529582019590820190600101611a49565b509495945050505050565b6000815180845260005b81811015611a9657602081850181015186830182015201611a7a565b81811115611aa8576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090611ae990830186611a35565b8281036060840152611afb8186611a35565b90508281036080840152611b0f8185611a70565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611b5590830184611a70565b979650505050505050565b6020815260006115c66020830184611a35565b604081526000611b866040830185611a35565b8281036020840152611b988185611a35565b95945050505050565b6020815260006115c66020830184611a70565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526029908201527f566f7563686572206f776e657220646964206e6f7420617070726f766520796f6040820152683a903a3790313ab93760b91b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526032908201527f566f7563686572206f776e657220646f6573206e6f74206861766520656e6f7560408201527133b4103130b630b731b2903a3790313ab93760711b606082015260800190565b60006001600160401b03821115611e8657611e86611f56565b5060051b60200190565b60008219821115611ea357611ea3611f2a565b500190565b600181811c90821680611ebc57607f821691505b60208210811415611edd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715611f0857611f08611f56565b6040525050565b6000600019821415611f2357611f23611f2a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115611f855760046000803e5060005160e01c5b90565b600060443d1015611f965790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715611fc557505050505090565b8285019150815181811115611fdd5750505050505090565b843d8701016020828501011115611ff75750505050505090565b61200660208286010187611ee3565b509095945050505050565b6001600160e01b03198116811461202757600080fd5b5056fe4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fbc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a26469706673582212203dae927920410fa1cb299b6b6fd9d75884b3bebf4a74c1845bf64a000437222a64736f6c63430008070033a2646970667358221220b11790f227ef0d308320b25bafbfd76bbd43cf5722c2bd6c63a8d9193b0b5f5264736f6c63430008070033",
}

// TNT1155TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use TNT1155TokenBankMetaData.ABI instead.
var TNT1155TokenBankABI = TNT1155TokenBankMetaData.ABI

// TNT1155TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TNT1155TokenBankMetaData.Bin instead.
var TNT1155TokenBankBin = TNT1155TokenBankMetaData.Bin

// DeployTNT1155TokenBank deploys a new Ethereum contract, binding an instance of TNT1155TokenBank to it.
func DeployTNT1155TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, mainchainID_ *big.Int, chainRegistrar_ common.Address) (common.Address, *types.Transaction, *TNT1155TokenBank, error) {
	parsed, err := TNT1155TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TNT1155TokenBankBin), backend, mainchainID_, chainRegistrar_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TNT1155TokenBank{TNT1155TokenBankCaller: TNT1155TokenBankCaller{contract: contract}, TNT1155TokenBankTransactor: TNT1155TokenBankTransactor{contract: contract}, TNT1155TokenBankFilterer: TNT1155TokenBankFilterer{contract: contract}}, nil
}

// TNT1155TokenBank is an auto generated Go binding around an Ethereum contract.
type TNT1155TokenBank struct {
	TNT1155TokenBankCaller     // Read-only binding to the contract
	TNT1155TokenBankTransactor // Write-only binding to the contract
	TNT1155TokenBankFilterer   // Log filterer for contract events
}

// TNT1155TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type TNT1155TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT1155TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TNT1155TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT1155TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TNT1155TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT1155TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TNT1155TokenBankSession struct {
	Contract     *TNT1155TokenBank // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TNT1155TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TNT1155TokenBankCallerSession struct {
	Contract *TNT1155TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// TNT1155TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TNT1155TokenBankTransactorSession struct {
	Contract     *TNT1155TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// TNT1155TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type TNT1155TokenBankRaw struct {
	Contract *TNT1155TokenBank // Generic contract binding to access the raw methods on
}

// TNT1155TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TNT1155TokenBankCallerRaw struct {
	Contract *TNT1155TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// TNT1155TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TNT1155TokenBankTransactorRaw struct {
	Contract *TNT1155TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTNT1155TokenBank creates a new instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBank(address common.Address, backend bind.ContractBackend) (*TNT1155TokenBank, error) {
	contract, err := bindTNT1155TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBank{TNT1155TokenBankCaller: TNT1155TokenBankCaller{contract: contract}, TNT1155TokenBankTransactor: TNT1155TokenBankTransactor{contract: contract}, TNT1155TokenBankFilterer: TNT1155TokenBankFilterer{contract: contract}}, nil
}

// NewTNT1155TokenBankCaller creates a new read-only instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBankCaller(address common.Address, caller bind.ContractCaller) (*TNT1155TokenBankCaller, error) {
	contract, err := bindTNT1155TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankCaller{contract: contract}, nil
}

// NewTNT1155TokenBankTransactor creates a new write-only instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*TNT1155TokenBankTransactor, error) {
	contract, err := bindTNT1155TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTransactor{contract: contract}, nil
}

// NewTNT1155TokenBankFilterer creates a new log filterer instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*TNT1155TokenBankFilterer, error) {
	contract, err := bindTNT1155TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankFilterer{contract: contract}, nil
}

// bindTNT1155TokenBank binds a generic wrapper to an already deployed contract.
func bindTNT1155TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TNT1155TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT1155TokenBank *TNT1155TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT1155TokenBank.Contract.TNT1155TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT1155TokenBank *TNT1155TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.TNT1155TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT1155TokenBank *TNT1155TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.TNT1155TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT1155TokenBank *TNT1155TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT1155TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT1155TokenBank *TNT1155TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT1155TokenBank *TNT1155TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.contract.Transact(opts, method, params...)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) AllDenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "allDenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT1155TokenBank.Contract.AllDenoms(&_TNT1155TokenBank.CallOpts, arg0)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT1155TokenBank.Contract.AllDenoms(&_TNT1155TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) AllVouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "allVouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT1155TokenBank.Contract.AllVouchers(&_TNT1155TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT1155TokenBank.Contract.AllVouchers(&_TNT1155TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) DenomToVoucherLookup(opts *bind.CallOpts, arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "denomToVoucherLookup", arg0)

	outstruct := new(struct {
		ContractAddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT1155TokenBank.Contract.DenomToVoucherLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT1155TokenBank.Contract.DenomToVoucherLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankSession) Exists(denom string) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists(&_TNT1155TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists(&_TNT1155TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) Exists0(opts *bind.CallOpts, voucherAddress common.Address) (bool, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "exists0", voucherAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists0(&_TNT1155TokenBank.CallOpts, voucherAddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists0(&_TNT1155TokenBank.CallOpts, voucherAddress)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetAdjustedValidatorSet(opts *bind.CallOpts, subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getAdjustedValidatorSet", subchainID, dynasty)

	outstruct := new(struct {
		Validators   []common.Address
		ShareAmounts []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Validators = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.ShareAmounts = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT1155TokenBank.Contract.GetAdjustedValidatorSet(&_TNT1155TokenBank.CallOpts, subchainID, dynasty)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT1155TokenBank.Contract.GetAdjustedValidatorSet(&_TNT1155TokenBank.CallOpts, subchainID, dynasty)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetDenom(opts *bind.CallOpts, voucherContractAddr common.Address) (string, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getDenom", voucherContractAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT1155TokenBank.Contract.GetDenom(&_TNT1155TokenBank.CallOpts, voucherContractAddr)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT1155TokenBank.Contract.GetDenom(&_TNT1155TokenBank.CallOpts, voucherContractAddr)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetMaxProcessedTokenLockNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getMaxProcessedTokenLockNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetMaxProcessedVoucherBurnNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getMaxProcessedVoucherBurnNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetTokenLockEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getTokenLockEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetTokenLockEventHeight(&_TNT1155TokenBank.CallOpts, chainID, eventNonce)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetTokenLockEventHeight(&_TNT1155TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetVoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getVoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT1155TokenBank.Contract.GetVoucher(&_TNT1155TokenBank.CallOpts, denom)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT1155TokenBank.Contract.GetVoucher(&_TNT1155TokenBank.CallOpts, denom)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetVoucherBurnEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getVoucherBurnEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT1155TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT1155TokenBank.CallOpts, chainID, eventNonce)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) MainchainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "mainchainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) MainchainID() (*big.Int, error) {
	return _TNT1155TokenBank.Contract.MainchainID(&_TNT1155TokenBank.CallOpts)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) MainchainID() (*big.Int, error) {
	return _TNT1155TokenBank.Contract.MainchainID(&_TNT1155TokenBank.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TNT1155TokenBank.Contract.SupportsInterface(&_TNT1155TokenBank.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TNT1155TokenBank.Contract.SupportsInterface(&_TNT1155TokenBank.CallOpts, interfaceId)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TokenLockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "tokenLockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenLockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenLockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TokenLockVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "tokenLockVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.TokenLockVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.TokenLockVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TokenUnlockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "tokenUnlockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenUnlockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenUnlockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TotalLockedAmounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "totalLockedAmounts", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TotalLockedAmounts(&_TNT1155TokenBank.CallOpts, arg0, arg1, arg2)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TotalLockedAmounts(&_TNT1155TokenBank.CallOpts, arg0, arg1, arg2)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherAddressToDenomLookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherAddressToDenomLookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT1155TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT1155TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherBurnNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherBurnNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherBurnVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherBurnVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherMintNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherMintNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherMintNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherMintNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0x090601b0.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID, uint256 burnAmount, bytes transferData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) BurnVouchers(opts *bind.TransactOpts, sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int, burnAmount *big.Int, transferData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "burnVouchers", sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID, burnAmount, transferData)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0x090601b0.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID, uint256 burnAmount, bytes transferData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int, burnAmount *big.Int, transferData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.BurnVouchers(&_TNT1155TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID, burnAmount, transferData)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0x090601b0.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID, uint256 burnAmount, bytes transferData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int, burnAmount *big.Int, transferData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.BurnVouchers(&_TNT1155TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID, burnAmount, transferData)
}

// LockTokens is a paid mutator transaction binding the contract method 0x61d07089.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT1155Contract, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockAmount, bytes transferBytes, bytes mintData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) LockTokens(opts *bind.TransactOpts, targetChainID *big.Int, sourceChainTNT1155Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int, lockAmount *big.Int, transferBytes []byte, mintData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "lockTokens", targetChainID, sourceChainTNT1155Contract, targetChainVoucherReceiver, tokenID, lockAmount, transferBytes, mintData)
}

// LockTokens is a paid mutator transaction binding the contract method 0x61d07089.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT1155Contract, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockAmount, bytes transferBytes, bytes mintData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) LockTokens(targetChainID *big.Int, sourceChainTNT1155Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int, lockAmount *big.Int, transferBytes []byte, mintData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.LockTokens(&_TNT1155TokenBank.TransactOpts, targetChainID, sourceChainTNT1155Contract, targetChainVoucherReceiver, tokenID, lockAmount, transferBytes, mintData)
}

// LockTokens is a paid mutator transaction binding the contract method 0x61d07089.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT1155Contract, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockAmount, bytes transferBytes, bytes mintData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) LockTokens(targetChainID *big.Int, sourceChainTNT1155Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int, lockAmount *big.Int, transferBytes []byte, mintData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.LockTokens(&_TNT1155TokenBank.TransactOpts, targetChainID, sourceChainTNT1155Contract, targetChainVoucherReceiver, tokenID, lockAmount, transferBytes, mintData)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x302ec042.
//
// Solidity: function mintVouchers(string denom, string uriForm, address targetChainVoucherReceiver, uint256 tokenID, uint256 mintAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce, bytes mintData) returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) MintVouchers(opts *bind.TransactOpts, denom string, uriForm string, targetChainVoucherReceiver common.Address, tokenID *big.Int, mintAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int, mintData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "mintVouchers", denom, uriForm, targetChainVoucherReceiver, tokenID, mintAmount, dynasty, sourceChainTokenLockNonce, mintData)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x302ec042.
//
// Solidity: function mintVouchers(string denom, string uriForm, address targetChainVoucherReceiver, uint256 tokenID, uint256 mintAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce, bytes mintData) returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) MintVouchers(denom string, uriForm string, targetChainVoucherReceiver common.Address, tokenID *big.Int, mintAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int, mintData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.MintVouchers(&_TNT1155TokenBank.TransactOpts, denom, uriForm, targetChainVoucherReceiver, tokenID, mintAmount, dynasty, sourceChainTokenLockNonce, mintData)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x302ec042.
//
// Solidity: function mintVouchers(string denom, string uriForm, address targetChainVoucherReceiver, uint256 tokenID, uint256 mintAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce, bytes mintData) returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) MintVouchers(denom string, uriForm string, targetChainVoucherReceiver common.Address, tokenID *big.Int, mintAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int, mintData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.MintVouchers(&_TNT1155TokenBank.TransactOpts, denom, uriForm, targetChainVoucherReceiver, tokenID, mintAmount, dynasty, sourceChainTokenLockNonce, mintData)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155BatchReceived(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155BatchReceived(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155Received(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155Received(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xabe7ce9c.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce, bytes transferData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) UnlockTokens(opts *bind.TransactOpts, sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int, transferData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "unlockTokens", sourceChainID, denom, targetChainTokenReceiver, tokenID, unlockAmount, dynasty, sourceChainVoucherBurnNonce, transferData)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xabe7ce9c.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce, bytes transferData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int, transferData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.UnlockTokens(&_TNT1155TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, unlockAmount, dynasty, sourceChainVoucherBurnNonce, transferData)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xabe7ce9c.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce, bytes transferData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int, transferData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.UnlockTokens(&_TNT1155TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, unlockAmount, dynasty, sourceChainVoucherBurnNonce, transferData)
}

// TNT1155TokenBankFailedToSendTFuelIterator is returned from FilterFailedToSendTFuel and is used to iterate over the raw logs and unpacked data for FailedToSendTFuel events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankFailedToSendTFuelIterator struct {
	Event *TNT1155TokenBankFailedToSendTFuel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankFailedToSendTFuelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankFailedToSendTFuel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankFailedToSendTFuel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankFailedToSendTFuelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankFailedToSendTFuelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankFailedToSendTFuel represents a FailedToSendTFuel event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankFailedToSendTFuel struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterFailedToSendTFuel is a free log retrieval operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterFailedToSendTFuel(opts *bind.FilterOpts, receiver []common.Address) (*TNT1155TokenBankFailedToSendTFuelIterator, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "FailedToSendTFuel", receiverRule)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankFailedToSendTFuelIterator{contract: _TNT1155TokenBank.contract, event: "FailedToSendTFuel", logs: logs, sub: sub}, nil
}

// WatchFailedToSendTFuel is a free log subscription operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchFailedToSendTFuel(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankFailedToSendTFuel, receiver []common.Address) (event.Subscription, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "FailedToSendTFuel", receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankFailedToSendTFuel)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "FailedToSendTFuel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedToSendTFuel is a log parse operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseFailedToSendTFuel(log types.Log) (*TNT1155TokenBankFailedToSendTFuel, error) {
	event := new(TNT1155TokenBankFailedToSendTFuel)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "FailedToSendTFuel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155TokenLockedIterator is returned from FilterTNT1155TokenLocked and is used to iterate over the raw logs and unpacked data for TNT1155TokenLocked events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenLockedIterator struct {
	Event *TNT1155TokenBankTNT1155TokenLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155TokenLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155TokenLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155TokenLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155TokenLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155TokenLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155TokenLocked represents a TNT1155TokenLocked event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenLocked struct {
	Denom                      string
	SourceChainTokenSender     common.Address
	TargetChainID              *big.Int
	TargetChainVoucherReceiver common.Address
	TokenID                    *big.Int
	LockedAmount               *big.Int
	TokenURI                   string
	TokenLockNonce             *big.Int
	MintData                   []byte
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT1155TokenLocked is a free log retrieval operation binding the contract event 0x3e4c154c420b8aa393cfab67e386d5d7d889fe7ba59c1d838391e9060826e2ec.
//
// Solidity: event TNT1155TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockedAmount, string tokenURI, uint256 tokenLockNonce, bytes mintData)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155TokenLocked(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155TokenLockedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155TokenLocked")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155TokenLockedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155TokenLocked", logs: logs, sub: sub}, nil
}

// WatchTNT1155TokenLocked is a free log subscription operation binding the contract event 0x3e4c154c420b8aa393cfab67e386d5d7d889fe7ba59c1d838391e9060826e2ec.
//
// Solidity: event TNT1155TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockedAmount, string tokenURI, uint256 tokenLockNonce, bytes mintData)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155TokenLocked(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155TokenLocked) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155TokenLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155TokenLocked)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155TokenLocked is a log parse operation binding the contract event 0x3e4c154c420b8aa393cfab67e386d5d7d889fe7ba59c1d838391e9060826e2ec.
//
// Solidity: event TNT1155TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockedAmount, string tokenURI, uint256 tokenLockNonce, bytes mintData)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155TokenLocked(log types.Log) (*TNT1155TokenBankTNT1155TokenLocked, error) {
	event := new(TNT1155TokenBankTNT1155TokenLocked)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155TokenUnlockedIterator is returned from FilterTNT1155TokenUnlocked and is used to iterate over the raw logs and unpacked data for TNT1155TokenUnlocked events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenUnlockedIterator struct {
	Event *TNT1155TokenBankTNT1155TokenUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155TokenUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155TokenUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155TokenUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155TokenUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155TokenUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155TokenUnlocked represents a TNT1155TokenUnlocked event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenUnlocked struct {
	Denom                       string
	TargetChainTokenReceiver    common.Address
	TokenID                     *big.Int
	UnlockedAmount              *big.Int
	SourceChainVoucherBurnNonce *big.Int
	TokenUnlockNonce            *big.Int
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterTNT1155TokenUnlocked is a free log retrieval operation binding the contract event 0x4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a.
//
// Solidity: event TNT1155TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155TokenUnlocked(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155TokenUnlockedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155TokenUnlockedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155TokenUnlocked", logs: logs, sub: sub}, nil
}

// WatchTNT1155TokenUnlocked is a free log subscription operation binding the contract event 0x4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a.
//
// Solidity: event TNT1155TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155TokenUnlocked(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155TokenUnlocked) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155TokenUnlocked)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155TokenUnlocked is a log parse operation binding the contract event 0x4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a.
//
// Solidity: event TNT1155TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155TokenUnlocked(log types.Log) (*TNT1155TokenBankTNT1155TokenUnlocked, error) {
	event := new(TNT1155TokenBankTNT1155TokenUnlocked)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155VoucherBurnedIterator is returned from FilterTNT1155VoucherBurned and is used to iterate over the raw logs and unpacked data for TNT1155VoucherBurned events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherBurnedIterator struct {
	Event *TNT1155TokenBankTNT1155VoucherBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155VoucherBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155VoucherBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155VoucherBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155VoucherBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155VoucherBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155VoucherBurned represents a TNT1155VoucherBurned event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherBurned struct {
	Denom                    string
	SourceChainVoucherOwner  common.Address
	TargetChainTokenReceiver common.Address
	TokenID                  *big.Int
	BurnedAmount             *big.Int
	VoucherBurnNonce         *big.Int
	TransferData             []byte
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTNT1155VoucherBurned is a free log retrieval operation binding the contract event 0xff848610ed51b081087d026cd710fa5216db9c1bb56c1e81cecc987417563b3b.
//
// Solidity: event TNT1155VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 burnedAmount, uint256 voucherBurnNonce, bytes transferData)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155VoucherBurned(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155VoucherBurnedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155VoucherBurned")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155VoucherBurnedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155VoucherBurned", logs: logs, sub: sub}, nil
}

// WatchTNT1155VoucherBurned is a free log subscription operation binding the contract event 0xff848610ed51b081087d026cd710fa5216db9c1bb56c1e81cecc987417563b3b.
//
// Solidity: event TNT1155VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 burnedAmount, uint256 voucherBurnNonce, bytes transferData)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155VoucherBurned(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155VoucherBurned) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155VoucherBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155VoucherBurned)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155VoucherBurned is a log parse operation binding the contract event 0xff848610ed51b081087d026cd710fa5216db9c1bb56c1e81cecc987417563b3b.
//
// Solidity: event TNT1155VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 burnedAmount, uint256 voucherBurnNonce, bytes transferData)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155VoucherBurned(log types.Log) (*TNT1155TokenBankTNT1155VoucherBurned, error) {
	event := new(TNT1155TokenBankTNT1155VoucherBurned)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155VoucherMintedIterator is returned from FilterTNT1155VoucherMinted and is used to iterate over the raw logs and unpacked data for TNT1155VoucherMinted events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherMintedIterator struct {
	Event *TNT1155TokenBankTNT1155VoucherMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155VoucherMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155VoucherMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155VoucherMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155VoucherMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155VoucherMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155VoucherMinted represents a TNT1155VoucherMinted event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherMinted struct {
	Denom                      string
	TargetChainVoucherReceiver common.Address
	VoucherContract            common.Address
	TokenID                    *big.Int
	MintedAmount               *big.Int
	SourceChainTokenLockNonce  *big.Int
	VoucherMintNonce           *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT1155VoucherMinted is a free log retrieval operation binding the contract event 0x4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53.
//
// Solidity: event TNT1155VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155VoucherMinted(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155VoucherMintedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155VoucherMinted")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155VoucherMintedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155VoucherMinted", logs: logs, sub: sub}, nil
}

// WatchTNT1155VoucherMinted is a free log subscription operation binding the contract event 0x4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53.
//
// Solidity: event TNT1155VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155VoucherMinted(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155VoucherMinted) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155VoucherMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155VoucherMinted)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155VoucherMinted is a log parse operation binding the contract event 0x4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53.
//
// Solidity: event TNT1155VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155VoucherMinted(log types.Log) (*TNT1155TokenBankTNT1155VoucherMinted, error) {
	event := new(TNT1155TokenBankTNT1155VoucherMinted)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
