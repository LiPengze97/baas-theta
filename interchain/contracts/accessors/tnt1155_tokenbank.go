// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TNT1155TokenBankMetaData contains all meta data concerning the TNT1155TokenBank contract.
var TNT1155TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mainchainID_\",\"type\":\"uint256\"},{\"internalType\":\"contractChainRegistrar\",\"name\":\"chainRegistrar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedToSendTFuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voucherContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"MintVouchersToFallbackReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainTokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT1155TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenUnlockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT1155TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainVoucherOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"TNT1155VoucherBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voucherContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherMintNonce\",\"type\":\"uint256\"}],\"name\":\"TNT1155VoucherMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fallbackReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"}],\"name\":\"UnlockTokensToFallbackReceiver\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDenoms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVouchers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomToVoucherLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherAddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"getAdjustedValidatorSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherContractAddr\",\"type\":\"address\"}],\"name\":\"getDenom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedTokenLockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedVoucherBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNonce\",\"type\":\"uint256\"}],\"name\":\"getTokenLockEventHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getVoucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNonce\",\"type\":\"uint256\"}],\"name\":\"getVoucherBurnEventHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenLockVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUnlockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalLockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucherAddressToDenomLookup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherBurnNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherBurnVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherMintNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceChainTNT1155Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"mintVouchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceChainVoucherContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burnVouchers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200649b3803806200649b833981016040819052620000349162000064565b6001600081905591909155600280546001600160a01b0319166001600160a01b03909216919091179055620000a3565b600080604083850312156200007857600080fd5b825160208401519092506001600160a01b03811681146200009857600080fd5b809150509250929050565b6163e880620000b36000396000f3fe608060405260043610620001975760003560e01c80639c67257d11620000dd578063e59923341162000084578063e59923341462000616578063e888e05b146200062d578063ebda99621462000652578063f23a6e611462000677578063f6a3d24e14620006a7578063f95627ac14620006e7578063feaff052146200071857600080fd5b80639c67257d1462000492578063a2cc698114620004d4578063aa861c1514620004f9578063bc197c81146200052e578063ca2075691462000578578063ccf187c714620005a9578063dd17eb6d14620005da57600080fd5b8063464216521162000142578063464216521462000343578063588b1408146200035a57806360569b5e146200038e5780636ac739b914620003c3578063740cb7f814620003ff578063766f8fb014620004305780638883931e146200046157600080fd5b806301ffc9a7146200019c578063032c6bf214620001d6578063073b950214620001ef5780631527b14d14620002165780631eb787371462000287578063261a323e14620002e057806327ca4df11462000305575b600080fd5b348015620001a957600080fd5b50620001c1620001bb36600462003a1d565b6200075b565b60405190151581526020015b60405180910390f35b620001ed620001e736600462003cbf565b62000793565b005b348015620001fc57600080fd5b506200020760015481565b604051908152602001620001cd565b3480156200022357600080fd5b50620002676200023536600462003a49565b8051602081830181018051600d825292820191909301209152546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b039093168352901515602083015201620001cd565b3480156200029457600080fd5b50620002ca620002a636600462003c9c565b600b6020908152600092835260408084209091529082529020805460029091015482565b60408051928352602083019190915201620001cd565b348015620002ed57600080fd5b50620001c1620002ff36600462003a49565b62000b8f565b3480156200031257600080fd5b506200032a6200032436600462003ba7565b62000bd3565b6040516001600160a01b039091168152602001620001cd565b620001ed620003543660046200386b565b62000bfe565b3480156200036757600080fd5b506200037f6200037936600462003ba7565b62000fb2565b604051620001cd919062003fd5565b3480156200039b57600080fd5b50620003b3620003ad36600462003770565b62001067565b604051620001cd9291906200419d565b348015620003d057600080fd5b5062000207620003e236600462003c9c565b600091825260086020908152604080842092845291905290205490565b3480156200040c57600080fd5b50620002076200041e36600462003ba7565b60066020526000908152604090205481565b3480156200043d57600080fd5b50620002076200044f36600462003ba7565b6000908152600a602052604090205490565b3480156200046e57600080fd5b50620002076200048036600462003ba7565b60036020526000908152604090205481565b3480156200049f57600080fd5b5062000207620004b136600462003c32565b601160209081526000938452604080852082529284528284209052825290205481565b348015620004e157600080fd5b506200032a620004f336600462003a49565b62001116565b3480156200050657600080fd5b506200051e6200051836600462003c9c565b6200118c565b604051620001cd92919062003f5a565b3480156200053b57600080fd5b506200055e6200054d366004620037b0565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001620001cd565b3480156200058557600080fd5b50620002076200059736600462003ba7565b60056020526000908152604090205481565b348015620005b657600080fd5b5062000207620005c836600462003ba7565b60046020526000908152604090205481565b348015620005e757600080fd5b5062000207620005f936600462003c9c565b600091825260076020908152604080842092845291905290205490565b620001ed6200062736600462003bdb565b62001446565b3480156200063a57600080fd5b50620001ed6200064c36600462003b00565b62001844565b3480156200065f57600080fd5b506200037f6200067136600462003770565b62001b6e565b3480156200068457600080fd5b506200055e62000696366004620038b6565b63f23a6e6160e01b95945050505050565b348015620006b457600080fd5b50620001c1620006c636600462003770565b6001600160a01b03166000908152600e602052604090206001015460ff1690565b348015620006f457600080fd5b50620002076200070636600462003ba7565b60009081526009602052604090205490565b3480156200072557600080fd5b50620002ca6200073736600462003c9c565b600c6020908152600092835260408084209091529082529020805460029091015482565b60006001600160e01b03198216630271189760e51b14806200078d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60026000541415620007c25760405162461bcd60e51b8152600401620007b99062004265565b60405180910390fd5b60026000556001600160a01b038516620007f05760405162461bcd60e51b8152600401620007b990620041c3565b6000620007fd8762001c6e565b90506000806200080d8362001c7b565b9150915080620008765760405162461bcd60e51b815260206004820152602d60248201527f4661696c656420746f206578747261637420636f6e747261637420616464726560448201526c73732066726f6d2064656e6f6d60981b6064820152608401620007b9565b60008a81526011602090815260408083206001600160a01b038616845282528083208a8452909152902054861115620009075760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420756e6c6f636b207468652072657175657374656420616d6f7560448201526b6e74206f6620746f6b656e7360a01b6064820152608401620007b9565b60008a8489898c8a8a60405160200162000928979695949392919062003e49565b6040516020818303038152906040528051906020012090506000620009518c8884893362001cfc565b9050801562000b7c576200096a8c858b8b600062001d1b565b60408051602081018252600081529051637921219560e11b81526001600160a01b0386169163f242432a91620009ac9130918f918f918f919060040162003ec9565b600060405180830381600087803b158015620009c757600080fd5b505af1925050508015620009d9575060015b62000b1b57600254604080516330ab9a3d60e21b815290516000926001600160a01b03169163c2ae68f4916004808301926020929190829003018186803b15801562000a2457600080fd5b505afa15801562000a39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a5f919062003790565b9050846001600160a01b031663f242432a30838d8d604051806020016040528060008152506040518663ffffffff1660e01b815260040162000aa695949392919062003ec9565b600060405180830381600087803b15801562000ac157600080fd5b505af115801562000ad6573d6000803e3d6000fd5b505050507fff058a80f171a00cc000a48b55c74b86f019a650ce9be381ca3000b9cd99a0f481868c8c60405162000b11949392919062003ea0565b60405180910390a1505b62000b268c62001df4565b60008c815260046020526040908190205490517f4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a9062000b729088908e908e908e908d90889062004156565b60405180910390a1505b5050600160005550505050505050505050565b60008062000b9d8362001c6e565b9050600d8160405162000bb1919062003d70565b9081526040519081900360200190205460ff600160a01b909104169392505050565b600f818154811062000be457600080fd5b6000918252602090912001546001600160a01b0316905081565b6002600054141562000c245760405162461bcd60e51b8152600401620007b99062004265565b60026000556001600160a01b03831662000c525760405162461bcd60e51b8152600401620007b990620041c3565b6040516375ed4cb160e11b81526001600160a01b0385166004820152600090309063ebda99629060240160006040518083038186803b15801562000c9557600080fd5b505afa15801562000caa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000cd4919081019062003a81565b905080516000141562000d425760405162461bcd60e51b815260206004820152602f60248201527f6661696c656420746f206c6f6f6b75702064656e6f6d20666f7220746865207660448201526e1bdd58da195c8818dbdb9d1c9858dd608a1b6064820152608401620007b9565b60405163130d191f60e11b8152309063261a323e9062000d6790849060040162003fd5565b60206040518083038186803b15801562000d8057600080fd5b505afa15801562000d95573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dbb9190620039ff565b62000e095760405162461bcd60e51b815260206004820152601f60248201527f566f756368657220636f6e747261637420646f6573206e6f74206578697374006044820152606401620007b9565b3362000e188682868662001e1d565b60008062000e268462001e92565b915091508062000e8c5760405162461bcd60e51b815260206004820152602a60248201527f4661696c656420746f206578747261637420746172676574436861696e49442060448201526966726f6d2064656e6f6d60b01b6064820152608401620007b9565b62000e978262001f23565b600082815260056020526040908190205490517f656ace729da14534acb1e9ea4ca34cf21501689c9ea0a8eff3aebca48f94f68e9062000ee390879087908c908c908c90889062003fea565b60405180910390a1600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f3a57600080fd5b505afa15801562000f4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f75919062003bc1565b34101562000f975760405162461bcd60e51b8152600401620007b990620041fa565b62000fa28362001f6e565b5050600160005550505050505050565b6010818154811062000fc357600080fd5b90600052602060002001600091509050805462000fe090620044af565b80601f01602080910402602001604051908101604052809291908181526020018280546200100e90620044af565b80156200105f5780601f1062001033576101008083540402835291602001916200105f565b820191906000526020600020905b8154815290600101906020018083116200104157829003601f168201915b505050505081565b600e602052600090815260409020805481906200108490620044af565b80601f0160208091040260200160405190810160405280929190818152602001828054620010b290620044af565b8015620011035780601f10620010d75761010080835404028352916020019162001103565b820191906000526020600020905b815481529060010190602001808311620010e557829003601f168201915b5050506001909301549192505060ff1682565b600080620011248362001c6e565b90506000600d826040516200113a919062003d70565b908152604080516020928190038301812081830190925290546001600160a01b0381168252600160a01b900460ff161580159282019290925291506200118257519392505050565b5060009392505050565b6060806000600154461490506000600260009054906101000a90046001600160a01b03166001600160a01b031663a7464b126040518163ffffffff1660e01b815260040160206040518083038186803b158015620011e957600080fd5b505afa158015620011fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001224919062003bc1565b600254604051632f2c13b560e01b81526004810189905291925060009182916001600160a01b031690632f2c13b590602401604080518083038186803b1580156200126e57600080fd5b505afa15801562001283573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012a9919062003c6d565b915091506000818015620012c85750620012c48885620023bf565b8310155b8015620012ec5750620012e984620012e28a6001620023d4565b90620023bf565b83105b9050848015620012f95750805b15620013aa5760006200130e896001620023d4565b6002546040516343f27e4560e01b8152600481018d9052602481018390529192506001600160a01b0316906343f27e459060440160006040518083038186803b1580156200135b57600080fd5b505afa15801562001370573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200139a919081019062003926565b975097505050505050506200143f565b6002546040516343f27e4560e01b8152600481018b9052602481018a90526001600160a01b03909116906343f27e459060440160006040518083038186803b158015620013f657600080fd5b505afa1580156200140b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001435919081019062003926565b9650965050505050505b9250929050565b600260005414156200146c5760405162461bcd60e51b8152600401620007b99062004265565b60026000556001600160a01b0383166200149a5760405162461bcd60e51b8152600401620007b990620041c3565b6001548514806200152657506002546040516343b71f0560e01b8152600481018790526001600160a01b03909116906343b71f059060240160206040518083038186803b158015620014eb57600080fd5b505afa15801562001500573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015269190620039ff565b620015705760405162461bcd60e51b81526020600482015260196024820152781b9bdd0818481d985b1a59081d185c99d95d10da185a5b9251603a1b6044820152606401620007b9565b60408051602081018252600081529051637921219560e11b815285916001600160a01b0383169163f242432a91620015b391339130918991899160040162003ec9565b600060405180830381600087803b158015620015ce57600080fd5b505af1158015620015e3573d6000803e3d6000fd5b5050505060006200162746604051806040016040528060048152602001633131353560e01b81525062001621896001600160a01b03166014620023e2565b6200259b565b90506200163987878686600162001d1b565b6200164487620025df565b6000878152600360205260409020546200165f87866200262a565b1562001738577f5ac6d27fa2bb13775fcf7bd9cc03a3f02063b2a2e484aaedc1b1c9d916874f3682338a898989896001600160a01b0316630e89341c8d6040518263ffffffff1660e01b8152600401620016bb91815260200190565b60006040518083038186803b158015620016d457600080fd5b505afa158015620016e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001713919081019062003a81565b886040516200172a98979695949392919062004083565b60405180910390a16200177e565b7f5ac6d27fa2bb13775fcf7bd9cc03a3f02063b2a2e484aaedc1b1c9d916874f3682338a89898987604051620017759796959493929190620040f1565b60405180910390a15b600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620017cd57600080fd5b505afa158015620017e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001808919062003bc1565b3410156200182a5760405162461bcd60e51b8152600401620007b990620041fa565b620018358862001f6e565b50506001600055505050505050565b600260005414156200186a5760405162461bcd60e51b8152600401620007b99062004265565b60026000556001600160a01b038616620018985760405162461bcd60e51b8152600401620007b990620041c3565b6000620018a58862001c6e565b9050600080620018b58362001e92565b9150915080620019145760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f206578747261637420636861696e49442066726f6d2064604482015263656e6f6d60e01b6064820152608401620007b9565b600082848b8b8b8a8a60405160200162001935979695949392919062003dee565b60405160208183030381529060405280519060200120905060006200195e8488848933620026ad565b9050801562000b7c5760405163130d191f60e11b8152309063261a323e906200198c90889060040162003fd5565b60206040518083038186803b158015620019a557600080fd5b505afa158015620019ba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019e09190620039ff565b620019fb57620019fb85620019f587620026c2565b6200270d565b60405163a2cc698160e01b8152600090309063a2cc69819062001a2390899060040162003fd5565b60206040518083038186803b15801562001a3c57600080fd5b505afa15801562001a51573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a77919062003790565b90506001600160a01b03811662001ae25760405162461bcd60e51b815260206004820152602860248201527f74686520766f756368657220666f72207468652064656e6f6d20646f6573206e6044820152671bdd08195e1a5cdd60c21b6064820152608401620007b9565b62001af1818d8d8d8d62002937565b62001afc8562002ad4565b6000600660008781526020019081526020016000205490507f4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53878e848f8f8d8760405162001b51979695949392919062004034565b60405180910390a150505050600160005550505050505050505050565b6001600160a01b0381166000908152600e6020526040808220815180830190925280546060939291908290829062001ba690620044af565b80601f016020809104026020016040519081016040528092919081815260200182805462001bd490620044af565b801562001c255780601f1062001bf95761010080835404028352916020019162001c25565b820191906000526020600020905b81548152906001019060200180831162001c0757829003601f168201915b50505091835250506001919091015460ff1615156020918201528101519091501562001c52575192915050565b5050604080516020810190915260008152919050565b50919050565b60606200078d8262002af5565b60008060008062001c9385602f60f81b600262002b7b565b915091508062001caa575060009485945092505050565b60008062001cc78762001cbf8660016200434d565b895162002c17565b915091508062001ce05750600096879650945050505050565b600062001ced8362002d39565b98600198509650505050505050565b600062001d118686868686600a600c62002f54565b9695505050505050565b801562001d8a5760008581526011602090815260408083206001600160a01b0388168452825280832086845290915290205462001d599083620023d4565b60008681526011602090815260408083206001600160a01b0389168452825280832087845290915290205562001ded565b60008581526011602090815260408083206001600160a01b0388168452825280832086845290915290205462001dc19083620032f0565b60008681526011602090815260408083206001600160a01b038916845282528083208784529091529020555b5050505050565b600081815260046020526040812080546001929062001e159084906200434d565b909155505050565b604051637a94c56560e11b81526001600160a01b038481166004830152602482018490526044820183905285919082169063f5298aca90606401600060405180830381600087803b15801562001e7257600080fd5b505af115801562001e87573d6000803e3d6000fd5b505050505050505050565b60008060008062001eaa85602f60f81b600162002b7b565b915091508062001ec1575060009485945092505050565b60008062001ed28760008662002c17565b915091508062001eeb5750600096879650945050505050565b60008062001ef984620032fe565b915091508062001f1457506000988998509650505050505050565b50976001975095505050505050565b600081815260056020526040812080546001929062001f449084906200434d565b90915550506000908152600860209081526040808320600583528184205484529091529020439055565b600062001f7b82620033e6565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001fce57600080fd5b505afa15801562001fe3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002009919062003bc1565b9050806200201657505050565b6002546040805163dba9de6b60e01b8152815160009384936001600160a01b039091169263dba9de6b9260048083019392829003018186803b1580156200205c57600080fd5b505afa15801562002071573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002097919062003c6d565b9150915080620020e25760405162461bcd60e51b81526020600482015260156024820152746661696c656420746f206765742064796e6173747960581b6044820152606401620007b9565b600080620020f186856200118c565b815191935091508062002108575050505050505050565b808251146200216c5760405162461bcd60e51b815260206004820152602960248201527f76616c696461746f7220616e6420736861726520616d6f756e7420636f756e74604482015268040dad2e6dac2e8c6d60bb1b6064820152608401620007b9565b6000805b82811015620021c157620021aa84828151811062002192576200219262004547565b602002602001015183620023d490919063ffffffff16565b915080620021b881620044e6565b91505062002170565b5080620021d357505050505050505050565b8660005b83811015620022f05760006200221f846200221888858151811062002200576200220062004547565b60200260200101518d620023bf90919063ffffffff16565b9062003403565b905086828151811062002236576200223662004547565b60200260200101516001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050620022cb578682815181106200227f576200227f62004547565b60200260200101516001600160a01b03167f562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f488582604051620022c291815260200190565b60405180910390a25b620022d78382620032f0565b9250508080620022e790620044e6565b915050620021d7565b5084620022ff60018562004426565b8151811062002312576200231262004547565b60200260200101516001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050620023b357846200235460018562004426565b8151811062002367576200236762004547565b60200260200101516001600160a01b03167f562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f488582604051620023aa91815260200190565b60405180910390a25b50505050505050505050565b6000620023cd8284620043d9565b9392505050565b6000620023cd82846200434d565b60606000620023f3836002620043d9565b620024009060026200434d565b6001600160401b038111156200241a576200241a6200455d565b6040519080825280601f01601f19166020018201604052801562002445576020820181803683370190505b509050600360fc1b8160008151811062002463576200246362004547565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062002495576200249562004547565b60200101906001600160f81b031916908160001a9053506000620024bb846002620043d9565b620024c89060016200434d565b90505b60018111156200254a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062002500576200250062004547565b1a60f81b82828151811062002519576200251962004547565b60200101906001600160f81b031916908160001a90535060049490941c93620025428162004495565b9050620024cb565b508315620023cd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620007b9565b6060620025d7620025ac8562003411565b8484604051602001620025c29392919062003d8e565b60405160208183030381529060405262001c6e565b949350505050565b6000818152600360205260408120805460019290620026009084906200434d565b90915550506000908152600760209081526040808320600383528184205484529091529020439055565b60008060007f0e89341c5b7431e95282621bb9c54e51fb5c29234df43f9e19151d3892fb0380846040516024016200266491815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092178252805190925060009182919082895af195945050505050565b600062001d1186868686866009600b62002f54565b60008030905060008184604051620026da9062003579565b620026e792919062003f05565b604051809103906000f08015801562002704573d6000803e3d6000fd5b50949350505050565b60006200271a8362001c6e565b60405163130d191f60e11b8152909150309063261a323e906200274290849060040162003fd5565b60206040518083038186803b1580156200275b57600080fd5b505afa15801562002770573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027969190620039ff565b15620027f05760405162461bcd60e51b815260206004820152602260248201527f616e20766f756368657220636f6e747261637420616c72656164792065786973604482015261747360f01b6064820152608401620007b9565b6040805180820182526001600160a01b0384168152600160208201529051600d906200281e90849062003d70565b90815260408051918290036020908101832084518154958301511515600160a01b026001600160a81b03199096166001600160a01b039182161795909517905582820182528483526001838201529285166000908152600e845220815180519293919262002890928492019062003587565b506020918201516001918201805460ff1916911515919091179055600f80548083019091557f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b038616179055601080549182018155600052825162002931927f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6729092019184019062003587565b50505050565b60405163bb7fde7160e01b815285906001600160a01b0382169063bb7fde71906200296d90889088908890889060040162003f2b565b600060405180830381600087803b1580156200298857600080fd5b505af19250505080156200299a575060015b62002acc57600254604080516330ab9a3d60e21b815290516000926001600160a01b03169163c2ae68f4916004808301926020929190829003018186803b158015620029e557600080fd5b505afa158015620029fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a20919062003790565b60405163bb7fde7160e01b81529091506001600160a01b0383169063bb7fde719062002a5790849089908990899060040162003f2b565b600060405180830381600087803b15801562002a7257600080fd5b505af115801562002a87573d6000803e3d6000fd5b505050507fcd813f00492d666cb537f68f09107ec097b5d07dfa6bcdc07ddf5c733cb73e718183878760405162002ac2949392919062003ea0565b60405180910390a1505b505050505050565b600081815260066020526040812080546001929062001e159084906200434d565b60608160005b815181101562002b745762002b3382828151811062002b1e5762002b1e62004547565b01602001516001600160f81b03191662003526565b82828151811062002b485762002b4862004547565b60200101906001600160f81b031916908160001a9053508062002b6b81620044e6565b91505062002afb565b5092915050565b82516000908190859082805b8281101562002c0357876001600160f81b03191684828151811062002bb05762002bb062004547565b01602001516001600160f81b031916141562002bee5762002bd36001836200434d565b91508682141562002bee5794506001935062002c0f92505050565b8062002bfa81620044e6565b91505062002b87565b50600080945094505050505b935093915050565b82516060906000908484101562002c435750506040805160208101909152600080825290915062002c0f565b8084111562002c675750506040805160208101909152600080825290915062002c0f565b85600062002c768688620032f0565b6001600160401b0381111562002c905762002c906200455d565b6040519080825280601f01601f19166020018201604052801562002cbb576020820181803683370190505b509050865b8681101562001f145782818151811062002cde5762002cde62004547565b01602001516001600160f81b0319168262002cfa838b620032f0565b8151811062002d0d5762002d0d62004547565b60200101906001600160f81b031916908160001a9053508062002d3081620044e6565b91505062002cc0565b60008181808060025b602a81101562002f495762002d5a61010085620043a7565b935084818151811062002d715762002d7162004547565b016020015160f81c92508462002d898260016200434d565b8151811062002d9c5762002d9c62004547565b016020015160f81c915060616001600160a01b0384161080159062002dcb57506066836001600160a01b031611155b1562002de65762002dde605784620043fb565b925062002e59565b6041836001600160a01b03161015801562002e0b57506046836001600160a01b031611155b1562002e1e5762002dde603784620043fb565b6030836001600160a01b03161015801562002e4357506039836001600160a01b031611155b1562002e595762002e56603084620043fb565b92505b6061826001600160a01b03161015801562002e7e57506066826001600160a01b031611155b1562002e995762002e91605783620043fb565b915062002f0c565b6041826001600160a01b03161015801562002ebe57506046826001600160a01b031611155b1562002ed15762002e91603783620043fb565b6030826001600160a01b03161015801562002ef657506039826001600160a01b031611155b1562002f0c5762002f09603083620043fb565b91505b8162002f1a846010620043a7565b62002f2691906200431f565b62002f3290856200431f565b935062002f416002826200434d565b905062002d42565b509195945050505050565b600060015488148062002fe257506002546040516343b71f0560e01b8152600481018a90526001600160a01b03909116906343b71f059060240160206040518083038186803b15801562002fa757600080fd5b505afa15801562002fbc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002fe29190620039ff565b620030225760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b6044820152606401620007b9565b6000888152602084905260409020546200303e9060016200434d565b85146200304e57506000620032e5565b600088815260208381526040808320898452909152812060015460609081908c908114156200307a5750465b62003086818d6200118c565b9350915060005b8251811015620031fa57896001600160a01b0316838281518110620030b657620030b662004547565b60200260200101516001600160a01b031614620030d357620031e5565b6001955060005b60018601548110156200317d57856001018181548110620030ff57620030ff62004547565b6000918252602090912001546001600160a01b038c811691161415620031685760405162461bcd60e51b815260206004820152601c60248201527f546869732076616c696461746f7220616c726561647920766f746564000000006044820152606401620007b9565b806200317481620044e6565b915050620030da565b508c85556001808601805491820181556000908152602090200180546001600160a01b031916331790558351620031df90859083908110620031c357620031c362004547565b60200260200101518660020154620023d490919063ffffffff16565b60028601555b80620031f181620044e6565b9150506200308d565b505050826200323e5760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b6044820152606401620007b9565b6000805b82518110156200327c576200326583828151811062002192576200219262004547565b9150806200327381620044e6565b91505062003242565b506200328a816002620023bf565b60028401546200329c906003620023bf565b10620032dc5760008c815260208890526040902054620032be9060016200434d565b60008d8152602089905260409020555060019350620032e592505050565b60009450505050505b979650505050505050565b6000620023cd828462004426565b80516000908190839082805b82811015620033d95760308482815181106200332a576200332a62004547565b016020015160f81c108015906200335e5750603984828151811062003353576200335362004547565b016020015160f81c11155b15620033b5576200337182600a620023bf565b9150620033ad60308583815181106200338e576200338e62004547565b0160200151620033a2919060f81c62004440565b839060ff16620023d4565b9150620033c4565b50600096879650945050505050565b80620033d081620044e6565b9150506200330a565b5095600195509350505050565b600080600154831415620033fc5750466200078d565b5090919050565b6000620023cd828462004390565b606081620034365750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200346657806200344d81620044e6565b91506200345e9050600a8362004390565b91506200343a565b6000816001600160401b038111156200348357620034836200455d565b6040519080825280601f01601f191660200182016040528015620034ae576020820181803683370190505b5090505b8415620025d757620034c660018362004426565b9150620034d5600a8662004504565b620034e29060306200434d565b60f81b818381518110620034fa57620034fa62004547565b60200101906001600160f81b031916908160001a9053506200351e600a8662004390565b9450620034b2565b6000604160f81b6001600160f81b0319831610801590620035555750602d60f91b6001600160f81b0319831611155b1562003575576200356c60f883901c602062004368565b60f81b92915050565b5090565b611e26806200458d83390190565b8280546200359590620044af565b90600052602060002090601f016020900481019282620035b9576000855562003604565b82601f10620035d457805160ff191683800117855562003604565b8280016001018555821562003604579182015b8281111562003604578251825591602001919060010190620035e7565b50620035759291505b808211156200357557600081556001016200360d565b600082601f8301126200363557600080fd5b813560206200364e6200364883620042cf565b6200429c565b80838252828201915082860187848660051b89010111156200366f57600080fd5b60005b85811015620036905781358452928401929084019060010162003672565b5090979650505050505050565b600082601f830112620036af57600080fd5b81516020620036c26200364883620042cf565b80838252828201915082860187848660051b8901011115620036e357600080fd5b60005b858110156200369057815184529284019290840190600101620036e6565b805180151581146200371557600080fd5b919050565b600082601f8301126200372c57600080fd5b81356200373d6200364882620042f5565b8181528460208386010111156200375357600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156200378357600080fd5b8135620023cd8162004573565b600060208284031215620037a357600080fd5b8151620023cd8162004573565b600080600080600060a08688031215620037c957600080fd5b8535620037d68162004573565b94506020860135620037e88162004573565b935060408601356001600160401b03808211156200380557600080fd5b6200381389838a0162003623565b945060608801359150808211156200382a57600080fd5b6200383889838a0162003623565b935060808801359150808211156200384f57600080fd5b506200385e888289016200371a565b9150509295509295909350565b600080600080608085870312156200388257600080fd5b84356200388f8162004573565b93506020850135620038a18162004573565b93969395505050506040820135916060013590565b600080600080600060a08688031215620038cf57600080fd5b8535620038dc8162004573565b94506020860135620038ee8162004573565b9350604086013592506060860135915060808601356001600160401b038111156200391857600080fd5b6200385e888289016200371a565b600080604083850312156200393a57600080fd5b82516001600160401b03808211156200395257600080fd5b818501915085601f8301126200396757600080fd5b815160206200397a6200364883620042cf565b8083825282820191508286018a848660051b89010111156200399b57600080fd5b600096505b84871015620039cb578051620039b68162004573565b835260019690960195918301918301620039a0565b5091880151919650909350505080821115620039e657600080fd5b50620039f5858286016200369d565b9150509250929050565b60006020828403121562003a1257600080fd5b620023cd8262003704565b60006020828403121562003a3057600080fd5b81356001600160e01b031981168114620023cd57600080fd5b60006020828403121562003a5c57600080fd5b81356001600160401b0381111562003a7357600080fd5b620025d7848285016200371a565b60006020828403121562003a9457600080fd5b81516001600160401b0381111562003aab57600080fd5b8201601f8101841362003abd57600080fd5b805162003ace6200364882620042f5565b81815285602083850101111562003ae457600080fd5b62003af782602083016020860162004466565b95945050505050565b600080600080600080600060e0888a03121562003b1c57600080fd5b87356001600160401b038082111562003b3457600080fd5b62003b428b838c016200371a565b985060208a0135915062003b568262004573565b90965060408901359550606089013594506080890135908082111562003b7b57600080fd5b5062003b8a8a828b016200371a565b93505060a0880135915060c0880135905092959891949750929550565b60006020828403121562003bba57600080fd5b5035919050565b60006020828403121562003bd457600080fd5b5051919050565b600080600080600060a0868803121562003bf457600080fd5b85359450602086013562003c088162004573565b9350604086013562003c1a8162004573565b94979396509394606081013594506080013592915050565b60008060006060848603121562003c4857600080fd5b83359250602084013562003c5c8162004573565b929592945050506040919091013590565b6000806040838503121562003c8157600080fd5b8251915062003c936020840162003704565b90509250929050565b6000806040838503121562003cb057600080fd5b50508035926020909101359150565b600080600080600080600060e0888a03121562003cdb57600080fd5b8735965060208801356001600160401b0381111562003cf957600080fd5b62003d078a828b016200371a565b965050604088013562003d1a8162004573565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b6000815180845262003d5c81602086016020860162004466565b601f01601f19169290920160200192915050565b6000825162003d8481846020870162004466565b9190910192915050565b6000845162003da281846020890162004466565b8083019050602f60f81b808252855162003dc4816001850160208a0162004466565b6001920191820152835162003de181600284016020880162004466565b0160020195945050505050565b8781526000875162003e08816020850160208c0162004466565b60609790971b6001600160601b03191660209290970191820196909652603481019490945260548401929092526074830152609482015260b4019392505050565b8781526000875162003e63816020850160208c0162004466565b60209201918201969096526040810194909452606092831b6001600160601b031916928401929092526074830152609482015260b4019392505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090620032e59083018462003d42565b6001600160a01b0383168152604060208201819052600090620025d79083018462003d42565b60018060a01b038516815283602082015282604082015260806060820152600062001d11608083018462003d42565b604080825283519082018190526000906020906060840190828701845b8281101562003f9e5781516001600160a01b03168452928401929084019060010162003f77565b5050508381038285015284518082528583019183019060005b81811015620036905783518352928401929184019160010162003fb7565b602081526000620023cd602083018462003d42565b60c08152600062003fff60c083018962003d42565b6001600160a01b0397881660208401529590961660408201526060810193909352608083019190915260a09091015292915050565b60e0815260006200404960e083018a62003d42565b6001600160a01b0398891660208401529690971660408201526060810194909452608084019290925260a083015260c09091015292915050565b6000610100808352620040998184018c62003d42565b6001600160a01b038b81166020860152604085018b9052891660608501526080840188905260a0840187905283810360c08501529050620040db818662003d42565b9150508260e08301529998505050505050505050565b6000610100808352620041078184018b62003d42565b6001600160a01b03998a16602085810191909152604085019990995296909816606083015250608081019390935260a083019190915281830360c08301526000835260e0909101520192915050565b60c0815260006200416b60c083018962003d42565b6001600160a01b039790971660208301525060408101949094526060840192909252608083015260a090910152919050565b604081526000620041b2604083018562003d42565b905082151560208301529392505050565b6020808252601b908201527f63616e6e6f742073656e6420746f207a65726f20616464726573730000000000604082015260600190565b60208082526045908201527f6e6f7420656e6f75676820544675656c20286d73672e76616c75652920746f2060408201527f636f766572207468652063726f73732d636861696e207472616e73616374696f6060820152646e2066656560d81b608082015260a00190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f191681016001600160401b0381118282101715620042c757620042c76200455d565b604052919050565b60006001600160401b03821115620042eb57620042eb6200455d565b5060051b60200190565b60006001600160401b038211156200431157620043116200455d565b50601f01601f191660200190565b60006001600160a01b038281168482168083038211156200434457620043446200451b565b01949350505050565b600082198211156200436357620043636200451b565b500190565b600060ff821660ff84168060ff038211156200438857620043886200451b565b019392505050565b600082620043a257620043a262004531565b500490565b60006001600160a01b0382811684821681151582840482111615620043d057620043d06200451b565b02949350505050565b6000816000190483118215151615620043f657620043f66200451b565b500290565b60006001600160a01b03838116908316818110156200441e576200441e6200451b565b039392505050565b6000828210156200443b576200443b6200451b565b500390565b600060ff821660ff8416808210156200445d576200445d6200451b565b90039392505050565b60005b838110156200448357818101518382015260200162004469565b83811115620029315750506000910152565b600081620044a757620044a76200451b565b506000190190565b600181811c90821680620044c457607f821691505b6020821081141562001c6857634e487b7160e01b600052602260045260246000fd5b6000600019821415620044fd57620044fd6200451b565b5060010190565b60008262004516576200451662004531565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200458957600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001e2638038062001e2683398101604081905262000034916200014e565b604080516020810190915260008152829062000050816200008f565b50600380546001600160a01b0319166001600160a01b0392909216919091179055805162000086906004906020840190620000a8565b505050620002a1565b8051620000a4906002906020840190620000a8565b5050565b828054620000b6906200024e565b90600052602060002090601f016020900481019282620000da576000855562000125565b82601f10620000f557805160ff191683800117855562000125565b8280016001018555821562000125579182015b828111156200012557825182559160200191906001019062000108565b506200013392915062000137565b5090565b5b8082111562000133576000815560010162000138565b600080604083850312156200016257600080fd5b82516001600160a01b03811681146200017a57600080fd5b602084810151919350906001600160401b03808211156200019a57600080fd5b818601915086601f830112620001af57600080fd5b815181811115620001c457620001c46200028b565b604051601f8201601f19908116603f01168101908382118183101715620001ef57620001ef6200028b565b8160405282815289868487010111156200020857600080fd5b600093505b828410156200022c57848401860151818501870152928501926200020d565b828411156200023e5760008684830101525b8096505050505050509250929050565b600181811c908216806200026357607f821691505b602082108114156200028557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611b7580620002b16000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b1161007c5780638da5cb5b146101a4578063a22cb465146101b7578063bb7fde71146101ca578063c370b042146101dd578063e985e9c5146101e5578063f242432a146101f8578063f5298aca1461020b57600080fd5b8062fdd58e146100ce57806301ffc9a7146100f45780630e89341c146101175780632eb2c2d614610137578063442890d51461014c5780634e1273f414610171578063880cdc3114610191575b600080fd5b6100e16100dc3660046114e1565b61021e565b6040519081526020015b60405180910390f35b610107610102366004611682565b6102b5565b60405190151581526020016100eb565b61012a6101253660046116bc565b610307565b6040516100eb9190611841565b61014a610145366004611398565b6103a9565b005b6003546001600160a01b03165b6040516001600160a01b0390911681526020016100eb565b61018461017f3660046115b2565b610440565b6040516100eb9190611800565b61014a61019f36600461134a565b610569565b600354610159906001600160a01b031681565b61014a6101c53660046114a5565b6105fc565b61014a6101d836600461153e565b61060b565b61012a61066f565b6101076101f3366004611365565b610701565b61014a610206366004611441565b61072f565b61014a61021936600461150b565b6107b6565b60006001600160a01b03831661028f5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806102e657506001600160e01b031982166303a24d0760e21b145b8061030157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008181526005602052604090208054606091906103249061199d565b80601f01602080910402602001604051908101604052809291908181526020018280546103509061199d565b801561039d5780601f106103725761010080835404028352916020019161039d565b820191906000526020600020905b81548152906001019060200180831161038057829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103c557506103c58533610701565b61042c5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610286565b61043985858585856108d8565b5050505050565b606081518351146104a55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610286565b600083516001600160401b038111156104c0576104c0611a4b565b6040519080825280602002602001820160405280156104e9578160200160208202803683370190505b50905060005b84518110156105615761053485828151811061050d5761050d611a35565b602002602001015185838151811061052757610527611a35565b602002602001015161021e565b82828151811061054657610546611a35565b602090810291909101015261055a81611a04565b90506104ef565b509392505050565b6003546001600160a01b031633146105935760405162461bcd60e51b81526004016102869061192b565b600354604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b610607338383610ab5565b5050565b6003546001600160a01b031633146106355760405162461bcd60e51b81526004016102869061192b565b61065084848460405180602001604052806000815250610b96565b600083815260056020908152604090912082516104399284019061119a565b60606004805461067e9061199d565b80601f01602080910402602001604051908101604052809291908181526020018280546106aa9061199d565b80156106f75780601f106106cc576101008083540402835291602001916106f7565b820191906000526020600020905b8154815290600101906020018083116106da57829003601f168201915b5050505050905090565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6001600160a01b03851633148061074b575061074b8533610701565b6107a95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610286565b6104398585858585610c98565b6003546001600160a01b031633146107e05760405162461bcd60e51b81526004016102869061192b565b806107eb848461021e565b10156108545760405162461bcd60e51b815260206004820152603260248201527f566f7563686572206f776e657220646f6573206e6f74206861766520656e6f7560448201527133b4103130b630b731b2903a3790313ab93760711b6064820152608401610286565b6003546001600160a01b031661086a8482610701565b6108c75760405162461bcd60e51b815260206004820152602860248201527f566f7563686572206f776e657220646964206e6f7420617070726f766520746f60448201526735b2b710313ab93760c11b6064820152608401610286565b6108d2848484610db0565b50505050565b815183511461093a5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610286565b6001600160a01b0384166109605760405162461bcd60e51b81526004016102869061189c565b3360005b8451811015610a4757600085828151811061098157610981611a35565b60200260200101519050600085838151811061099f5761099f611a35565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156109ef5760405162461bcd60e51b8152600401610286906118e1565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610a2c908490611985565b9250508190555050505080610a4090611a04565b9050610964565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610a97929190611813565b60405180910390a4610aad818787878787610f1a565b505050505050565b816001600160a01b0316836001600160a01b03161415610b295760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610286565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610bf65760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610286565b336000610c0285611085565b90506000610c0f85611085565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610c41908490611985565b909155505060408051878152602081018790526001600160a01b03808a169260009291871691600080516020611b20833981519152910160405180910390a4610c8f836000898989896110d0565b50505050505050565b6001600160a01b038416610cbe5760405162461bcd60e51b81526004016102869061189c565b336000610cca85611085565b90506000610cd785611085565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015610d1a5760405162461bcd60e51b8152600401610286906118e1565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290610d57908490611985565b909155505060408051888152602081018890526001600160a01b03808b16928c82169291881691600080516020611b20833981519152910160405180910390a4610da5848a8a8a8a8a6110d0565b505050505050505050565b6001600160a01b038316610e125760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610286565b336000610e1e84611085565b90506000610e2b84611085565b60408051602080820183526000918290528882528181528282206001600160a01b038b1683529052205490915084811015610eb45760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610286565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a9052909290881691600080516020611b20833981519152910160405180910390a4604080516020810190915260009052610c8f565b6001600160a01b0384163b15610aad5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610f5e908990899088908890889060040161175d565b602060405180830381600087803b158015610f7857600080fd5b505af1925050508015610fa8575060408051601f3d908101601f19168201909252610fa59181019061169f565b60015b61105557610fb4611a61565b806308c379a01415610fee5750610fc9611a7d565b80610fd45750610ff0565b8060405162461bcd60e51b81526004016102869190611841565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610286565b6001600160e01b0319811663bc197c8160e01b14610c8f5760405162461bcd60e51b815260040161028690611854565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106110bf576110bf611a35565b602090810291909101015292915050565b6001600160a01b0384163b15610aad5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061111490899089908890889088906004016117bb565b602060405180830381600087803b15801561112e57600080fd5b505af192505050801561115e575060408051601f3d908101601f1916820190925261115b9181019061169f565b60015b61116a57610fb4611a61565b6001600160e01b0319811663f23a6e6160e01b14610c8f5760405162461bcd60e51b815260040161028690611854565b8280546111a69061199d565b90600052602060002090601f0160209004810192826111c8576000855561120e565b82601f106111e157805160ff191683800117855561120e565b8280016001018555821561120e579182015b8281111561120e5782518255916020019190600101906111f3565b5061121a92915061121e565b5090565b5b8082111561121a576000815560010161121f565b60006001600160401b0383111561124c5761124c611a4b565b604051611263601f8501601f1916602001826119d8565b80915083815284848401111561127857600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146112a757600080fd5b919050565b600082601f8301126112bd57600080fd5b813560206112ca82611962565b6040516112d782826119d8565b8381528281019150858301600585901b870184018810156112f757600080fd5b60005b85811015611316578135845292840192908401906001016112fa565b5090979650505050505050565b600082601f83011261133457600080fd5b61134383833560208501611233565b9392505050565b60006020828403121561135c57600080fd5b61134382611290565b6000806040838503121561137857600080fd5b61138183611290565b915061138f60208401611290565b90509250929050565b600080600080600060a086880312156113b057600080fd5b6113b986611290565b94506113c760208701611290565b935060408601356001600160401b03808211156113e357600080fd5b6113ef89838a016112ac565b9450606088013591508082111561140557600080fd5b61141189838a016112ac565b9350608088013591508082111561142757600080fd5b5061143488828901611323565b9150509295509295909350565b600080600080600060a0868803121561145957600080fd5b61146286611290565b945061147060208701611290565b9350604086013592506060860135915060808601356001600160401b0381111561149957600080fd5b61143488828901611323565b600080604083850312156114b857600080fd5b6114c183611290565b9150602083013580151581146114d657600080fd5b809150509250929050565b600080604083850312156114f457600080fd5b6114fd83611290565b946020939093013593505050565b60008060006060848603121561152057600080fd5b61152984611290565b95602085013595506040909401359392505050565b6000806000806080858703121561155457600080fd5b61155d85611290565b9350602085013592506040850135915060608501356001600160401b0381111561158657600080fd5b8501601f8101871361159757600080fd5b6115a687823560208401611233565b91505092959194509250565b600080604083850312156115c557600080fd5b82356001600160401b03808211156115dc57600080fd5b818501915085601f8301126115f057600080fd5b813560206115fd82611962565b60405161160a82826119d8565b8381528281019150858301600585901b870184018b101561162a57600080fd5b600096505b848710156116545761164081611290565b83526001969096019591830191830161162f565b509650508601359250508082111561166b57600080fd5b50611678858286016112ac565b9150509250929050565b60006020828403121561169457600080fd5b813561134381611b06565b6000602082840312156116b157600080fd5b815161134381611b06565b6000602082840312156116ce57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611705578151875295820195908201906001016116e9565b509495945050505050565b6000815180845260005b818110156117365760208185018101518683018201520161171a565b81811115611748576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090611789908301866116d5565b828103606084015261179b81866116d5565b905082810360808401526117af8185611710565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906117f590830184611710565b979650505050505050565b60208152600061134360208301846116d5565b60408152600061182660408301856116d5565b828103602084015261183881856116d5565b95945050505050565b6020815260006113436020830184611710565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b60006001600160401b0382111561197b5761197b611a4b565b5060051b60200190565b6000821982111561199857611998611a1f565b500190565b600181811c908216806119b157607f821691505b602082108114156119d257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b03811182821017156119fd576119fd611a4b565b6040525050565b6000600019821415611a1857611a18611a1f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115611a7a5760046000803e5060005160e01c5b90565b600060443d1015611a8b5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715611aba57505050505090565b8285019150815181811115611ad25750505050505090565b843d8701016020828501011115611aec5750505050505090565b611afb602082860101876119d8565b509095945050505050565b6001600160e01b031981168114611b1c57600080fd5b5056fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a2646970667358221220cfddc52bb7a4b539948e87792aa968aa64b47f602c0b08ac0c28b3d1ab78f5aa64736f6c63430008070033a2646970667358221220f20886ce30677c4735a372b9e14a71ab0fa57d2592197123cada09a0fefdb6d864736f6c63430008070033",
}

// TNT1155TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use TNT1155TokenBankMetaData.ABI instead.
var TNT1155TokenBankABI = TNT1155TokenBankMetaData.ABI

// TNT1155TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TNT1155TokenBankMetaData.Bin instead.
var TNT1155TokenBankBin = TNT1155TokenBankMetaData.Bin

// DeployTNT1155TokenBank deploys a new Ethereum contract, binding an instance of TNT1155TokenBank to it.
func DeployTNT1155TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, mainchainID_ *big.Int, chainRegistrar_ common.Address) (common.Address, *types.Transaction, *TNT1155TokenBank, error) {
	parsed, err := TNT1155TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TNT1155TokenBankBin), backend, mainchainID_, chainRegistrar_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TNT1155TokenBank{TNT1155TokenBankCaller: TNT1155TokenBankCaller{contract: contract}, TNT1155TokenBankTransactor: TNT1155TokenBankTransactor{contract: contract}, TNT1155TokenBankFilterer: TNT1155TokenBankFilterer{contract: contract}}, nil
}

// TNT1155TokenBank is an auto generated Go binding around an Ethereum contract.
type TNT1155TokenBank struct {
	TNT1155TokenBankCaller     // Read-only binding to the contract
	TNT1155TokenBankTransactor // Write-only binding to the contract
	TNT1155TokenBankFilterer   // Log filterer for contract events
}

// TNT1155TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type TNT1155TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT1155TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TNT1155TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT1155TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TNT1155TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT1155TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TNT1155TokenBankSession struct {
	Contract     *TNT1155TokenBank // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TNT1155TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TNT1155TokenBankCallerSession struct {
	Contract *TNT1155TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// TNT1155TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TNT1155TokenBankTransactorSession struct {
	Contract     *TNT1155TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// TNT1155TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type TNT1155TokenBankRaw struct {
	Contract *TNT1155TokenBank // Generic contract binding to access the raw methods on
}

// TNT1155TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TNT1155TokenBankCallerRaw struct {
	Contract *TNT1155TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// TNT1155TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TNT1155TokenBankTransactorRaw struct {
	Contract *TNT1155TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTNT1155TokenBank creates a new instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBank(address common.Address, backend bind.ContractBackend) (*TNT1155TokenBank, error) {
	contract, err := bindTNT1155TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBank{TNT1155TokenBankCaller: TNT1155TokenBankCaller{contract: contract}, TNT1155TokenBankTransactor: TNT1155TokenBankTransactor{contract: contract}, TNT1155TokenBankFilterer: TNT1155TokenBankFilterer{contract: contract}}, nil
}

// NewTNT1155TokenBankCaller creates a new read-only instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBankCaller(address common.Address, caller bind.ContractCaller) (*TNT1155TokenBankCaller, error) {
	contract, err := bindTNT1155TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankCaller{contract: contract}, nil
}

// NewTNT1155TokenBankTransactor creates a new write-only instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*TNT1155TokenBankTransactor, error) {
	contract, err := bindTNT1155TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTransactor{contract: contract}, nil
}

// NewTNT1155TokenBankFilterer creates a new log filterer instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*TNT1155TokenBankFilterer, error) {
	contract, err := bindTNT1155TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankFilterer{contract: contract}, nil
}

// bindTNT1155TokenBank binds a generic wrapper to an already deployed contract.
func bindTNT1155TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TNT1155TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT1155TokenBank *TNT1155TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT1155TokenBank.Contract.TNT1155TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT1155TokenBank *TNT1155TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.TNT1155TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT1155TokenBank *TNT1155TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.TNT1155TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT1155TokenBank *TNT1155TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT1155TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT1155TokenBank *TNT1155TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT1155TokenBank *TNT1155TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.contract.Transact(opts, method, params...)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) AllDenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "allDenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT1155TokenBank.Contract.AllDenoms(&_TNT1155TokenBank.CallOpts, arg0)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT1155TokenBank.Contract.AllDenoms(&_TNT1155TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) AllVouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "allVouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT1155TokenBank.Contract.AllVouchers(&_TNT1155TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT1155TokenBank.Contract.AllVouchers(&_TNT1155TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) DenomToVoucherLookup(opts *bind.CallOpts, arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "denomToVoucherLookup", arg0)

	outstruct := new(struct {
		ContractAddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT1155TokenBank.Contract.DenomToVoucherLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT1155TokenBank.Contract.DenomToVoucherLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankSession) Exists(denom string) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists(&_TNT1155TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists(&_TNT1155TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) Exists0(opts *bind.CallOpts, voucherAddress common.Address) (bool, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "exists0", voucherAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists0(&_TNT1155TokenBank.CallOpts, voucherAddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists0(&_TNT1155TokenBank.CallOpts, voucherAddress)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetAdjustedValidatorSet(opts *bind.CallOpts, subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getAdjustedValidatorSet", subchainID, dynasty)

	outstruct := new(struct {
		Validators   []common.Address
		ShareAmounts []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Validators = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.ShareAmounts = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT1155TokenBank.Contract.GetAdjustedValidatorSet(&_TNT1155TokenBank.CallOpts, subchainID, dynasty)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT1155TokenBank.Contract.GetAdjustedValidatorSet(&_TNT1155TokenBank.CallOpts, subchainID, dynasty)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetDenom(opts *bind.CallOpts, voucherContractAddr common.Address) (string, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getDenom", voucherContractAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT1155TokenBank.Contract.GetDenom(&_TNT1155TokenBank.CallOpts, voucherContractAddr)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT1155TokenBank.Contract.GetDenom(&_TNT1155TokenBank.CallOpts, voucherContractAddr)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetMaxProcessedTokenLockNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getMaxProcessedTokenLockNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetMaxProcessedVoucherBurnNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getMaxProcessedVoucherBurnNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetTokenLockEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getTokenLockEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetTokenLockEventHeight(&_TNT1155TokenBank.CallOpts, chainID, eventNonce)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetTokenLockEventHeight(&_TNT1155TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetVoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getVoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT1155TokenBank.Contract.GetVoucher(&_TNT1155TokenBank.CallOpts, denom)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT1155TokenBank.Contract.GetVoucher(&_TNT1155TokenBank.CallOpts, denom)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetVoucherBurnEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getVoucherBurnEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT1155TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT1155TokenBank.CallOpts, chainID, eventNonce)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) MainchainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "mainchainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) MainchainID() (*big.Int, error) {
	return _TNT1155TokenBank.Contract.MainchainID(&_TNT1155TokenBank.CallOpts)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) MainchainID() (*big.Int, error) {
	return _TNT1155TokenBank.Contract.MainchainID(&_TNT1155TokenBank.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TNT1155TokenBank.Contract.SupportsInterface(&_TNT1155TokenBank.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TNT1155TokenBank.Contract.SupportsInterface(&_TNT1155TokenBank.CallOpts, interfaceId)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TokenLockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "tokenLockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenLockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenLockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TokenLockVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "tokenLockVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.TokenLockVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.TokenLockVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TokenUnlockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "tokenUnlockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenUnlockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenUnlockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TotalLockedAmounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "totalLockedAmounts", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TotalLockedAmounts(&_TNT1155TokenBank.CallOpts, arg0, arg1, arg2)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TotalLockedAmounts(&_TNT1155TokenBank.CallOpts, arg0, arg1, arg2)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherAddressToDenomLookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherAddressToDenomLookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT1155TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT1155TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherBurnNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherBurnNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherBurnVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherBurnVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherMintNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherMintNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherMintNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherMintNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0x46421652.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID, uint256 burnAmount) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) BurnVouchers(opts *bind.TransactOpts, sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int, burnAmount *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "burnVouchers", sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID, burnAmount)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0x46421652.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID, uint256 burnAmount) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int, burnAmount *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.BurnVouchers(&_TNT1155TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID, burnAmount)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0x46421652.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID, uint256 burnAmount) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int, burnAmount *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.BurnVouchers(&_TNT1155TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID, burnAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xe5992334.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT1155Contract, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockAmount) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) LockTokens(opts *bind.TransactOpts, targetChainID *big.Int, sourceChainTNT1155Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int, lockAmount *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "lockTokens", targetChainID, sourceChainTNT1155Contract, targetChainVoucherReceiver, tokenID, lockAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xe5992334.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT1155Contract, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockAmount) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) LockTokens(targetChainID *big.Int, sourceChainTNT1155Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int, lockAmount *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.LockTokens(&_TNT1155TokenBank.TransactOpts, targetChainID, sourceChainTNT1155Contract, targetChainVoucherReceiver, tokenID, lockAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xe5992334.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT1155Contract, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockAmount) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) LockTokens(targetChainID *big.Int, sourceChainTNT1155Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int, lockAmount *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.LockTokens(&_TNT1155TokenBank.TransactOpts, targetChainID, sourceChainTNT1155Contract, targetChainVoucherReceiver, tokenID, lockAmount)
}

// MintVouchers is a paid mutator transaction binding the contract method 0xe888e05b.
//
// Solidity: function mintVouchers(string denom, address targetChainVoucherReceiver, uint256 tokenID, uint256 mintAmount, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) MintVouchers(opts *bind.TransactOpts, denom string, targetChainVoucherReceiver common.Address, tokenID *big.Int, mintAmount *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "mintVouchers", denom, targetChainVoucherReceiver, tokenID, mintAmount, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0xe888e05b.
//
// Solidity: function mintVouchers(string denom, address targetChainVoucherReceiver, uint256 tokenID, uint256 mintAmount, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) MintVouchers(denom string, targetChainVoucherReceiver common.Address, tokenID *big.Int, mintAmount *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.MintVouchers(&_TNT1155TokenBank.TransactOpts, denom, targetChainVoucherReceiver, tokenID, mintAmount, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0xe888e05b.
//
// Solidity: function mintVouchers(string denom, address targetChainVoucherReceiver, uint256 tokenID, uint256 mintAmount, string tokenUri, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) MintVouchers(denom string, targetChainVoucherReceiver common.Address, tokenID *big.Int, mintAmount *big.Int, tokenUri string, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.MintVouchers(&_TNT1155TokenBank.TransactOpts, denom, targetChainVoucherReceiver, tokenID, mintAmount, tokenUri, dynasty, sourceChainTokenLockNonce)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155BatchReceived(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155BatchReceived(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155Received(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155Received(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x032c6bf2.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) UnlockTokens(opts *bind.TransactOpts, sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "unlockTokens", sourceChainID, denom, targetChainTokenReceiver, tokenID, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x032c6bf2.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.UnlockTokens(&_TNT1155TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x032c6bf2.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.UnlockTokens(&_TNT1155TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// TNT1155TokenBankFailedToSendTFuelIterator is returned from FilterFailedToSendTFuel and is used to iterate over the raw logs and unpacked data for FailedToSendTFuel events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankFailedToSendTFuelIterator struct {
	Event *TNT1155TokenBankFailedToSendTFuel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankFailedToSendTFuelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankFailedToSendTFuel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankFailedToSendTFuel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankFailedToSendTFuelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankFailedToSendTFuelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankFailedToSendTFuel represents a FailedToSendTFuel event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankFailedToSendTFuel struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterFailedToSendTFuel is a free log retrieval operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterFailedToSendTFuel(opts *bind.FilterOpts, receiver []common.Address) (*TNT1155TokenBankFailedToSendTFuelIterator, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "FailedToSendTFuel", receiverRule)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankFailedToSendTFuelIterator{contract: _TNT1155TokenBank.contract, event: "FailedToSendTFuel", logs: logs, sub: sub}, nil
}

// WatchFailedToSendTFuel is a free log subscription operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchFailedToSendTFuel(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankFailedToSendTFuel, receiver []common.Address) (event.Subscription, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "FailedToSendTFuel", receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankFailedToSendTFuel)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "FailedToSendTFuel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedToSendTFuel is a log parse operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseFailedToSendTFuel(log types.Log) (*TNT1155TokenBankFailedToSendTFuel, error) {
	event := new(TNT1155TokenBankFailedToSendTFuel)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "FailedToSendTFuel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankMintVouchersToFallbackReceiverIterator is returned from FilterMintVouchersToFallbackReceiver and is used to iterate over the raw logs and unpacked data for MintVouchersToFallbackReceiver events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankMintVouchersToFallbackReceiverIterator struct {
	Event *TNT1155TokenBankMintVouchersToFallbackReceiver // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankMintVouchersToFallbackReceiverIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankMintVouchersToFallbackReceiver)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankMintVouchersToFallbackReceiver)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankMintVouchersToFallbackReceiverIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankMintVouchersToFallbackReceiverIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankMintVouchersToFallbackReceiver represents a MintVouchersToFallbackReceiver event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankMintVouchersToFallbackReceiver struct {
	FallbackReceiver       common.Address
	VoucherContractAddress common.Address
	TokenID                *big.Int
	MintAmount             *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterMintVouchersToFallbackReceiver is a free log retrieval operation binding the contract event 0xcd813f00492d666cb537f68f09107ec097b5d07dfa6bcdc07ddf5c733cb73e71.
//
// Solidity: event MintVouchersToFallbackReceiver(address fallbackReceiver, address voucherContractAddress, uint256 tokenID, uint256 mintAmount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterMintVouchersToFallbackReceiver(opts *bind.FilterOpts) (*TNT1155TokenBankMintVouchersToFallbackReceiverIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "MintVouchersToFallbackReceiver")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankMintVouchersToFallbackReceiverIterator{contract: _TNT1155TokenBank.contract, event: "MintVouchersToFallbackReceiver", logs: logs, sub: sub}, nil
}

// WatchMintVouchersToFallbackReceiver is a free log subscription operation binding the contract event 0xcd813f00492d666cb537f68f09107ec097b5d07dfa6bcdc07ddf5c733cb73e71.
//
// Solidity: event MintVouchersToFallbackReceiver(address fallbackReceiver, address voucherContractAddress, uint256 tokenID, uint256 mintAmount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchMintVouchersToFallbackReceiver(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankMintVouchersToFallbackReceiver) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "MintVouchersToFallbackReceiver")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankMintVouchersToFallbackReceiver)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "MintVouchersToFallbackReceiver", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintVouchersToFallbackReceiver is a log parse operation binding the contract event 0xcd813f00492d666cb537f68f09107ec097b5d07dfa6bcdc07ddf5c733cb73e71.
//
// Solidity: event MintVouchersToFallbackReceiver(address fallbackReceiver, address voucherContractAddress, uint256 tokenID, uint256 mintAmount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseMintVouchersToFallbackReceiver(log types.Log) (*TNT1155TokenBankMintVouchersToFallbackReceiver, error) {
	event := new(TNT1155TokenBankMintVouchersToFallbackReceiver)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "MintVouchersToFallbackReceiver", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155TokenLockedIterator is returned from FilterTNT1155TokenLocked and is used to iterate over the raw logs and unpacked data for TNT1155TokenLocked events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenLockedIterator struct {
	Event *TNT1155TokenBankTNT1155TokenLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155TokenLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155TokenLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155TokenLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155TokenLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155TokenLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155TokenLocked represents a TNT1155TokenLocked event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenLocked struct {
	Denom                      string
	SourceChainTokenSender     common.Address
	TargetChainID              *big.Int
	TargetChainVoucherReceiver common.Address
	TokenID                    *big.Int
	LockedAmount               *big.Int
	TokenURI                   string
	TokenLockNonce             *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT1155TokenLocked is a free log retrieval operation binding the contract event 0x5ac6d27fa2bb13775fcf7bd9cc03a3f02063b2a2e484aaedc1b1c9d916874f36.
//
// Solidity: event TNT1155TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockedAmount, string tokenURI, uint256 tokenLockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155TokenLocked(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155TokenLockedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155TokenLocked")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155TokenLockedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155TokenLocked", logs: logs, sub: sub}, nil
}

// WatchTNT1155TokenLocked is a free log subscription operation binding the contract event 0x5ac6d27fa2bb13775fcf7bd9cc03a3f02063b2a2e484aaedc1b1c9d916874f36.
//
// Solidity: event TNT1155TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockedAmount, string tokenURI, uint256 tokenLockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155TokenLocked(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155TokenLocked) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155TokenLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155TokenLocked)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155TokenLocked is a log parse operation binding the contract event 0x5ac6d27fa2bb13775fcf7bd9cc03a3f02063b2a2e484aaedc1b1c9d916874f36.
//
// Solidity: event TNT1155TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockedAmount, string tokenURI, uint256 tokenLockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155TokenLocked(log types.Log) (*TNT1155TokenBankTNT1155TokenLocked, error) {
	event := new(TNT1155TokenBankTNT1155TokenLocked)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155TokenUnlockedIterator is returned from FilterTNT1155TokenUnlocked and is used to iterate over the raw logs and unpacked data for TNT1155TokenUnlocked events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenUnlockedIterator struct {
	Event *TNT1155TokenBankTNT1155TokenUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155TokenUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155TokenUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155TokenUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155TokenUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155TokenUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155TokenUnlocked represents a TNT1155TokenUnlocked event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenUnlocked struct {
	Denom                       string
	TargetChainTokenReceiver    common.Address
	TokenID                     *big.Int
	UnlockedAmount              *big.Int
	SourceChainVoucherBurnNonce *big.Int
	TokenUnlockNonce            *big.Int
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterTNT1155TokenUnlocked is a free log retrieval operation binding the contract event 0x4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a.
//
// Solidity: event TNT1155TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155TokenUnlocked(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155TokenUnlockedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155TokenUnlockedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155TokenUnlocked", logs: logs, sub: sub}, nil
}

// WatchTNT1155TokenUnlocked is a free log subscription operation binding the contract event 0x4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a.
//
// Solidity: event TNT1155TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155TokenUnlocked(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155TokenUnlocked) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155TokenUnlocked)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155TokenUnlocked is a log parse operation binding the contract event 0x4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a.
//
// Solidity: event TNT1155TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155TokenUnlocked(log types.Log) (*TNT1155TokenBankTNT1155TokenUnlocked, error) {
	event := new(TNT1155TokenBankTNT1155TokenUnlocked)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155VoucherBurnedIterator is returned from FilterTNT1155VoucherBurned and is used to iterate over the raw logs and unpacked data for TNT1155VoucherBurned events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherBurnedIterator struct {
	Event *TNT1155TokenBankTNT1155VoucherBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155VoucherBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155VoucherBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155VoucherBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155VoucherBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155VoucherBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155VoucherBurned represents a TNT1155VoucherBurned event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherBurned struct {
	Denom                    string
	SourceChainVoucherOwner  common.Address
	TargetChainTokenReceiver common.Address
	TokenID                  *big.Int
	BurnedAmount             *big.Int
	VoucherBurnNonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTNT1155VoucherBurned is a free log retrieval operation binding the contract event 0x656ace729da14534acb1e9ea4ca34cf21501689c9ea0a8eff3aebca48f94f68e.
//
// Solidity: event TNT1155VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155VoucherBurned(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155VoucherBurnedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155VoucherBurned")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155VoucherBurnedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155VoucherBurned", logs: logs, sub: sub}, nil
}

// WatchTNT1155VoucherBurned is a free log subscription operation binding the contract event 0x656ace729da14534acb1e9ea4ca34cf21501689c9ea0a8eff3aebca48f94f68e.
//
// Solidity: event TNT1155VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155VoucherBurned(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155VoucherBurned) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155VoucherBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155VoucherBurned)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155VoucherBurned is a log parse operation binding the contract event 0x656ace729da14534acb1e9ea4ca34cf21501689c9ea0a8eff3aebca48f94f68e.
//
// Solidity: event TNT1155VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155VoucherBurned(log types.Log) (*TNT1155TokenBankTNT1155VoucherBurned, error) {
	event := new(TNT1155TokenBankTNT1155VoucherBurned)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155VoucherMintedIterator is returned from FilterTNT1155VoucherMinted and is used to iterate over the raw logs and unpacked data for TNT1155VoucherMinted events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherMintedIterator struct {
	Event *TNT1155TokenBankTNT1155VoucherMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155VoucherMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155VoucherMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155VoucherMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155VoucherMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155VoucherMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155VoucherMinted represents a TNT1155VoucherMinted event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherMinted struct {
	Denom                      string
	TargetChainVoucherReceiver common.Address
	VoucherContract            common.Address
	TokenID                    *big.Int
	MintedAmount               *big.Int
	SourceChainTokenLockNonce  *big.Int
	VoucherMintNonce           *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT1155VoucherMinted is a free log retrieval operation binding the contract event 0x4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53.
//
// Solidity: event TNT1155VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155VoucherMinted(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155VoucherMintedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155VoucherMinted")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155VoucherMintedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155VoucherMinted", logs: logs, sub: sub}, nil
}

// WatchTNT1155VoucherMinted is a free log subscription operation binding the contract event 0x4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53.
//
// Solidity: event TNT1155VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155VoucherMinted(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155VoucherMinted) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155VoucherMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155VoucherMinted)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155VoucherMinted is a log parse operation binding the contract event 0x4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53.
//
// Solidity: event TNT1155VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155VoucherMinted(log types.Log) (*TNT1155TokenBankTNT1155VoucherMinted, error) {
	event := new(TNT1155TokenBankTNT1155VoucherMinted)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankUnlockTokensToFallbackReceiverIterator is returned from FilterUnlockTokensToFallbackReceiver and is used to iterate over the raw logs and unpacked data for UnlockTokensToFallbackReceiver events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankUnlockTokensToFallbackReceiverIterator struct {
	Event *TNT1155TokenBankUnlockTokensToFallbackReceiver // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankUnlockTokensToFallbackReceiverIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankUnlockTokensToFallbackReceiver)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankUnlockTokensToFallbackReceiver)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankUnlockTokensToFallbackReceiverIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankUnlockTokensToFallbackReceiverIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankUnlockTokensToFallbackReceiver represents a UnlockTokensToFallbackReceiver event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankUnlockTokensToFallbackReceiver struct {
	FallbackReceiver     common.Address
	TokenContractAddress common.Address
	TokenID              *big.Int
	UnlockAmount         *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterUnlockTokensToFallbackReceiver is a free log retrieval operation binding the contract event 0xff058a80f171a00cc000a48b55c74b86f019a650ce9be381ca3000b9cd99a0f4.
//
// Solidity: event UnlockTokensToFallbackReceiver(address fallbackReceiver, address tokenContractAddress, uint256 tokenID, uint256 unlockAmount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterUnlockTokensToFallbackReceiver(opts *bind.FilterOpts) (*TNT1155TokenBankUnlockTokensToFallbackReceiverIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "UnlockTokensToFallbackReceiver")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankUnlockTokensToFallbackReceiverIterator{contract: _TNT1155TokenBank.contract, event: "UnlockTokensToFallbackReceiver", logs: logs, sub: sub}, nil
}

// WatchUnlockTokensToFallbackReceiver is a free log subscription operation binding the contract event 0xff058a80f171a00cc000a48b55c74b86f019a650ce9be381ca3000b9cd99a0f4.
//
// Solidity: event UnlockTokensToFallbackReceiver(address fallbackReceiver, address tokenContractAddress, uint256 tokenID, uint256 unlockAmount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchUnlockTokensToFallbackReceiver(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankUnlockTokensToFallbackReceiver) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "UnlockTokensToFallbackReceiver")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankUnlockTokensToFallbackReceiver)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "UnlockTokensToFallbackReceiver", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockTokensToFallbackReceiver is a log parse operation binding the contract event 0xff058a80f171a00cc000a48b55c74b86f019a650ce9be381ca3000b9cd99a0f4.
//
// Solidity: event UnlockTokensToFallbackReceiver(address fallbackReceiver, address tokenContractAddress, uint256 tokenID, uint256 unlockAmount)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseUnlockTokensToFallbackReceiver(log types.Log) (*TNT1155TokenBankUnlockTokensToFallbackReceiver, error) {
	event := new(TNT1155TokenBankUnlockTokensToFallbackReceiver)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "UnlockTokensToFallbackReceiver", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
