// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TNT1155TokenBankMetaData contains all meta data concerning the TNT1155TokenBank contract.
var TNT1155TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mainchainID_\",\"type\":\"uint256\"},{\"internalType\":\"contractChainRegistrar\",\"name\":\"chainRegistrar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainTokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT1155TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenUnlockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT1155TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainVoucherOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"TNT1155VoucherBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voucherContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherMintNonce\",\"type\":\"uint256\"}],\"name\":\"TNT1155VoucherMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDenoms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVouchers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomToVoucherLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherAddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherContractAddr\",\"type\":\"address\"}],\"name\":\"getDenom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedTokenLockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedVoucherBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getVoucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenLockVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUnlockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalLockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucherAddressToDenomLookup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherBurnNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherBurnVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherMintNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceChainTNT1155Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transferBytes\",\"type\":\"bytes\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uriForm\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"mintData\",\"type\":\"bytes\"}],\"name\":\"mintVouchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceChainVoucherContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"burnData\",\"type\":\"bytes\"}],\"name\":\"burnVouchers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "",
}

// TNT1155TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use TNT1155TokenBankMetaData.ABI instead.
var TNT1155TokenBankABI = TNT1155TokenBankMetaData.ABI

// TNT1155TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TNT1155TokenBankMetaData.Bin instead.
var TNT1155TokenBankBin = TNT1155TokenBankMetaData.Bin

// DeployTNT1155TokenBank deploys a new Ethereum contract, binding an instance of TNT1155TokenBank to it.
func DeployTNT1155TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, mainchainID_ *big.Int, chainRegistrar_ common.Address) (common.Address, *types.Transaction, *TNT1155TokenBank, error) {
	parsed, err := TNT1155TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TNT1155TokenBankBin), backend, mainchainID_, chainRegistrar_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TNT1155TokenBank{TNT1155TokenBankCaller: TNT1155TokenBankCaller{contract: contract}, TNT1155TokenBankTransactor: TNT1155TokenBankTransactor{contract: contract}, TNT1155TokenBankFilterer: TNT1155TokenBankFilterer{contract: contract}}, nil
}

// TNT1155TokenBank is an auto generated Go binding around an Ethereum contract.
type TNT1155TokenBank struct {
	TNT1155TokenBankCaller     // Read-only binding to the contract
	TNT1155TokenBankTransactor // Write-only binding to the contract
	TNT1155TokenBankFilterer   // Log filterer for contract events
}

// TNT1155TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type TNT1155TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT1155TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TNT1155TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT1155TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TNT1155TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT1155TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TNT1155TokenBankSession struct {
	Contract     *TNT1155TokenBank // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TNT1155TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TNT1155TokenBankCallerSession struct {
	Contract *TNT1155TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// TNT1155TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TNT1155TokenBankTransactorSession struct {
	Contract     *TNT1155TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// TNT1155TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type TNT1155TokenBankRaw struct {
	Contract *TNT1155TokenBank // Generic contract binding to access the raw methods on
}

// TNT1155TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TNT1155TokenBankCallerRaw struct {
	Contract *TNT1155TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// TNT1155TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TNT1155TokenBankTransactorRaw struct {
	Contract *TNT1155TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTNT1155TokenBank creates a new instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBank(address common.Address, backend bind.ContractBackend) (*TNT1155TokenBank, error) {
	contract, err := bindTNT1155TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBank{TNT1155TokenBankCaller: TNT1155TokenBankCaller{contract: contract}, TNT1155TokenBankTransactor: TNT1155TokenBankTransactor{contract: contract}, TNT1155TokenBankFilterer: TNT1155TokenBankFilterer{contract: contract}}, nil
}

// NewTNT1155TokenBankCaller creates a new read-only instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBankCaller(address common.Address, caller bind.ContractCaller) (*TNT1155TokenBankCaller, error) {
	contract, err := bindTNT1155TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankCaller{contract: contract}, nil
}

// NewTNT1155TokenBankTransactor creates a new write-only instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*TNT1155TokenBankTransactor, error) {
	contract, err := bindTNT1155TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTransactor{contract: contract}, nil
}

// NewTNT1155TokenBankFilterer creates a new log filterer instance of TNT1155TokenBank, bound to a specific deployed contract.
func NewTNT1155TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*TNT1155TokenBankFilterer, error) {
	contract, err := bindTNT1155TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankFilterer{contract: contract}, nil
}

// bindTNT1155TokenBank binds a generic wrapper to an already deployed contract.
func bindTNT1155TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TNT1155TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT1155TokenBank *TNT1155TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT1155TokenBank.Contract.TNT1155TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT1155TokenBank *TNT1155TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.TNT1155TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT1155TokenBank *TNT1155TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.TNT1155TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT1155TokenBank *TNT1155TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT1155TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT1155TokenBank *TNT1155TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT1155TokenBank *TNT1155TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.contract.Transact(opts, method, params...)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) AllDenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "allDenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT1155TokenBank.Contract.AllDenoms(&_TNT1155TokenBank.CallOpts, arg0)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT1155TokenBank.Contract.AllDenoms(&_TNT1155TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) AllVouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "allVouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT1155TokenBank.Contract.AllVouchers(&_TNT1155TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT1155TokenBank.Contract.AllVouchers(&_TNT1155TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) DenomToVoucherLookup(opts *bind.CallOpts, arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "denomToVoucherLookup", arg0)

	outstruct := new(struct {
		ContractAddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT1155TokenBank.Contract.DenomToVoucherLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT1155TokenBank.Contract.DenomToVoucherLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankSession) Exists(denom string) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists(&_TNT1155TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists(&_TNT1155TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) Exists0(opts *bind.CallOpts, voucherAddress common.Address) (bool, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "exists0", voucherAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists0(&_TNT1155TokenBank.CallOpts, voucherAddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT1155TokenBank.Contract.Exists0(&_TNT1155TokenBank.CallOpts, voucherAddress)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetDenom(opts *bind.CallOpts, voucherContractAddr common.Address) (string, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getDenom", voucherContractAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT1155TokenBank.Contract.GetDenom(&_TNT1155TokenBank.CallOpts, voucherContractAddr)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT1155TokenBank.Contract.GetDenom(&_TNT1155TokenBank.CallOpts, voucherContractAddr)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetMaxProcessedTokenLockNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getMaxProcessedTokenLockNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetMaxProcessedVoucherBurnNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getMaxProcessedVoucherBurnNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT1155TokenBank.CallOpts, chainID)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) GetVoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "getVoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT1155TokenBank.Contract.GetVoucher(&_TNT1155TokenBank.CallOpts, denom)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT1155TokenBank.Contract.GetVoucher(&_TNT1155TokenBank.CallOpts, denom)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) MainchainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "mainchainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) MainchainID() (*big.Int, error) {
	return _TNT1155TokenBank.Contract.MainchainID(&_TNT1155TokenBank.CallOpts)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) MainchainID() (*big.Int, error) {
	return _TNT1155TokenBank.Contract.MainchainID(&_TNT1155TokenBank.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TNT1155TokenBank.Contract.SupportsInterface(&_TNT1155TokenBank.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TNT1155TokenBank.Contract.SupportsInterface(&_TNT1155TokenBank.CallOpts, interfaceId)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TokenLockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "tokenLockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenLockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenLockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TokenLockVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "tokenLockVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.TokenLockVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.TokenLockVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TokenUnlockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "tokenUnlockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenUnlockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TokenUnlockNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) TotalLockedAmounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "totalLockedAmounts", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TotalLockedAmounts(&_TNT1155TokenBank.CallOpts, arg0, arg1, arg2)
}

// TotalLockedAmounts is a free data retrieval call binding the contract method 0x9c67257d.
//
// Solidity: function totalLockedAmounts(uint256 , address , uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) TotalLockedAmounts(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.TotalLockedAmounts(&_TNT1155TokenBank.CallOpts, arg0, arg1, arg2)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherAddressToDenomLookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherAddressToDenomLookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT1155TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT1155TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherBurnNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherBurnNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherBurnVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherBurnVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT1155TokenBank.Contract.VoucherBurnVotingRecords(&_TNT1155TokenBank.CallOpts, arg0, arg1)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCaller) VoucherMintNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT1155TokenBank.contract.Call(opts, &out, "voucherMintNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherMintNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT1155TokenBank *TNT1155TokenBankCallerSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT1155TokenBank.Contract.VoucherMintNonceMap(&_TNT1155TokenBank.CallOpts, arg0)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0x090601b0.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID, uint256 burnAmount, bytes burnData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) BurnVouchers(opts *bind.TransactOpts, sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int, burnAmount *big.Int, burnData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "burnVouchers", sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID, burnAmount, burnData)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0x090601b0.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID, uint256 burnAmount, bytes burnData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int, burnAmount *big.Int, burnData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.BurnVouchers(&_TNT1155TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID, burnAmount, burnData)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0x090601b0.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 tokenID, uint256 burnAmount, bytes burnData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, tokenID *big.Int, burnAmount *big.Int, burnData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.BurnVouchers(&_TNT1155TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, tokenID, burnAmount, burnData)
}

// LockTokens is a paid mutator transaction binding the contract method 0x8e04e0d6.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT1155Contract, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockAmount, bytes transferBytes) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) LockTokens(opts *bind.TransactOpts, targetChainID *big.Int, sourceChainTNT1155Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int, lockAmount *big.Int, transferBytes []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "lockTokens", targetChainID, sourceChainTNT1155Contract, targetChainVoucherReceiver, tokenID, lockAmount, transferBytes)
}

// LockTokens is a paid mutator transaction binding the contract method 0x8e04e0d6.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT1155Contract, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockAmount, bytes transferBytes) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) LockTokens(targetChainID *big.Int, sourceChainTNT1155Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int, lockAmount *big.Int, transferBytes []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.LockTokens(&_TNT1155TokenBank.TransactOpts, targetChainID, sourceChainTNT1155Contract, targetChainVoucherReceiver, tokenID, lockAmount, transferBytes)
}

// LockTokens is a paid mutator transaction binding the contract method 0x8e04e0d6.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT1155Contract, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockAmount, bytes transferBytes) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) LockTokens(targetChainID *big.Int, sourceChainTNT1155Contract common.Address, targetChainVoucherReceiver common.Address, tokenID *big.Int, lockAmount *big.Int, transferBytes []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.LockTokens(&_TNT1155TokenBank.TransactOpts, targetChainID, sourceChainTNT1155Contract, targetChainVoucherReceiver, tokenID, lockAmount, transferBytes)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x302ec042.
//
// Solidity: function mintVouchers(string denom, string uriForm, address targetChainVoucherReceiver, uint256 tokenID, uint256 mintAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce, bytes mintData) returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) MintVouchers(opts *bind.TransactOpts, denom string, uriForm string, targetChainVoucherReceiver common.Address, tokenID *big.Int, mintAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int, mintData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "mintVouchers", denom, uriForm, targetChainVoucherReceiver, tokenID, mintAmount, dynasty, sourceChainTokenLockNonce, mintData)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x302ec042.
//
// Solidity: function mintVouchers(string denom, string uriForm, address targetChainVoucherReceiver, uint256 tokenID, uint256 mintAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce, bytes mintData) returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) MintVouchers(denom string, uriForm string, targetChainVoucherReceiver common.Address, tokenID *big.Int, mintAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int, mintData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.MintVouchers(&_TNT1155TokenBank.TransactOpts, denom, uriForm, targetChainVoucherReceiver, tokenID, mintAmount, dynasty, sourceChainTokenLockNonce, mintData)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x302ec042.
//
// Solidity: function mintVouchers(string denom, string uriForm, address targetChainVoucherReceiver, uint256 tokenID, uint256 mintAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce, bytes mintData) returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) MintVouchers(denom string, uriForm string, targetChainVoucherReceiver common.Address, tokenID *big.Int, mintAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int, mintData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.MintVouchers(&_TNT1155TokenBank.TransactOpts, denom, uriForm, targetChainVoucherReceiver, tokenID, mintAmount, dynasty, sourceChainTokenLockNonce, mintData)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155BatchReceived(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155BatchReceived(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155Received(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.OnERC1155Received(&_TNT1155TokenBank.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xabe7ce9c.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce, bytes transferData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactor) UnlockTokens(opts *bind.TransactOpts, sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int, transferData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.contract.Transact(opts, "unlockTokens", sourceChainID, denom, targetChainTokenReceiver, tokenID, unlockAmount, dynasty, sourceChainVoucherBurnNonce, transferData)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xabe7ce9c.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce, bytes transferData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int, transferData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.UnlockTokens(&_TNT1155TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, unlockAmount, dynasty, sourceChainVoucherBurnNonce, transferData)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0xabe7ce9c.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce, bytes transferData) payable returns()
func (_TNT1155TokenBank *TNT1155TokenBankTransactorSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, tokenID *big.Int, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int, transferData []byte) (*types.Transaction, error) {
	return _TNT1155TokenBank.Contract.UnlockTokens(&_TNT1155TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, tokenID, unlockAmount, dynasty, sourceChainVoucherBurnNonce, transferData)
}

// TNT1155TokenBankTNT1155TokenLockedIterator is returned from FilterTNT1155TokenLocked and is used to iterate over the raw logs and unpacked data for TNT1155TokenLocked events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenLockedIterator struct {
	Event *TNT1155TokenBankTNT1155TokenLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155TokenLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155TokenLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155TokenLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155TokenLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155TokenLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155TokenLocked represents a TNT1155TokenLocked event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenLocked struct {
	Denom                      string
	SourceChainTokenSender     common.Address
	TargetChainID              *big.Int
	TargetChainVoucherReceiver common.Address
	TokenID                    *big.Int
	LockedAmount               *big.Int
	TokenURI                   string
	TokenLockNonce             *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT1155TokenLocked is a free log retrieval operation binding the contract event 0x5ac6d27fa2bb13775fcf7bd9cc03a3f02063b2a2e484aaedc1b1c9d916874f36.
//
// Solidity: event TNT1155TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockedAmount, string tokenURI, uint256 tokenLockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155TokenLocked(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155TokenLockedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155TokenLocked")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155TokenLockedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155TokenLocked", logs: logs, sub: sub}, nil
}

// WatchTNT1155TokenLocked is a free log subscription operation binding the contract event 0x5ac6d27fa2bb13775fcf7bd9cc03a3f02063b2a2e484aaedc1b1c9d916874f36.
//
// Solidity: event TNT1155TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockedAmount, string tokenURI, uint256 tokenLockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155TokenLocked(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155TokenLocked) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155TokenLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155TokenLocked)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155TokenLocked is a log parse operation binding the contract event 0x5ac6d27fa2bb13775fcf7bd9cc03a3f02063b2a2e484aaedc1b1c9d916874f36.
//
// Solidity: event TNT1155TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 tokenID, uint256 lockedAmount, string tokenURI, uint256 tokenLockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155TokenLocked(log types.Log) (*TNT1155TokenBankTNT1155TokenLocked, error) {
	event := new(TNT1155TokenBankTNT1155TokenLocked)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155TokenUnlockedIterator is returned from FilterTNT1155TokenUnlocked and is used to iterate over the raw logs and unpacked data for TNT1155TokenUnlocked events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenUnlockedIterator struct {
	Event *TNT1155TokenBankTNT1155TokenUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155TokenUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155TokenUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155TokenUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155TokenUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155TokenUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155TokenUnlocked represents a TNT1155TokenUnlocked event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155TokenUnlocked struct {
	Denom                       string
	TargetChainTokenReceiver    common.Address
	TokenID                     *big.Int
	UnlockedAmount              *big.Int
	SourceChainVoucherBurnNonce *big.Int
	TokenUnlockNonce            *big.Int
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterTNT1155TokenUnlocked is a free log retrieval operation binding the contract event 0x4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a.
//
// Solidity: event TNT1155TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155TokenUnlocked(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155TokenUnlockedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155TokenUnlockedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155TokenUnlocked", logs: logs, sub: sub}, nil
}

// WatchTNT1155TokenUnlocked is a free log subscription operation binding the contract event 0x4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a.
//
// Solidity: event TNT1155TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155TokenUnlocked(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155TokenUnlocked) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155TokenUnlocked)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155TokenUnlocked is a log parse operation binding the contract event 0x4a5b7552bbe9e70a8548f7bbc10edd823963920f052f3859337a36c45bf8bb1a.
//
// Solidity: event TNT1155TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 tokenID, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155TokenUnlocked(log types.Log) (*TNT1155TokenBankTNT1155TokenUnlocked, error) {
	event := new(TNT1155TokenBankTNT1155TokenUnlocked)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155TokenUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155VoucherBurnedIterator is returned from FilterTNT1155VoucherBurned and is used to iterate over the raw logs and unpacked data for TNT1155VoucherBurned events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherBurnedIterator struct {
	Event *TNT1155TokenBankTNT1155VoucherBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155VoucherBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155VoucherBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155VoucherBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155VoucherBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155VoucherBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155VoucherBurned represents a TNT1155VoucherBurned event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherBurned struct {
	Denom                    string
	SourceChainVoucherOwner  common.Address
	TargetChainTokenReceiver common.Address
	TokenID                  *big.Int
	BurnedAmount             *big.Int
	VoucherBurnNonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTNT1155VoucherBurned is a free log retrieval operation binding the contract event 0x656ace729da14534acb1e9ea4ca34cf21501689c9ea0a8eff3aebca48f94f68e.
//
// Solidity: event TNT1155VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155VoucherBurned(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155VoucherBurnedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155VoucherBurned")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155VoucherBurnedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155VoucherBurned", logs: logs, sub: sub}, nil
}

// WatchTNT1155VoucherBurned is a free log subscription operation binding the contract event 0x656ace729da14534acb1e9ea4ca34cf21501689c9ea0a8eff3aebca48f94f68e.
//
// Solidity: event TNT1155VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155VoucherBurned(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155VoucherBurned) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155VoucherBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155VoucherBurned)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155VoucherBurned is a log parse operation binding the contract event 0x656ace729da14534acb1e9ea4ca34cf21501689c9ea0a8eff3aebca48f94f68e.
//
// Solidity: event TNT1155VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 tokenID, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155VoucherBurned(log types.Log) (*TNT1155TokenBankTNT1155VoucherBurned, error) {
	event := new(TNT1155TokenBankTNT1155VoucherBurned)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT1155TokenBankTNT1155VoucherMintedIterator is returned from FilterTNT1155VoucherMinted and is used to iterate over the raw logs and unpacked data for TNT1155VoucherMinted events raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherMintedIterator struct {
	Event *TNT1155TokenBankTNT1155VoucherMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT1155TokenBankTNT1155VoucherMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT1155TokenBankTNT1155VoucherMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT1155TokenBankTNT1155VoucherMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT1155TokenBankTNT1155VoucherMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT1155TokenBankTNT1155VoucherMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT1155TokenBankTNT1155VoucherMinted represents a TNT1155VoucherMinted event raised by the TNT1155TokenBank contract.
type TNT1155TokenBankTNT1155VoucherMinted struct {
	Denom                      string
	TargetChainVoucherReceiver common.Address
	VoucherContract            common.Address
	TokenID                    *big.Int
	MintedAmount               *big.Int
	SourceChainTokenLockNonce  *big.Int
	VoucherMintNonce           *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT1155VoucherMinted is a free log retrieval operation binding the contract event 0x4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53.
//
// Solidity: event TNT1155VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) FilterTNT1155VoucherMinted(opts *bind.FilterOpts) (*TNT1155TokenBankTNT1155VoucherMintedIterator, error) {

	logs, sub, err := _TNT1155TokenBank.contract.FilterLogs(opts, "TNT1155VoucherMinted")
	if err != nil {
		return nil, err
	}
	return &TNT1155TokenBankTNT1155VoucherMintedIterator{contract: _TNT1155TokenBank.contract, event: "TNT1155VoucherMinted", logs: logs, sub: sub}, nil
}

// WatchTNT1155VoucherMinted is a free log subscription operation binding the contract event 0x4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53.
//
// Solidity: event TNT1155VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) WatchTNT1155VoucherMinted(opts *bind.WatchOpts, sink chan<- *TNT1155TokenBankTNT1155VoucherMinted) (event.Subscription, error) {

	logs, sub, err := _TNT1155TokenBank.contract.WatchLogs(opts, "TNT1155VoucherMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT1155TokenBankTNT1155VoucherMinted)
				if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT1155VoucherMinted is a log parse operation binding the contract event 0x4fbcffbdf5224654091654ad81a05e276525f0975fd62790b7876d1f7da75a53.
//
// Solidity: event TNT1155VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 tokenID, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT1155TokenBank *TNT1155TokenBankFilterer) ParseTNT1155VoucherMinted(log types.Log) (*TNT1155TokenBankTNT1155VoucherMinted, error) {
	event := new(TNT1155TokenBankTNT1155VoucherMinted)
	if err := _TNT1155TokenBank.contract.UnpackLog(event, "TNT1155VoucherMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
