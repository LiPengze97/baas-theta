package predeployed

import (
	"encoding/hex"
	"math/big"

	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/theta/crypto"
	"github.com/thetatoken/theta/ledger/types"

	"github.com/thetatoken/thetasubchain/core"
	slst "github.com/thetatoken/thetasubchain/ledger/state"
)

// Bytecode of the smart contracts hardcoded in the genesis block through pre-deployment
const TFuelTokenBankContractBytecode = "608060405234801561001057600080fd5b50611a59806100206000396000f3fe6080604052600436106100915760003560e01c8063a2cc698111610059578063a2cc6981146101c9578063d6c7e0d414610206578063da837d5a14610222578063ebda99621461024b578063f6a3d24e1461028857610091565b80631527b14d14610096578063261a323e146100d457806327ca4df114610111578063588b14081461014e57806360569b5e1461018b575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b8919061109f565b6102c5565b6040516100cb9291906112d5565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f6919061109f565b61032c565b60405161010891906112fe565b60405180910390f35b34801561011d57600080fd5b50610138600480360381019061013391906110e8565b610371565b60405161014591906112ba565b60405180910390f35b34801561015a57600080fd5b50610175600480360381019061017091906110e8565b6103b0565b6040516101829190611319565b60405180910390f35b34801561019757600080fd5b506101b260048036038101906101ad9190610ff2565b61045c565b6040516101c092919061133b565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb919061109f565b610515565b6040516101fd91906112ba565b60405180910390f35b610220600480360381019061021b919061101f565b6105e4565b005b34801561022e57600080fd5b506102496004803603810190610244919061105f565b61065c565b005b34801561025757600080fd5b50610272600480360381019061026d9190610ff2565b610813565b60405161027f9190611319565b60405180910390f35b34801561029457600080fd5b506102af60048036038101906102aa9190610ff2565b610940565b6040516102bc91906112fe565b60405180910390f35b6000818051602081018201805184825260208301602085012081835280955050505050506000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b60008061033883610999565b905060008160405161034a91906112a3565b908152602001604051809103902060000160149054906101000a900460ff16915050919050565b6002818154811061038157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600381815481106103c057600080fd5b9060005260206000200160009150905080546103db9061166b565b80601f01602080910402602001604051908101604052809291908181526020018280546104079061166b565b80156104545780601f1061042957610100808354040283529160200191610454565b820191906000526020600020905b81548152906001019060200180831161043757829003601f168201915b505050505081565b600160205280600052604060002060009150905080600001805461047f9061166b565b80601f01602080910402602001604051908101604052809291908181526020018280546104ab9061166b565b80156104f85780601f106104cd576101008083540402835291602001916104f8565b820191906000526020600020905b8154815290600101906020018083116104db57829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b60008061052183610999565b90506000808260405161053491906112a3565b90815260200160405180910390206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16151515158152505090508060200151156105d8578060000151925050506105df565b6000925050505b919050565b60003490506105f2816109ab565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f3b9ebdb53ea32464f35bc6fa7ccb568c358ffa83792563d8c97bf043a99ee6b68360405161064f919061140b565b60405180910390a3505050565b600080602067ffffffffffffffff81111561067a576106796117a4565b5b6040519080825280601f01601f1916602001820160405280156106ac5781602001600182028036833780820191505090505b50905060008060b573ffffffffffffffffffffffffffffffffffffffff16836040516106d8919061128c565b6000604051808303816000865af19150503d8060008114610715576040519150601f19603f3d011682016040523d82523d6000602084013e61071a565b606091505b50915091508161075f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107569061136b565b60405180910390fd5b600061076a82610b32565b9050600181149450846107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a9906113cb565b60405180910390fd5b6107bc8787610c1b565b8673ffffffffffffffffffffffffffffffffffffffff167fed2a6b76dd30ca61a3c463f15ebbe687c91c02dad5ceea323d771ae5e780e3d187604051610802919061140b565b60405180910390a250505050505050565b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820180546108719061166b565b80601f016020809104026020016040519081016040528092919081815260200182805461089d9061166b565b80156108ea5780601f106108bf576101008083540402835291602001916108ea565b820191906000526020600020905b8154815290600101906020018083116108cd57829003601f168201915b505050505081526020016001820160009054906101000a900460ff161515151581525050905080602001511561092757806000015191505061093b565b604051806020016040528060008152509150505b919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff169050919050565b60606109a482610e3a565b9050919050565b6000602067ffffffffffffffff8111156109c8576109c76117a4565b5b6040519080825280601f01601f1916602001820160405280156109fa5781602001600182028036833780820191505090505b50905060008260001b905060005b6020811015610a7d57818160208110610a2457610a23611775565b5b1a60f81b838281518110610a3b57610a3a611775565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610a75906116ce565b915050610a08565b50600060b773ffffffffffffffffffffffffffffffffffffffff1683604051610aa6919061128c565b6000604051808303816000865af19150503d8060008114610ae3576040519150601f19603f3d011682016040523d82523d6000602084013e610ae8565b606091505b5050905080610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b23906113ab565b60405180910390fd5b50505050565b6000806000835190506020811115610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b769061138b565b60405180910390fd5b60005b81811015610c0d57600881836020610b9a91906115a0565b610ba491906114b9565b610bae9190611546565b60ff60f81b868381518110610bc657610bc5611775565b5b602001015160f81c60f81b167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c831792508080610c05906116ce565b915050610b82565b508160001c92505050919050565b6000603467ffffffffffffffff811115610c3857610c376117a4565b5b6040519080825280601f01601f191660200182016040528015610c6a5781602001600182028036833780820191505090505b50905060008260001b90506000805b6014811015610cfd578560601b8160148110610c9857610c97611775565b5b1a60f81b848380610ca8906116ce565b945081518110610cbb57610cba611775565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610cf5906116ce565b915050610c79565b600090505b6020811015610d8357828160208110610d1e57610d1d611775565b5b1a60f81b848380610d2e906116ce565b945081518110610d4157610d40611775565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610d7b906116ce565b915050610d02565b600060b673ffffffffffffffffffffffffffffffffffffffff1685604051610dab919061128c565b6000604051808303816000865af19150503d8060008114610de8576040519150601f19603f3d011682016040523d82523d6000602084013e610ded565b606091505b5050905080610e31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e28906113eb565b60405180910390fd5b50505050505050565b6060600082905060005b8151811015610ec857610e73828281518110610e6357610e62611775565b5b602001015160f81c60f81b610ed2565b828281518110610e8657610e85611775565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610ec0906116ce565b915050610e44565b5080915050919050565b6000604160f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610158015610f305750605a60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b15610f4f5760208260f81c610f45919061150f565b60f81b9050610f53565b8190505b919050565b6000610f6b610f668461144b565b611426565b905082815260208101848484011115610f8757610f866117d8565b5b610f92848285611629565b509392505050565b600081359050610fa9816119f5565b92915050565b600082601f830112610fc457610fc36117d3565b5b8135610fd4848260208601610f58565b91505092915050565b600081359050610fec81611a0c565b92915050565b600060208284031215611008576110076117e2565b5b600061101684828501610f9a565b91505092915050565b60008060408385031215611036576110356117e2565b5b600061104485828601610f9a565b925050602061105585828601610f9a565b9150509250929050565b60008060408385031215611076576110756117e2565b5b600061108485828601610f9a565b925050602061109585828601610fdd565b9150509250929050565b6000602082840312156110b5576110b46117e2565b5b600082013567ffffffffffffffff8111156110d3576110d26117dd565b5b6110df84828501610faf565b91505092915050565b6000602082840312156110fe576110fd6117e2565b5b600061110c84828501610fdd565b91505092915050565b61111e816115d4565b82525050565b61112d816115e6565b82525050565b600061113e8261147c565b6111488185611492565b9350611158818560208601611638565b80840191505092915050565b600061116f82611487565b611179818561149d565b9350611189818560208601611638565b611192816117e7565b840191505092915050565b60006111a882611487565b6111b281856114ae565b93506111c2818560208601611638565b80840191505092915050565b60006111db604d8361149d565b91506111e6826117f8565b606082019050919050565b60006111fe60258361149d565b91506112098261186d565b604082019050919050565b600061122160488361149d565b915061122c826118bc565b606082019050919050565b600061124460388361149d565b915061124f82611931565b604082019050919050565b600061126760478361149d565b915061127282611980565b606082019050919050565b61128681611612565b82525050565b60006112988284611133565b915081905092915050565b60006112af828461119d565b915081905092915050565b60006020820190506112cf6000830184611115565b92915050565b60006040820190506112ea6000830185611115565b6112f76020830184611124565b9392505050565b60006020820190506113136000830184611124565b92915050565b600060208201905081810360008301526113338184611164565b905092915050565b600060408201905081810360008301526113558185611164565b90506113646020830184611124565b9392505050565b60006020820190508181036000830152611384816111ce565b9050919050565b600060208201905081810360008301526113a4816111f1565b9050919050565b600060208201905081810360008301526113c481611214565b9050919050565b600060208201905081810360008301526113e481611237565b9050919050565b600060208201905081810360008301526114048161125a565b9050919050565b6000602082019050611420600083018461127d565b92915050565b6000611430611441565b905061143c828261169d565b919050565b6000604051905090565b600067ffffffffffffffff821115611466576114656117a4565b5b61146f826117e7565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006114c482611612565b91506114cf83611612565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561150457611503611717565b5b828201905092915050565b600061151a8261161c565b91506115258361161c565b92508260ff0382111561153b5761153a611717565b5b828201905092915050565b600061155182611612565b915061155c83611612565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561159557611594611717565b5b828202905092915050565b60006115ab82611612565b91506115b683611612565b9250828210156115c9576115c8611717565b5b828203905092915050565b60006115df826115f2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561165657808201518184015260208101905061163b565b83811115611665576000848401525b50505050565b6000600282049050600182168061168357607f821691505b6020821081141561169757611696611746565b5b50919050565b6116a6826117e7565b810181811067ffffffffffffffff821117156116c5576116c46117a4565b5b80604052505050565b60006116d982611612565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561170c5761170b611717565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537562636861696e544675656c546f6b656e42616e6b2e70726976696c65676560008201527f644163636573734f6e6c793a206661696c656420746f20636865636b2074686560208201527f20616363657373206c6576656c00000000000000000000000000000000000000604082015250565b7f627974657320746f2075696e7432353620636f6e76657273696f6e206f76657260008201527f666c6f7773000000000000000000000000000000000000000000000000000000602082015250565b7f537562636861696e544675656c546f6b656e42616e6b2e5f6275726e5446756560008201527f6c566f7563686572733a206661696c656420746f206275726e20544675656c2060208201527f766f756368657273000000000000000000000000000000000000000000000000604082015250565b7f566f75636865724d61702e70726976696c656765644163636573734f6e6c793a60008201527f20696e73756666696369656e742070726976696c656765730000000000000000602082015250565b7f537562636861696e544675656c546f6b656e42616e6b2e6d696e74544675656c60008201527f566f7563686572733a206661696c656420746f206d696e7420544675656c207660208201527f6f75636865727300000000000000000000000000000000000000000000000000604082015250565b6119fe816115d4565b8114611a0957600080fd5b50565b611a1581611612565b8114611a2057600080fd5b5056fea2646970667358221220d13ee6ea610b878bd027cd9a5860208f89a8212948d3b492c778cff5eb946df164736f6c63430008070033"

var mintTFuelVouchersFuncSelector = crypto.Keccak256([]byte("mintVouchers(address,uint256)"))[:4] // In Solidity, uint is an alias of uint256, so we need to use uint256 here to get the correct selector

// TFuelTokenBank implements the TokenBank interface.
type TFuelTokenBank struct {
}

func NewTFuelTokenBank() *TFuelTokenBank {
	return &TFuelTokenBank{}
}

// Mint vouchers for the token transferred cross-chain. If the voucher contract for the token does not yet exist, the
// TokenBank contract deploys the the vouncher contract first and then mints the vouchers in the same call.
// Note: mintVouchers() is only allowed in the privileged execution context. Hence, if a user calls the the TFuelTokenBank.mintVouchers() function (e.g. with the following command),
// the transaction should fail with the "evm revert" error:
//       thetasubcli tx smart_contract --chain="private_subchain" --from=2E833968E5bB786Ae419c4d13189fB081Cc43bab --to=0xBd770416a3345F91E4B34576cb804a576fa48EB1 --gas_price=4000000000000wei --gas_limit=5000000 --data=da837d5a0000000000000000000000002e833968e5bb786ae419c4d13189fb081cc43bab000000000000000000000000000000000000000000000004c53ecdc18a600000 --password=qwertyuiop --seq=2
func (tb *TFuelTokenBank) GenerateMintVouchersProxySctx(blockProposer common.Address, view *slst.StoreView, ccte *core.CrossChainTFuelTransferEvent) (*types.SmartContractTx, error) {
	voucherReceiver := ccte.Receiver
	amount := ccte.Amount

	calldata := tb.encodeCalldata(voucherReceiver, amount)
	tfuelTokenBankContractAddr := view.GetTFuelTokenBankContractAddress()
	sctx, err := constructProxySmartContractTx(blockProposer, *tfuelTokenBankContractAddr, calldata)
	if err != nil {
		return nil, err
	}

	return sctx, nil
}

// calldata example: da837d5a0000000000000000000000002e833968e5bb786ae419c4d13189fb081cc43bab000000000000000000000000000000000000000000000004c53ecdc18a600000
// Let's break the above calldata into parts, and see what each part represents:
//
// da837d5a // the function selector, i.e mintTFuelVouchersFuncSelector
// 0000000000000000000000002e833968e5bb786ae419c4d13189fb081cc43bab // voucherReceiver, left padded to 32 bytes with zeros
// 000000000000000000000000000000000000000000000004c53ecdc18a600000 // mintAmount, left padded to 32 bytes with zeros, 0x13c9647e25a9940000 = 88000000000000000000L TFuelWei = 99 TFuel
func (tb *TFuelTokenBank) encodeCalldata(voucherReceiver common.Address, amount *big.Int) []byte {
	calldata := append([]byte{}, mintTFuelVouchersFuncSelector...)
	calldata = append(calldata, packAddressParam(voucherReceiver)...)
	calldata = append(calldata, packBigIntParam(amount)...)

	// calldata = append(calldata, common.LeftPadBytes(voucherReceiver.Bytes(), int(wordSizeInBytes))...)
	// calldata = append(calldata, common.LeftPadBytes(packBigIntParam(amount), int(wordSizeInBytes))...)

	logger.Debugf("mint TFuel voucher sctx calldata: %v", hex.EncodeToString(calldata))

	return calldata
}
