package predeployed

import (
	"encoding/hex"
	"math/big"

	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/theta/crypto"
	"github.com/thetatoken/theta/ledger/types"

	"github.com/thetatoken/thetasubchain/core"
	slst "github.com/thetatoken/thetasubchain/ledger/state"
)

// Bytecode of the smart contracts hardcoded in the genesis block through pre-deployment
const TFuelTokenBankContractBytecode = "608060405234801561001057600080fd5b506118c9806100206000396000f3fe6080604052600436106100915760003560e01c8063a2cc698111610059578063a2cc6981146101c9578063d6c7e0d414610206578063da837d5a14610222578063ebda99621461024b578063f6a3d24e1461028857610091565b80631527b14d14610096578063261a323e146100d457806327ca4df114610111578063588b14081461014e57806360569b5e1461018b575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610f53565b6102c5565b6040516100cb929190611189565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f69190610f53565b61032c565b60405161010891906111b2565b60405180910390f35b34801561011d57600080fd5b5061013860048036038101906101339190610f9c565b610363565b604051610145919061116e565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610f9c565b6103a2565b60405161018291906111cd565b60405180910390f35b34801561019757600080fd5b506101b260048036038101906101ad9190610ea6565b61044e565b6040516101c09291906111ef565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb9190610f53565b610507565b6040516101fd919061116e565b60405180910390f35b610220600480360381019061021b9190610ed3565b6105c8565b005b34801561022e57600080fd5b5061024960048036038101906102449190610f13565b610640565b005b34801561025757600080fd5b50610272600480360381019061026d9190610ea6565b6107f7565b60405161027f91906111cd565b60405180910390f35b34801561029457600080fd5b506102af60048036038101906102aa9190610ea6565b610924565b6040516102bc91906111b2565b60405180910390f35b6000818051602081018201805184825260208301602085012081835280955050505050506000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b6000808260405161033d9190611157565b908152602001604051809103902060000160149054906101000a900460ff169050919050565b6002818154811061037357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600381815481106103b257600080fd5b9060005260206000200160009150905080546103cd906114db565b80601f01602080910402602001604051908101604052809291908181526020018280546103f9906114db565b80156104465780601f1061041b57610100808354040283529160200191610446565b820191906000526020600020905b81548152906001019060200180831161042957829003601f168201915b505050505081565b6001602052806000526040600020600091509050806000018054610471906114db565b80601f016020809104026020016040519081016040528092919081815260200182805461049d906114db565b80156104ea5780601f106104bf576101008083540402835291602001916104ea565b820191906000526020600020905b8154815290600101906020018083116104cd57829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b60008060008360405161051a9190611157565b90815260200160405180910390206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16151515158152505090508060200151156105bd5780600001519150506105c3565b60009150505b919050565b60003490506105d68161097d565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f3b9ebdb53ea32464f35bc6fa7ccb568c358ffa83792563d8c97bf043a99ee6b68360405161063391906112bf565b60405180910390a3505050565b600080602067ffffffffffffffff81111561065e5761065d611614565b5b6040519080825280601f01601f1916602001820160405280156106905781602001600182028036833780820191505090505b50905060008060b573ffffffffffffffffffffffffffffffffffffffff16836040516106bc9190611140565b6000604051808303816000865af19150503d80600081146106f9576040519150601f19603f3d011682016040523d82523d6000602084013e6106fe565b606091505b509150915081610743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a9061121f565b60405180910390fd5b600061074e82610b04565b905060018114945084610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078d9061127f565b60405180910390fd5b6107a08787610bed565b8673ffffffffffffffffffffffffffffffffffffffff167fed2a6b76dd30ca61a3c463f15ebbe687c91c02dad5ceea323d771ae5e780e3d1876040516107e691906112bf565b60405180910390a250505050505050565b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082018054610855906114db565b80601f0160208091040260200160405190810160405280929190818152602001828054610881906114db565b80156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b505050505081526020016001820160009054906101000a900460ff161515151581525050905080602001511561090b57806000015191505061091f565b604051806020016040528060008152509150505b919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff169050919050565b6000602067ffffffffffffffff81111561099a57610999611614565b5b6040519080825280601f01601f1916602001820160405280156109cc5781602001600182028036833780820191505090505b50905060008260001b905060005b6020811015610a4f578181602081106109f6576109f56115e5565b5b1a60f81b838281518110610a0d57610a0c6115e5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610a479061153e565b9150506109da565b50600060b773ffffffffffffffffffffffffffffffffffffffff1683604051610a789190611140565b6000604051808303816000865af19150503d8060008114610ab5576040519150601f19603f3d011682016040523d82523d6000602084013e610aba565b606091505b5050905080610afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af59061125f565b60405180910390fd5b50505050565b6000806000835190506020811115610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b489061123f565b60405180910390fd5b60005b81811015610bdf57600881836020610b6c919061141d565b610b76919061136d565b610b8091906113c3565b60ff60f81b868381518110610b9857610b976115e5565b5b602001015160f81c60f81b167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c831792508080610bd79061153e565b915050610b54565b508160001c92505050919050565b6000603467ffffffffffffffff811115610c0a57610c09611614565b5b6040519080825280601f01601f191660200182016040528015610c3c5781602001600182028036833780820191505090505b50905060008260001b90506000805b6014811015610ccf578560601b8160148110610c6a57610c696115e5565b5b1a60f81b848380610c7a9061153e565b945081518110610c8d57610c8c6115e5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610cc79061153e565b915050610c4b565b600090505b6020811015610d5557828160208110610cf057610cef6115e5565b5b1a60f81b848380610d009061153e565b945081518110610d1357610d126115e5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610d4d9061153e565b915050610cd4565b600060b673ffffffffffffffffffffffffffffffffffffffff1685604051610d7d9190611140565b6000604051808303816000865af19150503d8060008114610dba576040519150601f19603f3d011682016040523d82523d6000602084013e610dbf565b606091505b5050905080610e03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfa9061129f565b60405180910390fd5b50505050505050565b6000610e1f610e1a846112ff565b6112da565b905082815260208101848484011115610e3b57610e3a611648565b5b610e46848285611499565b509392505050565b600081359050610e5d81611865565b92915050565b600082601f830112610e7857610e77611643565b5b8135610e88848260208601610e0c565b91505092915050565b600081359050610ea08161187c565b92915050565b600060208284031215610ebc57610ebb611652565b5b6000610eca84828501610e4e565b91505092915050565b60008060408385031215610eea57610ee9611652565b5b6000610ef885828601610e4e565b9250506020610f0985828601610e4e565b9150509250929050565b60008060408385031215610f2a57610f29611652565b5b6000610f3885828601610e4e565b9250506020610f4985828601610e91565b9150509250929050565b600060208284031215610f6957610f68611652565b5b600082013567ffffffffffffffff811115610f8757610f8661164d565b5b610f9384828501610e63565b91505092915050565b600060208284031215610fb257610fb1611652565b5b6000610fc084828501610e91565b91505092915050565b610fd281611451565b82525050565b610fe181611463565b82525050565b6000610ff282611330565b610ffc8185611346565b935061100c8185602086016114a8565b80840191505092915050565b60006110238261133b565b61102d8185611351565b935061103d8185602086016114a8565b61104681611657565b840191505092915050565b600061105c8261133b565b6110668185611362565b93506110768185602086016114a8565b80840191505092915050565b600061108f604d83611351565b915061109a82611668565b606082019050919050565b60006110b2602583611351565b91506110bd826116dd565b604082019050919050565b60006110d5604883611351565b91506110e08261172c565b606082019050919050565b60006110f8603883611351565b9150611103826117a1565b604082019050919050565b600061111b604783611351565b9150611126826117f0565b606082019050919050565b61113a8161148f565b82525050565b600061114c8284610fe7565b915081905092915050565b60006111638284611051565b915081905092915050565b60006020820190506111836000830184610fc9565b92915050565b600060408201905061119e6000830185610fc9565b6111ab6020830184610fd8565b9392505050565b60006020820190506111c76000830184610fd8565b92915050565b600060208201905081810360008301526111e78184611018565b905092915050565b600060408201905081810360008301526112098185611018565b90506112186020830184610fd8565b9392505050565b6000602082019050818103600083015261123881611082565b9050919050565b60006020820190508181036000830152611258816110a5565b9050919050565b60006020820190508181036000830152611278816110c8565b9050919050565b60006020820190508181036000830152611298816110eb565b9050919050565b600060208201905081810360008301526112b88161110e565b9050919050565b60006020820190506112d46000830184611131565b92915050565b60006112e46112f5565b90506112f0828261150d565b919050565b6000604051905090565b600067ffffffffffffffff82111561131a57611319611614565b5b61132382611657565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006113788261148f565b91506113838361148f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113b8576113b7611587565b5b828201905092915050565b60006113ce8261148f565b91506113d98361148f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561141257611411611587565b5b828202905092915050565b60006114288261148f565b91506114338361148f565b92508282101561144657611445611587565b5b828203905092915050565b600061145c8261146f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156114c65780820151818401526020810190506114ab565b838111156114d5576000848401525b50505050565b600060028204905060018216806114f357607f821691505b60208210811415611507576115066115b6565b5b50919050565b61151682611657565b810181811067ffffffffffffffff8211171561153557611534611614565b5b80604052505050565b60006115498261148f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561157c5761157b611587565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537562636861696e544675656c546f6b656e42616e6b2e70726976696c65676560008201527f644163636573734f6e6c793a206661696c656420746f20636865636b2074686560208201527f20616363657373206c6576656c00000000000000000000000000000000000000604082015250565b7f627974657320746f2075696e7432353620636f6e76657273696f6e206f76657260008201527f666c6f7773000000000000000000000000000000000000000000000000000000602082015250565b7f537562636861696e544675656c546f6b656e42616e6b2e5f6275726e5446756560008201527f6c566f7563686572733a206661696c656420746f206275726e20544675656c2060208201527f766f756368657273000000000000000000000000000000000000000000000000604082015250565b7f566f75636865724d61702e70726976696c656765644163636573734f6e6c793a60008201527f20696e73756666696369656e742070726976696c656765730000000000000000602082015250565b7f537562636861696e544675656c546f6b656e42616e6b2e6d696e74544675656c60008201527f566f7563686572733a206661696c656420746f206d696e7420544675656c207660208201527f6f75636865727300000000000000000000000000000000000000000000000000604082015250565b61186e81611451565b811461187957600080fd5b50565b6118858161148f565b811461189057600080fd5b5056fea26469706673582212200c179fa043252d83356d4a1d36a71a996028087dd331fb86a7e2b2c42d381cc564736f6c63430008070033"

var mintTFuelVouchersFuncSelector = crypto.Keccak256([]byte("mintVouchers(address,uint256)"))[:4] // In Solidity, uint is an alias of uint256, so we need to use uint256 here to get the correct selector

// TFuelTokenBank implements the TokenBank interface.
type TFuelTokenBank struct {
}

func NewTFuelTokenBank() *TFuelTokenBank {
	return &TFuelTokenBank{}
}

// Mint vouchers for the token transferred cross-chain. If the voucher contract for the token does not yet exist, the
// TokenBank contract deploys the the vouncher contract first and then mints the vouchers in the same call.
// Note: mintVouchers() is only allowed in the privileged execution context. Hence, if a user calls the the TFuelTokenBank.mintVouchers() function (e.g. with the following command),
// the transaction should fail with the "evm revert" error:
//       thetasubcli tx smart_contract --chain="private_subchain" --from=2E833968E5bB786Ae419c4d13189fB081Cc43bab --to=0xBd770416a3345F91E4B34576cb804a576fa48EB1 --gas_price=4000000000000wei --gas_limit=5000000 --data=da837d5a0000000000000000000000002e833968e5bb786ae419c4d13189fb081cc43bab000000000000000000000000000000000000000000000004c53ecdc18a600000 --password=qwertyuiop --seq=2
func (tb *TFuelTokenBank) GenerateMintVouchersProxySctx(blockProposer common.Address, view *slst.StoreView, ccte *core.CrossChainTFuelTransferEvent) (*types.SmartContractTx, error) {
	voucherReceiver := ccte.Receiver
	amount := ccte.Amount

	calldata := tb.encodeCalldata(voucherReceiver, amount)
	tfuelTokenBankContractAddr := view.GetTFuelTokenBankContractAddress()
	sctx, err := constructProxySmartContractTx(blockProposer, *tfuelTokenBankContractAddr, calldata)
	if err != nil {
		return nil, err
	}

	return sctx, nil
}

// calldata example: da837d5a0000000000000000000000002e833968e5bb786ae419c4d13189fb081cc43bab000000000000000000000000000000000000000000000004c53ecdc18a600000
// Let's break the above calldata into parts, and see what each part represents:
//
// da837d5a // the function selector, i.e mintTFuelVouchersFuncSelector
// 0000000000000000000000002e833968e5bb786ae419c4d13189fb081cc43bab // voucherReceiver, left padded to 32 bytes with zeros
// 000000000000000000000000000000000000000000000004c53ecdc18a600000 // mintAmount, left padded to 32 bytes with zeros, 0x13c9647e25a9940000 = 88000000000000000000L TFuelWei = 99 TFuel
func (tb *TFuelTokenBank) encodeCalldata(voucherReceiver common.Address, amount *big.Int) []byte {
	calldata := append([]byte{}, mintTFuelVouchersFuncSelector...)
	calldata = append(calldata, common.LeftPadBytes(voucherReceiver.Bytes(), int(wordSizeInBytes))...)
	calldata = append(calldata, common.LeftPadBytes(packBigIntParam(amount), int(wordSizeInBytes))...)

	logger.Debugf("mint TFuel voucher sctx calldata: %v", hex.EncodeToString(calldata))

	return calldata
}
