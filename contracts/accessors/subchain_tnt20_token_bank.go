// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SubchainTNT20TokenBankMetaData contains all meta data concerning the SubchainTNT20TokenBank contract.
var SubchainTNT20TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"subchainvoucherowner\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"mainchaintokenreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"voucherburnnonce\",\"type\":\"uint256\"}],\"name\":\"burntnt20vouchers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"subchainvoucherreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"vouchercontact\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"mainchaintokenlocknonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"vouchermintnonce\",\"type\":\"uint256\"}],\"name\":\"minttnt20vouchers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"subchaintokensender\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"mainchainvoucherreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"lockedamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"tnt20contract\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenlocknonce\",\"type\":\"uint256\"}],\"name\":\"tnt20tokenlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"subchaintokenreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"tnt20contract\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"unlockedamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"mainchainvoucherburnnonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenunlocknonce\",\"type\":\"uint256\"}],\"name\":\"tnt20tokenunlocked\",\"type\":\"event\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alldenoms\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allvouchers\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomtovoucherlookup\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"voucheraddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"vouchercontractaddr\",\"type\":\"address\"}],\"name\":\"getdenom\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getvoucher\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenlocknonce\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenunlocknonce\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucheraddresstodenomlookup\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voucherburnnonce\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vouchermintnonce\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"tnt20contract\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"mainchainvoucherreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"lockedamount\",\"type\":\"uint256\"}],\"name\":\"locktokens\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"address\",\"name\":\"subchaintokenreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"unlockamount\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"mainchainvoucherburnnonce\",\"type\":\"uint256\"}],\"name\":\"unlocktokens\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internaltype\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internaltype\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internaltype\":\"address\",\"name\":\"subchainvoucherreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"mintamount\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"mainchaintokenlocknonce\",\"type\":\"uint256\"}],\"name\":\"mintvouchers\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"vouchercontractaddr\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"mainchaintokenreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"burnamount\",\"type\":\"uint256\"}],\"name\":\"burnvouchers\",\"outputs\":[],\"statemutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "",
}

// SubchainTNT20TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use SubchainTNT20TokenBankMetaData.ABI instead.
var SubchainTNT20TokenBankABI = SubchainTNT20TokenBankMetaData.ABI

// SubchainTNT20TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SubchainTNT20TokenBankMetaData.Bin instead.
var SubchainTNT20TokenBankBin = SubchainTNT20TokenBankMetaData.Bin

// DeploySubchainTNT20TokenBank deploys a new Ethereum contract, binding an instance of SubchainTNT20TokenBank to it.
func DeploySubchainTNT20TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SubchainTNT20TokenBank, error) {
	parsed, err := SubchainTNT20TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SubchainTNT20TokenBankBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SubchainTNT20TokenBank{SubchainTNT20TokenBankCaller: SubchainTNT20TokenBankCaller{contract: contract}, SubchainTNT20TokenBankTransactor: SubchainTNT20TokenBankTransactor{contract: contract}, SubchainTNT20TokenBankFilterer: SubchainTNT20TokenBankFilterer{contract: contract}}, nil
}

// SubchainTNT20TokenBank is an auto generated Go binding around an Ethereum contract.
type SubchainTNT20TokenBank struct {
	SubchainTNT20TokenBankCaller     // Read-only binding to the contract
	SubchainTNT20TokenBankTransactor // Write-only binding to the contract
	SubchainTNT20TokenBankFilterer   // Log filterer for contract events
}

// SubchainTNT20TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type SubchainTNT20TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainTNT20TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SubchainTNT20TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainTNT20TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SubchainTNT20TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainTNT20TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SubchainTNT20TokenBankSession struct {
	Contract     *SubchainTNT20TokenBank // Generic contract binding to set the session for
	CallOpts     bind.CallOpts           // Call options to use throughout this session
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// SubchainTNT20TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SubchainTNT20TokenBankCallerSession struct {
	Contract *SubchainTNT20TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                 // Call options to use throughout this session
}

// SubchainTNT20TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SubchainTNT20TokenBankTransactorSession struct {
	Contract     *SubchainTNT20TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// SubchainTNT20TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type SubchainTNT20TokenBankRaw struct {
	Contract *SubchainTNT20TokenBank // Generic contract binding to access the raw methods on
}

// SubchainTNT20TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SubchainTNT20TokenBankCallerRaw struct {
	Contract *SubchainTNT20TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// SubchainTNT20TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SubchainTNT20TokenBankTransactorRaw struct {
	Contract *SubchainTNT20TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSubchainTNT20TokenBank creates a new instance of SubchainTNT20TokenBank, bound to a specific deployed contract.
func NewSubchainTNT20TokenBank(address common.Address, backend bind.ContractBackend) (*SubchainTNT20TokenBank, error) {
	contract, err := bindSubchainTNT20TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SubchainTNT20TokenBank{SubchainTNT20TokenBankCaller: SubchainTNT20TokenBankCaller{contract: contract}, SubchainTNT20TokenBankTransactor: SubchainTNT20TokenBankTransactor{contract: contract}, SubchainTNT20TokenBankFilterer: SubchainTNT20TokenBankFilterer{contract: contract}}, nil
}

// NewSubchainTNT20TokenBankCaller creates a new read-only instance of SubchainTNT20TokenBank, bound to a specific deployed contract.
func NewSubchainTNT20TokenBankCaller(address common.Address, caller bind.ContractCaller) (*SubchainTNT20TokenBankCaller, error) {
	contract, err := bindSubchainTNT20TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SubchainTNT20TokenBankCaller{contract: contract}, nil
}

// NewSubchainTNT20TokenBankTransactor creates a new write-only instance of SubchainTNT20TokenBank, bound to a specific deployed contract.
func NewSubchainTNT20TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*SubchainTNT20TokenBankTransactor, error) {
	contract, err := bindSubchainTNT20TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SubchainTNT20TokenBankTransactor{contract: contract}, nil
}

// NewSubchainTNT20TokenBankFilterer creates a new log filterer instance of SubchainTNT20TokenBank, bound to a specific deployed contract.
func NewSubchainTNT20TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*SubchainTNT20TokenBankFilterer, error) {
	contract, err := bindSubchainTNT20TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SubchainTNT20TokenBankFilterer{contract: contract}, nil
}

// bindSubchainTNT20TokenBank binds a generic wrapper to an already deployed contract.
func bindSubchainTNT20TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SubchainTNT20TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SubchainTNT20TokenBank.Contract.SubchainTNT20TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.SubchainTNT20TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.SubchainTNT20TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SubchainTNT20TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.contract.Transact(opts, method, params...)
}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Alldenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "alldenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Alldenoms(arg0 *big.Int) (string, error) {
	return _SubchainTNT20TokenBank.Contract.Alldenoms(&_SubchainTNT20TokenBank.CallOpts, arg0)
}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Alldenoms(arg0 *big.Int) (string, error) {
	return _SubchainTNT20TokenBank.Contract.Alldenoms(&_SubchainTNT20TokenBank.CallOpts, arg0)
}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Allvouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "allvouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Allvouchers(arg0 *big.Int) (common.Address, error) {
	return _SubchainTNT20TokenBank.Contract.Allvouchers(&_SubchainTNT20TokenBank.CallOpts, arg0)
}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Allvouchers(arg0 *big.Int) (common.Address, error) {
	return _SubchainTNT20TokenBank.Contract.Allvouchers(&_SubchainTNT20TokenBank.CallOpts, arg0)
}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Denomtovoucherlookup(opts *bind.CallOpts, arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "denomtovoucherlookup", arg0)

	outstruct := new(struct {
		Contractaddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Contractaddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Denomtovoucherlookup(arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	return _SubchainTNT20TokenBank.Contract.Denomtovoucherlookup(&_SubchainTNT20TokenBank.CallOpts, arg0)
}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Denomtovoucherlookup(arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	return _SubchainTNT20TokenBank.Contract.Denomtovoucherlookup(&_SubchainTNT20TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Exists(denom string) (bool, error) {
	return _SubchainTNT20TokenBank.Contract.Exists(&_SubchainTNT20TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _SubchainTNT20TokenBank.Contract.Exists(&_SubchainTNT20TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Exists0(opts *bind.CallOpts, voucheraddress common.Address) (bool, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "exists0", voucheraddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Exists0(voucheraddress common.Address) (bool, error) {
	return _SubchainTNT20TokenBank.Contract.Exists0(&_SubchainTNT20TokenBank.CallOpts, voucheraddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Exists0(voucheraddress common.Address) (bool, error) {
	return _SubchainTNT20TokenBank.Contract.Exists0(&_SubchainTNT20TokenBank.CallOpts, voucheraddress)
}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Getdenom(opts *bind.CallOpts, vouchercontractaddr common.Address) (string, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "getdenom", vouchercontractaddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Getdenom(vouchercontractaddr common.Address) (string, error) {
	return _SubchainTNT20TokenBank.Contract.Getdenom(&_SubchainTNT20TokenBank.CallOpts, vouchercontractaddr)
}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Getdenom(vouchercontractaddr common.Address) (string, error) {
	return _SubchainTNT20TokenBank.Contract.Getdenom(&_SubchainTNT20TokenBank.CallOpts, vouchercontractaddr)
}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Getvoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "getvoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Getvoucher(denom string) (common.Address, error) {
	return _SubchainTNT20TokenBank.Contract.Getvoucher(&_SubchainTNT20TokenBank.CallOpts, denom)
}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Getvoucher(denom string) (common.Address, error) {
	return _SubchainTNT20TokenBank.Contract.Getvoucher(&_SubchainTNT20TokenBank.CallOpts, denom)
}

// Tokenlocknonce is a free data retrieval call binding the contract method 0x03ffa7b2.
//
// Solidity: function tokenlocknonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Tokenlocknonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "tokenlocknonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Tokenlocknonce is a free data retrieval call binding the contract method 0x03ffa7b2.
//
// Solidity: function tokenlocknonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Tokenlocknonce() (*big.Int, error) {
	return _SubchainTNT20TokenBank.Contract.Tokenlocknonce(&_SubchainTNT20TokenBank.CallOpts)
}

// Tokenlocknonce is a free data retrieval call binding the contract method 0x03ffa7b2.
//
// Solidity: function tokenlocknonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Tokenlocknonce() (*big.Int, error) {
	return _SubchainTNT20TokenBank.Contract.Tokenlocknonce(&_SubchainTNT20TokenBank.CallOpts)
}

// Tokenunlocknonce is a free data retrieval call binding the contract method 0xf89b5efd.
//
// Solidity: function tokenunlocknonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Tokenunlocknonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "tokenunlocknonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Tokenunlocknonce is a free data retrieval call binding the contract method 0xf89b5efd.
//
// Solidity: function tokenunlocknonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Tokenunlocknonce() (*big.Int, error) {
	return _SubchainTNT20TokenBank.Contract.Tokenunlocknonce(&_SubchainTNT20TokenBank.CallOpts)
}

// Tokenunlocknonce is a free data retrieval call binding the contract method 0xf89b5efd.
//
// Solidity: function tokenunlocknonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Tokenunlocknonce() (*big.Int, error) {
	return _SubchainTNT20TokenBank.Contract.Tokenunlocknonce(&_SubchainTNT20TokenBank.CallOpts)
}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Voucheraddresstodenomlookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "voucheraddresstodenomlookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Voucheraddresstodenomlookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _SubchainTNT20TokenBank.Contract.Voucheraddresstodenomlookup(&_SubchainTNT20TokenBank.CallOpts, arg0)
}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Voucheraddresstodenomlookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _SubchainTNT20TokenBank.Contract.Voucheraddresstodenomlookup(&_SubchainTNT20TokenBank.CallOpts, arg0)
}

// Voucherburnnonce is a free data retrieval call binding the contract method 0x11bc48fb.
//
// Solidity: function voucherburnnonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Voucherburnnonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "voucherburnnonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Voucherburnnonce is a free data retrieval call binding the contract method 0x11bc48fb.
//
// Solidity: function voucherburnnonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Voucherburnnonce() (*big.Int, error) {
	return _SubchainTNT20TokenBank.Contract.Voucherburnnonce(&_SubchainTNT20TokenBank.CallOpts)
}

// Voucherburnnonce is a free data retrieval call binding the contract method 0x11bc48fb.
//
// Solidity: function voucherburnnonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Voucherburnnonce() (*big.Int, error) {
	return _SubchainTNT20TokenBank.Contract.Voucherburnnonce(&_SubchainTNT20TokenBank.CallOpts)
}

// Vouchermintnonce is a free data retrieval call binding the contract method 0xb516d30f.
//
// Solidity: function vouchermintnonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCaller) Vouchermintnonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainTNT20TokenBank.contract.Call(opts, &out, "vouchermintnonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Vouchermintnonce is a free data retrieval call binding the contract method 0xb516d30f.
//
// Solidity: function vouchermintnonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Vouchermintnonce() (*big.Int, error) {
	return _SubchainTNT20TokenBank.Contract.Vouchermintnonce(&_SubchainTNT20TokenBank.CallOpts)
}

// Vouchermintnonce is a free data retrieval call binding the contract method 0xb516d30f.
//
// Solidity: function vouchermintnonce() view returns(uint256)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankCallerSession) Vouchermintnonce() (*big.Int, error) {
	return _SubchainTNT20TokenBank.Contract.Vouchermintnonce(&_SubchainTNT20TokenBank.CallOpts)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address vouchercontractaddr, address mainchaintokenreceiver, uint256 burnamount) payable returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankTransactor) Burnvouchers(opts *bind.TransactOpts, vouchercontractaddr common.Address, mainchaintokenreceiver common.Address, burnamount *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.contract.Transact(opts, "burnvouchers", vouchercontractaddr, mainchaintokenreceiver, burnamount)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address vouchercontractaddr, address mainchaintokenreceiver, uint256 burnamount) payable returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Burnvouchers(vouchercontractaddr common.Address, mainchaintokenreceiver common.Address, burnamount *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.Burnvouchers(&_SubchainTNT20TokenBank.TransactOpts, vouchercontractaddr, mainchaintokenreceiver, burnamount)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address vouchercontractaddr, address mainchaintokenreceiver, uint256 burnamount) payable returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankTransactorSession) Burnvouchers(vouchercontractaddr common.Address, mainchaintokenreceiver common.Address, burnamount *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.Burnvouchers(&_SubchainTNT20TokenBank.TransactOpts, vouchercontractaddr, mainchaintokenreceiver, burnamount)
}

// Locktokens is a paid mutator transaction binding the contract method 0x4c138fe5.
//
// Solidity: function locktokens(address tnt20contract, address mainchainvoucherreceiver, uint256 lockedamount) returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankTransactor) Locktokens(opts *bind.TransactOpts, tnt20contract common.Address, mainchainvoucherreceiver common.Address, lockedamount *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.contract.Transact(opts, "locktokens", tnt20contract, mainchainvoucherreceiver, lockedamount)
}

// Locktokens is a paid mutator transaction binding the contract method 0x4c138fe5.
//
// Solidity: function locktokens(address tnt20contract, address mainchainvoucherreceiver, uint256 lockedamount) returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Locktokens(tnt20contract common.Address, mainchainvoucherreceiver common.Address, lockedamount *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.Locktokens(&_SubchainTNT20TokenBank.TransactOpts, tnt20contract, mainchainvoucherreceiver, lockedamount)
}

// Locktokens is a paid mutator transaction binding the contract method 0x4c138fe5.
//
// Solidity: function locktokens(address tnt20contract, address mainchainvoucherreceiver, uint256 lockedamount) returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankTransactorSession) Locktokens(tnt20contract common.Address, mainchainvoucherreceiver common.Address, lockedamount *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.Locktokens(&_SubchainTNT20TokenBank.TransactOpts, tnt20contract, mainchainvoucherreceiver, lockedamount)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0xfa7de981.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, uint8 decimals, address subchainvoucherreceiver, uint256 mintamount, uint256 mainchaintokenlocknonce) returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankTransactor) Mintvouchers(opts *bind.TransactOpts, denom string, name string, symbol string, decimals uint8, subchainvoucherreceiver common.Address, mintamount *big.Int, mainchaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.contract.Transact(opts, "mintvouchers", denom, name, symbol, decimals, subchainvoucherreceiver, mintamount, mainchaintokenlocknonce)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0xfa7de981.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, uint8 decimals, address subchainvoucherreceiver, uint256 mintamount, uint256 mainchaintokenlocknonce) returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Mintvouchers(denom string, name string, symbol string, decimals uint8, subchainvoucherreceiver common.Address, mintamount *big.Int, mainchaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.Mintvouchers(&_SubchainTNT20TokenBank.TransactOpts, denom, name, symbol, decimals, subchainvoucherreceiver, mintamount, mainchaintokenlocknonce)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0xfa7de981.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, uint8 decimals, address subchainvoucherreceiver, uint256 mintamount, uint256 mainchaintokenlocknonce) returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankTransactorSession) Mintvouchers(denom string, name string, symbol string, decimals uint8, subchainvoucherreceiver common.Address, mintamount *big.Int, mainchaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.Mintvouchers(&_SubchainTNT20TokenBank.TransactOpts, denom, name, symbol, decimals, subchainvoucherreceiver, mintamount, mainchaintokenlocknonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0x3a481807.
//
// Solidity: function unlocktokens(string denom, address subchaintokenreceiver, uint256 unlockamount, uint256 mainchainvoucherburnnonce) returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankTransactor) Unlocktokens(opts *bind.TransactOpts, denom string, subchaintokenreceiver common.Address, unlockamount *big.Int, mainchainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.contract.Transact(opts, "unlocktokens", denom, subchaintokenreceiver, unlockamount, mainchainvoucherburnnonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0x3a481807.
//
// Solidity: function unlocktokens(string denom, address subchaintokenreceiver, uint256 unlockamount, uint256 mainchainvoucherburnnonce) returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankSession) Unlocktokens(denom string, subchaintokenreceiver common.Address, unlockamount *big.Int, mainchainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.Unlocktokens(&_SubchainTNT20TokenBank.TransactOpts, denom, subchaintokenreceiver, unlockamount, mainchainvoucherburnnonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0x3a481807.
//
// Solidity: function unlocktokens(string denom, address subchaintokenreceiver, uint256 unlockamount, uint256 mainchainvoucherburnnonce) returns()
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankTransactorSession) Unlocktokens(denom string, subchaintokenreceiver common.Address, unlockamount *big.Int, mainchainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT20TokenBank.Contract.Unlocktokens(&_SubchainTNT20TokenBank.TransactOpts, denom, subchaintokenreceiver, unlockamount, mainchainvoucherburnnonce)
}

// SubchainTNT20TokenBankBurntnt20vouchersIterator is returned from FilterBurntnt20vouchers and is used to iterate over the raw logs and unpacked data for Burntnt20vouchers events raised by the SubchainTNT20TokenBank contract.
type SubchainTNT20TokenBankBurntnt20vouchersIterator struct {
	Event *SubchainTNT20TokenBankBurntnt20vouchers // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainTNT20TokenBankBurntnt20vouchersIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainTNT20TokenBankBurntnt20vouchers)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainTNT20TokenBankBurntnt20vouchers)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainTNT20TokenBankBurntnt20vouchersIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainTNT20TokenBankBurntnt20vouchersIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainTNT20TokenBankBurntnt20vouchers represents a Burntnt20vouchers event raised by the SubchainTNT20TokenBank contract.
type SubchainTNT20TokenBankBurntnt20vouchers struct {
	Denom                  string
	Subchainvoucherowner   common.Address
	Mainchaintokenreceiver common.Address
	Amount                 *big.Int
	Voucherburnnonce       *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterBurntnt20vouchers is a free log retrieval operation binding the contract event 0x8f40e427c685a5b5776df6f987be69d120bb6d9b17ed461c0f7faecdbdad6d89.
//
// Solidity: event burntnt20vouchers(string denom, address subchainvoucherowner, address mainchaintokenreceiver, uint256 amount, uint256 voucherburnnonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) FilterBurntnt20vouchers(opts *bind.FilterOpts) (*SubchainTNT20TokenBankBurntnt20vouchersIterator, error) {

	logs, sub, err := _SubchainTNT20TokenBank.contract.FilterLogs(opts, "burntnt20vouchers")
	if err != nil {
		return nil, err
	}
	return &SubchainTNT20TokenBankBurntnt20vouchersIterator{contract: _SubchainTNT20TokenBank.contract, event: "burntnt20vouchers", logs: logs, sub: sub}, nil
}

// WatchBurntnt20vouchers is a free log subscription operation binding the contract event 0x8f40e427c685a5b5776df6f987be69d120bb6d9b17ed461c0f7faecdbdad6d89.
//
// Solidity: event burntnt20vouchers(string denom, address subchainvoucherowner, address mainchaintokenreceiver, uint256 amount, uint256 voucherburnnonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) WatchBurntnt20vouchers(opts *bind.WatchOpts, sink chan<- *SubchainTNT20TokenBankBurntnt20vouchers) (event.Subscription, error) {

	logs, sub, err := _SubchainTNT20TokenBank.contract.WatchLogs(opts, "burntnt20vouchers")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainTNT20TokenBankBurntnt20vouchers)
				if err := _SubchainTNT20TokenBank.contract.UnpackLog(event, "burntnt20vouchers", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurntnt20vouchers is a log parse operation binding the contract event 0x8f40e427c685a5b5776df6f987be69d120bb6d9b17ed461c0f7faecdbdad6d89.
//
// Solidity: event burntnt20vouchers(string denom, address subchainvoucherowner, address mainchaintokenreceiver, uint256 amount, uint256 voucherburnnonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) ParseBurntnt20vouchers(log types.Log) (*SubchainTNT20TokenBankBurntnt20vouchers, error) {
	event := new(SubchainTNT20TokenBankBurntnt20vouchers)
	if err := _SubchainTNT20TokenBank.contract.UnpackLog(event, "burntnt20vouchers", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SubchainTNT20TokenBankMinttnt20vouchersIterator is returned from FilterMinttnt20vouchers and is used to iterate over the raw logs and unpacked data for Minttnt20vouchers events raised by the SubchainTNT20TokenBank contract.
type SubchainTNT20TokenBankMinttnt20vouchersIterator struct {
	Event *SubchainTNT20TokenBankMinttnt20vouchers // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainTNT20TokenBankMinttnt20vouchersIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainTNT20TokenBankMinttnt20vouchers)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainTNT20TokenBankMinttnt20vouchers)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainTNT20TokenBankMinttnt20vouchersIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainTNT20TokenBankMinttnt20vouchersIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainTNT20TokenBankMinttnt20vouchers represents a Minttnt20vouchers event raised by the SubchainTNT20TokenBank contract.
type SubchainTNT20TokenBankMinttnt20vouchers struct {
	Denom                   string
	Subchainvoucherreceiver common.Address
	Vouchercontact          common.Address
	Amount                  *big.Int
	Mainchaintokenlocknonce *big.Int
	Vouchermintnonce        *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterMinttnt20vouchers is a free log retrieval operation binding the contract event 0xb6575d1320728aad603ee2187d4885bc452ca9b206cf2f3d6626b021a9c08771.
//
// Solidity: event minttnt20vouchers(string denom, address subchainvoucherreceiver, address vouchercontact, uint256 amount, uint256 mainchaintokenlocknonce, uint256 vouchermintnonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) FilterMinttnt20vouchers(opts *bind.FilterOpts) (*SubchainTNT20TokenBankMinttnt20vouchersIterator, error) {

	logs, sub, err := _SubchainTNT20TokenBank.contract.FilterLogs(opts, "minttnt20vouchers")
	if err != nil {
		return nil, err
	}
	return &SubchainTNT20TokenBankMinttnt20vouchersIterator{contract: _SubchainTNT20TokenBank.contract, event: "minttnt20vouchers", logs: logs, sub: sub}, nil
}

// WatchMinttnt20vouchers is a free log subscription operation binding the contract event 0xb6575d1320728aad603ee2187d4885bc452ca9b206cf2f3d6626b021a9c08771.
//
// Solidity: event minttnt20vouchers(string denom, address subchainvoucherreceiver, address vouchercontact, uint256 amount, uint256 mainchaintokenlocknonce, uint256 vouchermintnonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) WatchMinttnt20vouchers(opts *bind.WatchOpts, sink chan<- *SubchainTNT20TokenBankMinttnt20vouchers) (event.Subscription, error) {

	logs, sub, err := _SubchainTNT20TokenBank.contract.WatchLogs(opts, "minttnt20vouchers")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainTNT20TokenBankMinttnt20vouchers)
				if err := _SubchainTNT20TokenBank.contract.UnpackLog(event, "minttnt20vouchers", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinttnt20vouchers is a log parse operation binding the contract event 0xb6575d1320728aad603ee2187d4885bc452ca9b206cf2f3d6626b021a9c08771.
//
// Solidity: event minttnt20vouchers(string denom, address subchainvoucherreceiver, address vouchercontact, uint256 amount, uint256 mainchaintokenlocknonce, uint256 vouchermintnonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) ParseMinttnt20vouchers(log types.Log) (*SubchainTNT20TokenBankMinttnt20vouchers, error) {
	event := new(SubchainTNT20TokenBankMinttnt20vouchers)
	if err := _SubchainTNT20TokenBank.contract.UnpackLog(event, "minttnt20vouchers", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SubchainTNT20TokenBankTnt20tokenlockedIterator is returned from FilterTnt20tokenlocked and is used to iterate over the raw logs and unpacked data for Tnt20tokenlocked events raised by the SubchainTNT20TokenBank contract.
type SubchainTNT20TokenBankTnt20tokenlockedIterator struct {
	Event *SubchainTNT20TokenBankTnt20tokenlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainTNT20TokenBankTnt20tokenlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainTNT20TokenBankTnt20tokenlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainTNT20TokenBankTnt20tokenlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainTNT20TokenBankTnt20tokenlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainTNT20TokenBankTnt20tokenlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainTNT20TokenBankTnt20tokenlocked represents a Tnt20tokenlocked event raised by the SubchainTNT20TokenBank contract.
type SubchainTNT20TokenBankTnt20tokenlocked struct {
	Denom                    string
	Subchaintokensender      common.Address
	Mainchainvoucherreceiver common.Address
	Lockedamount             *big.Int
	Tnt20contract            common.Address
	Name                     string
	Symbol                   string
	Decimal                  uint8
	Tokenlocknonce           *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTnt20tokenlocked is a free log retrieval operation binding the contract event 0x73e0bd81cb37d2c4a88f924a98a86f80acf0c711ffffc8472705da0a72a99fd9.
//
// Solidity: event tnt20tokenlocked(string denom, address subchaintokensender, address mainchainvoucherreceiver, uint256 lockedamount, address tnt20contract, string name, string symbol, uint8 decimal, uint256 tokenlocknonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) FilterTnt20tokenlocked(opts *bind.FilterOpts) (*SubchainTNT20TokenBankTnt20tokenlockedIterator, error) {

	logs, sub, err := _SubchainTNT20TokenBank.contract.FilterLogs(opts, "tnt20tokenlocked")
	if err != nil {
		return nil, err
	}
	return &SubchainTNT20TokenBankTnt20tokenlockedIterator{contract: _SubchainTNT20TokenBank.contract, event: "tnt20tokenlocked", logs: logs, sub: sub}, nil
}

// WatchTnt20tokenlocked is a free log subscription operation binding the contract event 0x73e0bd81cb37d2c4a88f924a98a86f80acf0c711ffffc8472705da0a72a99fd9.
//
// Solidity: event tnt20tokenlocked(string denom, address subchaintokensender, address mainchainvoucherreceiver, uint256 lockedamount, address tnt20contract, string name, string symbol, uint8 decimal, uint256 tokenlocknonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) WatchTnt20tokenlocked(opts *bind.WatchOpts, sink chan<- *SubchainTNT20TokenBankTnt20tokenlocked) (event.Subscription, error) {

	logs, sub, err := _SubchainTNT20TokenBank.contract.WatchLogs(opts, "tnt20tokenlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainTNT20TokenBankTnt20tokenlocked)
				if err := _SubchainTNT20TokenBank.contract.UnpackLog(event, "tnt20tokenlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt20tokenlocked is a log parse operation binding the contract event 0x73e0bd81cb37d2c4a88f924a98a86f80acf0c711ffffc8472705da0a72a99fd9.
//
// Solidity: event tnt20tokenlocked(string denom, address subchaintokensender, address mainchainvoucherreceiver, uint256 lockedamount, address tnt20contract, string name, string symbol, uint8 decimal, uint256 tokenlocknonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) ParseTnt20tokenlocked(log types.Log) (*SubchainTNT20TokenBankTnt20tokenlocked, error) {
	event := new(SubchainTNT20TokenBankTnt20tokenlocked)
	if err := _SubchainTNT20TokenBank.contract.UnpackLog(event, "tnt20tokenlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SubchainTNT20TokenBankTnt20tokenunlockedIterator is returned from FilterTnt20tokenunlocked and is used to iterate over the raw logs and unpacked data for Tnt20tokenunlocked events raised by the SubchainTNT20TokenBank contract.
type SubchainTNT20TokenBankTnt20tokenunlockedIterator struct {
	Event *SubchainTNT20TokenBankTnt20tokenunlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainTNT20TokenBankTnt20tokenunlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainTNT20TokenBankTnt20tokenunlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainTNT20TokenBankTnt20tokenunlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainTNT20TokenBankTnt20tokenunlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainTNT20TokenBankTnt20tokenunlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainTNT20TokenBankTnt20tokenunlocked represents a Tnt20tokenunlocked event raised by the SubchainTNT20TokenBank contract.
type SubchainTNT20TokenBankTnt20tokenunlocked struct {
	Denom                     string
	Subchaintokenreceiver     common.Address
	Tnt20contract             common.Address
	Unlockedamount            *big.Int
	Mainchainvoucherburnnonce *big.Int
	Tokenunlocknonce          *big.Int
	Raw                       types.Log // Blockchain specific contextual infos
}

// FilterTnt20tokenunlocked is a free log retrieval operation binding the contract event 0x89078ab34996cf960513be5c04836184f7d099817bd1afd689de8f425d36eaf1.
//
// Solidity: event tnt20tokenunlocked(string denom, address subchaintokenreceiver, address tnt20contract, uint256 unlockedamount, uint256 mainchainvoucherburnnonce, uint256 tokenunlocknonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) FilterTnt20tokenunlocked(opts *bind.FilterOpts) (*SubchainTNT20TokenBankTnt20tokenunlockedIterator, error) {

	logs, sub, err := _SubchainTNT20TokenBank.contract.FilterLogs(opts, "tnt20tokenunlocked")
	if err != nil {
		return nil, err
	}
	return &SubchainTNT20TokenBankTnt20tokenunlockedIterator{contract: _SubchainTNT20TokenBank.contract, event: "tnt20tokenunlocked", logs: logs, sub: sub}, nil
}

// WatchTnt20tokenunlocked is a free log subscription operation binding the contract event 0x89078ab34996cf960513be5c04836184f7d099817bd1afd689de8f425d36eaf1.
//
// Solidity: event tnt20tokenunlocked(string denom, address subchaintokenreceiver, address tnt20contract, uint256 unlockedamount, uint256 mainchainvoucherburnnonce, uint256 tokenunlocknonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) WatchTnt20tokenunlocked(opts *bind.WatchOpts, sink chan<- *SubchainTNT20TokenBankTnt20tokenunlocked) (event.Subscription, error) {

	logs, sub, err := _SubchainTNT20TokenBank.contract.WatchLogs(opts, "tnt20tokenunlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainTNT20TokenBankTnt20tokenunlocked)
				if err := _SubchainTNT20TokenBank.contract.UnpackLog(event, "tnt20tokenunlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt20tokenunlocked is a log parse operation binding the contract event 0x89078ab34996cf960513be5c04836184f7d099817bd1afd689de8f425d36eaf1.
//
// Solidity: event tnt20tokenunlocked(string denom, address subchaintokenreceiver, address tnt20contract, uint256 unlockedamount, uint256 mainchainvoucherburnnonce, uint256 tokenunlocknonce)
func (_SubchainTNT20TokenBank *SubchainTNT20TokenBankFilterer) ParseTnt20tokenunlocked(log types.Log) (*SubchainTNT20TokenBankTnt20tokenunlocked, error) {
	event := new(SubchainTNT20TokenBankTnt20tokenunlocked)
	if err := _SubchainTNT20TokenBank.contract.UnpackLog(event, "tnt20tokenunlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
