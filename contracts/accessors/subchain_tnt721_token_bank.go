// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SubchainTNT721TokenBankMetaData contains all meta data concerning the SubchainTNT721TokenBank contract.
var SubchainTNT721TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"mainchainid_\",\"type\":\"uint256\"}],\"statemutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"mainchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"subchaintokensender\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"mainchaintokenreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"tokenuri\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenlocknonce\",\"type\":\"uint256\"}],\"name\":\"tnt721tokenlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"mainchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"subchaintokenreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"mainchainvoucherburnnonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenunlocknonce\",\"type\":\"uint256\"}],\"name\":\"tnt721tokenunlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"mainchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"subchainvoucherowner\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"mainchaintokenreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"voucherburnnonce\",\"type\":\"uint256\"}],\"name\":\"tnt721voucherburned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"mainchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"subchainvoucherreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"vouchercontact\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"mainchaintokenlocknonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"vouchermintnonce\",\"type\":\"uint256\"}],\"name\":\"tnt721voucherminted\",\"type\":\"event\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alldenoms\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allvouchers\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomtovoucherlookup\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"voucheraddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"vouchercontractaddr\",\"type\":\"address\"}],\"name\":\"getdenom\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getvoucher\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainid\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenlocknonce\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenunlocknonce\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucheraddresstodenomlookup\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voucherburnnonce\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vouchermintnonce\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"tnt721contract\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"mainchaintokenreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"locktokens\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"address\",\"name\":\"tnt721contract\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"subchaintokenreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"mainchainvoucherburnnonce\",\"type\":\"uint256\"}],\"name\":\"unlocktokens\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internaltype\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internaltype\":\"address\",\"name\":\"subchainvoucherreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internaltype\":\"string\",\"name\":\"tokenuri\",\"type\":\"string\"},{\"internaltype\":\"uint256\",\"name\":\"mainchaintokenlocknonce\",\"type\":\"uint256\"}],\"name\":\"mintvouchers\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"vouchercontractaddr\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"mainchaintokenreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"burnvouchers\",\"outputs\":[],\"statemutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50604051620040863803806200408683398101604081905261003191610050565b5060016000908155600281905560038190556004819055600555610069565b60006020828403121561006257600080fd5b5051919050565b61400d80620000796000396000f3fe608060405260043610620001135760003560e01c8063588b140811620000a1578063c27d927a116200006c578063c27d927a146200033c578063c328611a1462000354578063cdeb30d01462000379578063ebda9962146200039e578063f6a3d24e14620003c357600080fd5b8063588b1408146200029757806360569b5e14620002cb578063a0df5cc51462000300578063a2cc6981146200031757600080fd5b806327ca4df111620000e257806327ca4df1146200020257806333835be614620002405780634767ceee14620002585780635102e760146200027f57600080fd5b8063073b950214620001185780631527b14d1462000143578063163fe97214620001b4578063261a323e14620001cc575b600080fd5b3480156200012557600080fd5b506200013060015481565b6040519081526020015b60405180910390f35b3480156200015057600080fd5b50620001946200016236600462001d43565b80516020818301810180516006825292820191909301209152546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b0390931683529015156020830152016200013a565b348015620001c157600080fd5b506200013060055481565b348015620001d957600080fd5b50620001f1620001eb36600462001d43565b62000403565b60405190151581526020016200013a565b3480156200020f57600080fd5b50620002276200022136600462001f58565b62000447565b6040516001600160a01b0390911681526020016200013a565b3480156200024d57600080fd5b506200013060035481565b3480156200026557600080fd5b506200027d6200027736600462001cd9565b62000472565b005b3480156200028c57600080fd5b506200013060025481565b348015620002a457600080fd5b50620002bc620002b636600462001f58565b620007b7565b6040516200013a9190620020fb565b348015620002d857600080fd5b50620002f0620002ea36600462001c99565b6200086c565b6040516200013a92919062002110565b6200027d6200031136600462001cd9565b6200091b565b3480156200032457600080fd5b50620002276200033636600462001d43565b62000b96565b3480156200034957600080fd5b506200013060045481565b3480156200036157600080fd5b506200027d6200037336600462001dfc565b62000c0c565b3480156200038657600080fd5b506200027d6200039836600462001e78565b62000e1d565b348015620003ab57600080fd5b50620002bc620003bd36600462001c99565b62001153565b348015620003d057600080fd5b50620001f1620003e236600462001c99565b6001600160a01b031660009081526007602052604090206001015460ff1690565b600080620004118362001253565b905060068160405162000425919062001fa0565b9081526040519081900360200190205460ff600160a01b909104169392505050565b600881815481106200045857600080fd5b6000918252602090912001546001600160a01b0316905081565b60026000541415620004cb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055604051632142170760e11b81523360048201819052306024830152604482018390529084906001600160a01b038216906342842e0e90606401600060405180830381600087803b1580156200052457600080fd5b505af115801562000539573d6000803e3d6000fd5b5050505060006200057c466040518060400160405280600381526020016237323160e81b81525062000576896001600160a01b0316601462001266565b62001427565b9050620005886200146b565b620005938662001487565b1562000762577fd35cb26c504646a732bf6b4577c577bb459a49470a2690a66b4698780b9d3ae460015482858888876001600160a01b031663c87b56dd8b6040518263ffffffff1660e01b8152600401620005f091815260200190565b60006040518083038186803b1580156200060957600080fd5b505afa1580156200061e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000648919081019062001d7c565b886001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200068257600080fd5b505afa15801562000697573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620006c1919081019062001d7c565b896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620006fb57600080fd5b505afa15801562000710573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200073a919081019062001d7c565b600254604051620007549998979695949392919062002136565b60405180910390a1620007aa565b7fd35cb26c504646a732bf6b4577c577bb459a49470a2690a66b4698780b9d3ae460015482858888600254604051620007a196959493929190620021ca565b60405180910390a15b5050600160005550505050565b60098181548110620007c857600080fd5b906000526020600020016000915090508054620007e5906200246e565b80601f016020809104026020016040519081016040528092919081815260200182805462000813906200246e565b8015620008645780601f10620008385761010080835404028352916020019162000864565b820191906000526020600020905b8154815290600101906020018083116200084657829003601f168201915b505050505081565b60076020526000908152604090208054819062000889906200246e565b80601f0160208091040260200160405190810160405280929190818152602001828054620008b7906200246e565b8015620009085780601f10620008dc5761010080835404028352916020019162000908565b820191906000526020600020905b815481529060010190602001808311620008ea57829003601f168201915b5050506001909301549192505060ff1682565b60026000541415620009705760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620004c2565b600260009081556040516375ed4cb160e11b81526001600160a01b0385166004820152309063ebda99629060240160006040518083038186803b158015620009b757600080fd5b505afa158015620009cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620009f6919081019062001d7c565b905080516000141562000a645760405162461bcd60e51b815260206004820152602f60248201527f6661696c656420746f206c6f6f6b75702064656e6f6d20666f7220746865207660448201526e1bdd58da195c8818dbdb9d1c9858dd608a1b6064820152608401620004c2565b60405163130d191f60e11b8152309063261a323e9062000a89908490600401620020fb565b60206040518083038186803b15801562000aa257600080fd5b505afa15801562000ab7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000add919062001d1f565b62000b2b5760405162461bcd60e51b815260206004820152601f60248201527f566f756368657220636f6e747261637420646f6573206e6f74206578697374006044820152606401620004c2565b3362000b39858285620014ca565b62000b4362001537565b7f5476f8e808c6153116c683f19f4855fc031062d56f1d970c7c64c53faef502b06001548383878760045460405162000b82969594939291906200224d565b60405180910390a150506001600055505050565b60008062000ba48362001253565b9050600060068260405162000bba919062001fa0565b908152604080516020928190038301812081830190925290546001600160a01b0381168252600160a01b900460ff1615801592820192909252915062000c0257519392505050565b5060009392505050565b60408051602080825281830190925260009182919060208201818036833701905050905060008060b56001600160a01b03168360405162000c4e919062001fa0565b6000604051808303816000865af19150503d806000811462000c8d576040519150601f19603f3d011682016040523d82523d6000602084013e62000c92565b606091505b50915091508162000ce65760405162461bcd60e51b815260206004820181905260248201527f6661696c656420746f20636865636b2074686520616363657373206c6576656c6044820152606401620004c2565b600062000cf3826200154c565b90508060011494508462000d445760405162461bcd60e51b8152602060048201526017602482015276696e73756666696369656e742070726976696c6567657360481b6044820152606401620004c2565b600062000d518b62001253565b604051632142170760e11b81523060048201526001600160a01b038b81166024830152604482018b9052919250908b16906342842e0e90606401600060405180830381600087803b15801562000da657600080fd5b505af115801562000dbb573d6000803e3d6000fd5b5050505062000dc962001630565b7f77d38d33ceecd57ccefbc13bc8b663d748a5ad5c9788b69de5248b3d065c3183600154828b8b8b60035460405162000e0896959493929190620022e7565b60405180910390a15050505050505050505050565b60408051602080825281830190925260009182919060208201818036833701905050905060008060b56001600160a01b03168360405162000e5f919062001fa0565b6000604051808303816000865af19150503d806000811462000e9e576040519150601f19603f3d011682016040523d82523d6000602084013e62000ea3565b606091505b50915091508162000ef75760405162461bcd60e51b815260206004820181905260248201527f6661696c656420746f20636865636b2074686520616363657373206c6576656c6044820152606401620004c2565b600062000f04826200154c565b90508060011494508462000f555760405162461bcd60e51b8152602060048201526017602482015276696e73756666696369656e742070726976696c6567657360481b6044820152606401620004c2565b600062000f628d62001253565b60405163130d191f60e11b8152909150309063261a323e9062000f8a908490600401620020fb565b60206040518083038186803b15801562000fa357600080fd5b505afa15801562000fb8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fde919062001d1f565b62000ffb5762000ffb8162000ff5838f8f62001645565b620016e4565b60405163a2cc698160e01b8152600090309063a2cc69819062001023908590600401620020fb565b60206040518083038186803b1580156200103c57600080fd5b505afa15801562001051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001077919062001cb9565b90506001600160a01b038116620010e25760405162461bcd60e51b815260206004820152602860248201527f74686520766f756368657220666f72207468652064656e6f6d20646f6573206e6044820152671bdd08195e1a5cdd60c21b6064820152608401620004c2565b620010f0818c8c8c6200190e565b620010fa6200197d565b7f5e83c571ac09b279927f8d86cc616f997ed32d92f25f067b7e3438e779608bf5600154838d848e8d6005546040516200113b979695949392919062002296565b60405180910390a15050505050505050505050505050565b6001600160a01b03811660009081526007602052604080822081518083019092528054606093929190829082906200118b906200246e565b80601f0160208091040260200160405190810160405280929190818152602001828054620011b9906200246e565b80156200120a5780601f10620011de576101008083540402835291602001916200120a565b820191906000526020600020905b815481529060010190602001808311620011ec57829003601f168201915b50505091835250506001919091015460ff1615156020918201528101519091501562001237575192915050565b5050604080516020810190915260008152919050565b50919050565b6060620012608262001992565b92915050565b6060600062001277836002620023e9565b620012849060026200238f565b67ffffffffffffffff8111156200129f576200129f6200251c565b6040519080825280601f01601f191660200182016040528015620012ca576020820181803683370190505b509050600360fc1b81600081518110620012e857620012e862002506565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200131a576200131a62002506565b60200101906001600160f81b031916908160001a905350600062001340846002620023e9565b6200134d9060016200238f565b90505b6001811115620013cf576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001385576200138562002506565b1a60f81b8282815181106200139e576200139e62002506565b60200101906001600160f81b031916908160001a90535060049490941c93620013c78162002454565b905062001350565b508315620014205760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620004c2565b9392505050565b606062001463620014388562001a18565b84846040516020016200144e9392919062001fec565b60405160208183030381529060405262001253565b949350505050565b6001600260008282546200148091906200238f565b9091555050565b6040805160048152602481019091526020810180516001600160e01b03166306fdde0360e01b178152815160009283929091839182919082885af1949350505050565b604051632770a7eb60e21b81526001600160a01b03838116600483015260248201839052849190821690639dc29fac90604401600060405180830381600087803b1580156200151857600080fd5b505af11580156200152d573d6000803e3d6000fd5b5050505050505050565b6001600460008282546200148091906200238f565b805160009081906020811115620015b45760405162461bcd60e51b815260206004820152602560248201527f627974657320746f2075696e7432353620636f6e76657273696f6e206f766572604482015264666c6f777360d81b6064820152608401620004c2565b60005b81811015620016275780620015ce8360206200240b565b620015da91906200238f565b620015e7906008620023e9565b858281518110620015fc57620015fc62002506565b01602001516001600160f81b031916901c9290921791806200161e81620024a5565b915050620015b7565b50909392505050565b6001600360008282546200148091906200238f565b60008030905060008460405160200162001660919062001fbe565b60405160208183030381529060405290506000846040516020016200168691906200204c565b6040516020818303038152906040529050600083888484604051620016ab9062001b81565b620016ba949392919062002077565b604051809103906000f080158015620016d7573d6000803e3d6000fd5b5098975050505050505050565b6000620016f18362001253565b60405163130d191f60e11b8152909150309063261a323e9062001719908490600401620020fb565b60206040518083038186803b1580156200173257600080fd5b505afa15801562001747573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200176d919062001d1f565b15620017c75760405162461bcd60e51b815260206004820152602260248201527f616e20766f756368657220636f6e747261637420616c72656164792065786973604482015261747360f01b6064820152608401620004c2565b6040805180820182526001600160a01b0384168152600160208201529051600690620017f590849062001fa0565b90815260408051918290036020908101832084518154958301511515600160a01b026001600160a81b03199096166001600160a01b0391821617959095179055828201825284835260018382015292851660009081526007845220815180519293919262001867928492019062001b8f565b506020918201516001918201805460ff1916911515919091179055600880548083019091557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b038616179055600980549182018155600052825162001908927f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af9092019184019062001b8f565b50505050565b6040516334ff261960e21b815284906001600160a01b0382169063d3fc9864906200194290879087908790600401620020d2565b600060405180830381600087803b1580156200195d57600080fd5b505af115801562001972573d6000803e3d6000fd5b505050505050505050565b6001600560008282546200148091906200238f565b60608160005b815181101562001a1157620019d0828281518110620019bb57620019bb62002506565b01602001516001600160f81b03191662001b2e565b828281518110620019e557620019e562002506565b60200101906001600160f81b031916908160001a9053508062001a0881620024a5565b91505062001998565b5092915050565b60608162001a3d5750506040805180820190915260018152600360fc1b602082015290565b8160005b811562001a6d578062001a5481620024a5565b915062001a659050600a83620023d2565b915062001a41565b60008167ffffffffffffffff81111562001a8b5762001a8b6200251c565b6040519080825280601f01601f19166020018201604052801562001ab6576020820181803683370190505b5090505b8415620014635762001ace6001836200240b565b915062001add600a86620024c3565b62001aea9060306200238f565b60f81b81838151811062001b025762001b0262002506565b60200101906001600160f81b031916908160001a90535062001b26600a86620023d2565b945062001aba565b6000604160f81b6001600160f81b031983161080159062001b5d5750602d60f91b6001600160f81b0319831611155b1562001b7d5762001b7460f883901c6020620023aa565b60f81b92915050565b5090565b611a8c806200254c83390190565b82805462001b9d906200246e565b90600052602060002090601f01602090048101928262001bc1576000855562001c0c565b82601f1062001bdc57805160ff191683800117855562001c0c565b8280016001018555821562001c0c579182015b8281111562001c0c57825182559160200191906001019062001bef565b5062001b7d9291505b8082111562001b7d576000815560010162001c15565b803562001c388162002532565b919050565b600082601f83011262001c4f57600080fd5b813562001c6662001c608262002364565b62002330565b81815284602083860101111562001c7c57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121562001cac57600080fd5b8135620014208162002532565b60006020828403121562001ccc57600080fd5b8151620014208162002532565b60008060006060848603121562001cef57600080fd5b833562001cfc8162002532565b9250602084013562001d0e8162002532565b929592945050506040919091013590565b60006020828403121562001d3257600080fd5b815180151581146200142057600080fd5b60006020828403121562001d5657600080fd5b813567ffffffffffffffff81111562001d6e57600080fd5b620014638482850162001c3d565b60006020828403121562001d8f57600080fd5b815167ffffffffffffffff81111562001da757600080fd5b8201601f8101841362001db957600080fd5b805162001dca62001c608262002364565b81815285602083850101111562001de057600080fd5b62001df382602083016020860162002425565b95945050505050565b600080600080600060a0868803121562001e1557600080fd5b853567ffffffffffffffff81111562001e2d57600080fd5b62001e3b8882890162001c3d565b955050602086013562001e4e8162002532565b9350604086013562001e608162002532565b94979396509394606081013594506080013592915050565b600080600080600080600060e0888a03121562001e9457600080fd5b873567ffffffffffffffff8082111562001ead57600080fd5b62001ebb8b838c0162001c3d565b985060208a013591508082111562001ed257600080fd5b62001ee08b838c0162001c3d565b975060408a013591508082111562001ef757600080fd5b62001f058b838c0162001c3d565b965062001f1560608b0162001c2b565b955060808a0135945060a08a013591508082111562001f3357600080fd5b5062001f428a828b0162001c3d565b92505060c0880135905092959891949750929550565b60006020828403121562001f6b57600080fd5b5035919050565b6000815180845262001f8c81602086016020860162002425565b601f01601f19169290920160200192915050565b6000825162001fb481846020870162002425565b9190910192915050565b6000825162001fd281846020870162002425565b67102b37bab1b432b960c11b920191825250600801919050565b600084516200200081846020890162002425565b8083019050602f60f81b808252855162002022816001850160208a0162002425565b600192019182015283516200203f81600284016020880162002425565b0160020195945050505050565b603b60f91b8152600082516200206a81600185016020870162002425565b9190910160010192915050565b6001600160a01b03851681526080602082018190526000906200209d9083018662001f72565b8281036040840152620020b1818662001f72565b90508281036060840152620020c7818562001f72565b979650505050505050565b60018060a01b038416815282602082015260606040820152600062001df3606083018462001f72565b60208152600062001420602083018462001f72565b60408152600062002125604083018562001f72565b905082151560208301529392505050565b60006101208b8352806020840152620021528184018c62001f72565b6001600160a01b038b811660408601528a1660608501526080840189905283810360a0850152905062002186818862001f72565b905082810360c08401526200219c818762001f72565b905082810360e0840152620021b2818662001f72565b915050826101008301529a9950505050505050505050565b6000610120888352806020840152620021e68184018962001f72565b905060018060a01b0380881660408501528087166060850152508460808401528281038060a0850152600082526020810160c0850152600060208301526040810160e085015250600060408201526060810191505082610100830152979650505050505050565b86815260c0602082015260006200226860c083018862001f72565b6001600160a01b039687166040840152949095166060820152608081019290925260a0909101529392505050565b87815260e060208201526000620022b160e083018962001f72565b6001600160a01b039788166040840152959096166060820152608081019390935260a083019190915260c0909101529392505050565b86815260c0602082015260006200230260c083018862001f72565b6001600160a01b03969096166040830152506060810193909352608083019190915260a09091015292915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156200235c576200235c6200251c565b604052919050565b600067ffffffffffffffff8211156200238157620023816200251c565b50601f01601f191660200190565b60008219821115620023a557620023a5620024da565b500190565b600060ff821660ff84168060ff03821115620023ca57620023ca620024da565b019392505050565b600082620023e457620023e4620024f0565b500490565b6000816000190483118215151615620024065762002406620024da565b500290565b600082821015620024205762002420620024da565b500390565b60005b838110156200244257818101518382015260200162002428565b83811115620019085750506000910152565b600081620024665762002466620024da565b506000190190565b600181811c908216806200248357607f821691505b602082108114156200124d57634e487b7160e01b600052602260045260246000fd5b6000600019821415620024bc57620024bc620024da565b5060010190565b600082620024d557620024d5620024f0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200254857600080fd5b5056fe60806040523480156200001157600080fd5b5060405162001a8c38038062001a8c83398101604081905262000034916200020c565b83828281600090805190602001906200004f929190620000af565b50805162000065906001906020840190620000af565b5050600680546001600160a01b0319166001600160a01b0393909316929092179091555082516200009e906007906020860190620000af565b505060006008555062000311915050565b828054620000bd90620002be565b90600052602060002090601f016020900481019282620000e157600085556200012c565b82601f10620000fc57805160ff19168380011785556200012c565b828001600101855582156200012c579182015b828111156200012c5782518255916020019190600101906200010f565b506200013a9291506200013e565b5090565b5b808211156200013a57600081556001016200013f565b600082601f8301126200016757600080fd5b81516001600160401b0380821115620001845762000184620002fb565b604051601f8301601f19908116603f01168101908282118183101715620001af57620001af620002fb565b81604052838152602092508683858801011115620001cc57600080fd5b600091505b83821015620001f05785820183015181830184015290820190620001d1565b83821115620002025760008385830101525b9695505050505050565b600080600080608085870312156200022357600080fd5b84516001600160a01b03811681146200023b57600080fd5b60208601519094506001600160401b03808211156200025957600080fd5b620002678883890162000155565b945060408701519150808211156200027e57600080fd5b6200028c8883890162000155565b93506060870151915080821115620002a357600080fd5b50620002b28782880162000155565b91505092959194509250565b600181811c90821680620002d357607f821691505b60208210811415620002f557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61176b80620003216000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063880cdc31116100ad578063b88d4fde11610071578063b88d4fde14610255578063c370b04214610268578063c87b56dd14610270578063d3fc986414610283578063e985e9c51461029657600080fd5b8063880cdc31146102015780638da5cb5b1461021457806395d89b41146102275780639dc29fac1461022f578063a22cb4651461024257600080fd5b806318160ddd116100f457806318160ddd146101a357806323b872dd146101b557806342842e0e146101c85780636352211e146101db57806370a08231146101ee57600080fd5b806301ffc9a71461012657806306fdde031461014e578063081812fc14610163578063095ea7b31461018e575b600080fd5b6101396101343660046114bf565b6102d2565b60405190151581526020015b60405180910390f35b610156610324565b604051610145919061159c565b6101766101713660046114f9565b6103b6565b6040516001600160a01b039091168152602001610145565b6101a161019c36600461142a565b610450565b005b6008545b604051908152602001610145565b6101a16101c3366004611336565b610566565b6101a16101d6366004611336565b610597565b6101766101e93660046114f9565b6105b2565b6101a76101fc3660046112e1565b610629565b6101a161020f3660046112e1565b6106b0565b600654610176906001600160a01b031681565b610156610743565b6101a161023d36600461142a565b610752565b6101a16102503660046113ee565b6108d6565b6101a1610263366004611372565b6108e5565b61015661091d565b61015661027e3660046114f9565b61092c565b6101a1610291366004611454565b6109ce565b6101396102a4366004611303565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061030357506001600160e01b03198216635b5e139f60e01b145b8061031e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610333906116b8565b80601f016020809104026020016040519081016040528092919081815260200182805461035f906116b8565b80156103ac5780601f10610381576101008083540402835291602001916103ac565b820191906000526020600020905b81548152906001019060200180831161038f57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104345760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061045b826105b2565b9050806001600160a01b0316836001600160a01b031614156104c95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161042b565b336001600160a01b03821614806104e557506104e581336102a4565b6105575760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161042b565b6105618383610a3f565b505050565b6105703382610aad565b61058c5760405162461bcd60e51b815260040161042b90611638565b610561838383610ba4565b610561838383604051806020016040528060008152506108e5565b6000818152600260205260408120546001600160a01b03168061031e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161042b565b60006001600160a01b0382166106945760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161042b565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146106da5760405162461bcd60e51b815260040161042b90611601565b600654604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600680546001600160a01b0319166001600160a01b0392909216919091179055565b606060018054610333906116b8565b6006546001600160a01b0316331461077c5760405162461bcd60e51b815260040161042b90611601565b6000600854116107c15760405162461bcd60e51b815260206004820152601060248201526f3737903a37b5b2b7103a3790313ab93760811b604482015260640161042b565b60006107cc826105b2565b9050826001600160a01b0316816001600160a01b0316146108255760405162461bcd60e51b815260206004820152601360248201527237b7363c9037bbb732b91031b0b710313ab93760691b604482015260640161042b565b6006546001600160a01b031661083b8184610aad565b6108985760405162461bcd60e51b815260206004820152602860248201527f566f7563686572206f776e657220646964206e6f7420617070726f766520746f60448201526735b2b710313ab93760c11b606482015260840161042b565b6108a183610d40565b60008381526009602052604081206108b891611179565b6001600860008282546108cb91906116a1565b909155505050505050565b6108e1338383610ddb565b5050565b6108ef3383610aad565b61090b5760405162461bcd60e51b815260040161042b90611638565b61091784848484610eaa565b50505050565b606060078054610333906116b8565b6000818152600960205260409020805460609190610949906116b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610975906116b8565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b50505050509050919050565b6006546001600160a01b031633146109f85760405162461bcd60e51b815260040161042b90611601565b610a028383610edd565b60008281526009602090815260409091208251610a21928401906111b6565b50600160086000828254610a359190611689565b9091555050505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a74826105b2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610b265760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161042b565b6000610b31836105b2565b9050806001600160a01b0316846001600160a01b03161480610b7857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610b9c5750836001600160a01b0316610b91846103b6565b6001600160a01b0316145b949350505050565b826001600160a01b0316610bb7826105b2565b6001600160a01b031614610c1b5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161042b565b6001600160a01b038216610c7d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161042b565b610c88600082610a3f565b6001600160a01b0383166000908152600360205260408120805460019290610cb19084906116a1565b90915550506001600160a01b0382166000908152600360205260408120805460019290610cdf908490611689565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610d4b826105b2565b9050610d58600083610a3f565b6001600160a01b0381166000908152600360205260408120805460019290610d819084906116a1565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b03161415610e3d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161042b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610eb5848484610ba4565b610ec184848484610ef7565b6109175760405162461bcd60e51b815260040161042b906115af565b6108e1828260405180602001604052806000815250611004565b60006001600160a01b0384163b15610ff957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610f3b90339089908890889060040161155f565b602060405180830381600087803b158015610f5557600080fd5b505af1925050508015610f85575060408051601f3d908101601f19168201909252610f82918101906114dc565b60015b610fdf573d808015610fb3576040519150601f19603f3d011682016040523d82523d6000602084013e610fb8565b606091505b508051610fd75760405162461bcd60e51b815260040161042b906115af565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b9c565b506001949350505050565b61100e8383611037565b61101b6000848484610ef7565b6105615760405162461bcd60e51b815260040161042b906115af565b6001600160a01b03821661108d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161042b565b6000818152600260205260409020546001600160a01b0316156110f25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161042b565b6001600160a01b038216600090815260036020526040812080546001929061111b908490611689565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b508054611185906116b8565b6000825580601f10611195575050565b601f0160209004906000526020600020908101906111b3919061123a565b50565b8280546111c2906116b8565b90600052602060002090601f0160209004810192826111e4576000855561122a565b82601f106111fd57805160ff191683800117855561122a565b8280016001018555821561122a579182015b8281111561122a57825182559160200191906001019061120f565b5061123692915061123a565b5090565b5b80821115611236576000815560010161123b565b600067ffffffffffffffff8084111561126a5761126a611709565b604051601f8501601f19908116603f0116810190828211818310171561129257611292611709565b816040528093508581528686860111156112ab57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146112dc57600080fd5b919050565b6000602082840312156112f357600080fd5b6112fc826112c5565b9392505050565b6000806040838503121561131657600080fd5b61131f836112c5565b915061132d602084016112c5565b90509250929050565b60008060006060848603121561134b57600080fd5b611354846112c5565b9250611362602085016112c5565b9150604084013590509250925092565b6000806000806080858703121561138857600080fd5b611391856112c5565b935061139f602086016112c5565b925060408501359150606085013567ffffffffffffffff8111156113c257600080fd5b8501601f810187136113d357600080fd5b6113e28782356020840161124f565b91505092959194509250565b6000806040838503121561140157600080fd5b61140a836112c5565b91506020830135801515811461141f57600080fd5b809150509250929050565b6000806040838503121561143d57600080fd5b611446836112c5565b946020939093013593505050565b60008060006060848603121561146957600080fd5b611472846112c5565b925060208401359150604084013567ffffffffffffffff81111561149557600080fd5b8401601f810186136114a657600080fd5b6114b58682356020840161124f565b9150509250925092565b6000602082840312156114d157600080fd5b81356112fc8161171f565b6000602082840312156114ee57600080fd5b81516112fc8161171f565b60006020828403121561150b57600080fd5b5035919050565b6000815180845260005b818110156115385760208185018101518683018201520161151c565b8181111561154a576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061159290830184611512565b9695505050505050565b6020815260006112fc6020830184611512565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561169c5761169c6116f3565b500190565b6000828210156116b3576116b36116f3565b500390565b600181811c908216806116cc57607f821691505b602082108114156116ed57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146111b357600080fdfea2646970667358221220cbd642aac3a3d45b32933e7844860230f8dd13962455301d8d0f8ed7b9d3ef3664736f6c63430008070033a26469706673582212202f83e355fecda504b653d5b096903be504259ca1c0bd86739ef793c37c19efe464736f6c63430008070033",
}

// SubchainTNT721TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use SubchainTNT721TokenBankMetaData.ABI instead.
var SubchainTNT721TokenBankABI = SubchainTNT721TokenBankMetaData.ABI

// SubchainTNT721TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SubchainTNT721TokenBankMetaData.Bin instead.
var SubchainTNT721TokenBankBin = SubchainTNT721TokenBankMetaData.Bin

// DeploySubchainTNT721TokenBank deploys a new Ethereum contract, binding an instance of SubchainTNT721TokenBank to it.
func DeploySubchainTNT721TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, mainchainid_ *big.Int) (common.Address, *types.Transaction, *SubchainTNT721TokenBank, error) {
	parsed, err := SubchainTNT721TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SubchainTNT721TokenBankBin), backend, mainchainid_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SubchainTNT721TokenBank{SubchainTNT721TokenBankCaller: SubchainTNT721TokenBankCaller{contract: contract}, SubchainTNT721TokenBankTransactor: SubchainTNT721TokenBankTransactor{contract: contract}, SubchainTNT721TokenBankFilterer: SubchainTNT721TokenBankFilterer{contract: contract}}, nil
}

// SubchainTNT721TokenBank is an auto generated Go binding around an Ethereum contract.
type SubchainTNT721TokenBank struct {
	SubchainTNT721TokenBankCaller     // Read-only binding to the contract
	SubchainTNT721TokenBankTransactor // Write-only binding to the contract
	SubchainTNT721TokenBankFilterer   // Log filterer for contract events
}

// SubchainTNT721TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type SubchainTNT721TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainTNT721TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SubchainTNT721TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainTNT721TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SubchainTNT721TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainTNT721TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SubchainTNT721TokenBankSession struct {
	Contract     *SubchainTNT721TokenBank // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// SubchainTNT721TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SubchainTNT721TokenBankCallerSession struct {
	Contract *SubchainTNT721TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// SubchainTNT721TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SubchainTNT721TokenBankTransactorSession struct {
	Contract     *SubchainTNT721TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// SubchainTNT721TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type SubchainTNT721TokenBankRaw struct {
	Contract *SubchainTNT721TokenBank // Generic contract binding to access the raw methods on
}

// SubchainTNT721TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SubchainTNT721TokenBankCallerRaw struct {
	Contract *SubchainTNT721TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// SubchainTNT721TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SubchainTNT721TokenBankTransactorRaw struct {
	Contract *SubchainTNT721TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSubchainTNT721TokenBank creates a new instance of SubchainTNT721TokenBank, bound to a specific deployed contract.
func NewSubchainTNT721TokenBank(address common.Address, backend bind.ContractBackend) (*SubchainTNT721TokenBank, error) {
	contract, err := bindSubchainTNT721TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SubchainTNT721TokenBank{SubchainTNT721TokenBankCaller: SubchainTNT721TokenBankCaller{contract: contract}, SubchainTNT721TokenBankTransactor: SubchainTNT721TokenBankTransactor{contract: contract}, SubchainTNT721TokenBankFilterer: SubchainTNT721TokenBankFilterer{contract: contract}}, nil
}

// NewSubchainTNT721TokenBankCaller creates a new read-only instance of SubchainTNT721TokenBank, bound to a specific deployed contract.
func NewSubchainTNT721TokenBankCaller(address common.Address, caller bind.ContractCaller) (*SubchainTNT721TokenBankCaller, error) {
	contract, err := bindSubchainTNT721TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SubchainTNT721TokenBankCaller{contract: contract}, nil
}

// NewSubchainTNT721TokenBankTransactor creates a new write-only instance of SubchainTNT721TokenBank, bound to a specific deployed contract.
func NewSubchainTNT721TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*SubchainTNT721TokenBankTransactor, error) {
	contract, err := bindSubchainTNT721TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SubchainTNT721TokenBankTransactor{contract: contract}, nil
}

// NewSubchainTNT721TokenBankFilterer creates a new log filterer instance of SubchainTNT721TokenBank, bound to a specific deployed contract.
func NewSubchainTNT721TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*SubchainTNT721TokenBankFilterer, error) {
	contract, err := bindSubchainTNT721TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SubchainTNT721TokenBankFilterer{contract: contract}, nil
}

// bindSubchainTNT721TokenBank binds a generic wrapper to an already deployed contract.
func bindSubchainTNT721TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SubchainTNT721TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SubchainTNT721TokenBank.Contract.SubchainTNT721TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.SubchainTNT721TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.SubchainTNT721TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SubchainTNT721TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.contract.Transact(opts, method, params...)
}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Alldenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "alldenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Alldenoms(arg0 *big.Int) (string, error) {
	return _SubchainTNT721TokenBank.Contract.Alldenoms(&_SubchainTNT721TokenBank.CallOpts, arg0)
}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Alldenoms(arg0 *big.Int) (string, error) {
	return _SubchainTNT721TokenBank.Contract.Alldenoms(&_SubchainTNT721TokenBank.CallOpts, arg0)
}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Allvouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "allvouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Allvouchers(arg0 *big.Int) (common.Address, error) {
	return _SubchainTNT721TokenBank.Contract.Allvouchers(&_SubchainTNT721TokenBank.CallOpts, arg0)
}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Allvouchers(arg0 *big.Int) (common.Address, error) {
	return _SubchainTNT721TokenBank.Contract.Allvouchers(&_SubchainTNT721TokenBank.CallOpts, arg0)
}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Denomtovoucherlookup(opts *bind.CallOpts, arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "denomtovoucherlookup", arg0)

	outstruct := new(struct {
		Contractaddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Contractaddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Denomtovoucherlookup(arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	return _SubchainTNT721TokenBank.Contract.Denomtovoucherlookup(&_SubchainTNT721TokenBank.CallOpts, arg0)
}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Denomtovoucherlookup(arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	return _SubchainTNT721TokenBank.Contract.Denomtovoucherlookup(&_SubchainTNT721TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Exists(denom string) (bool, error) {
	return _SubchainTNT721TokenBank.Contract.Exists(&_SubchainTNT721TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _SubchainTNT721TokenBank.Contract.Exists(&_SubchainTNT721TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Exists0(opts *bind.CallOpts, voucheraddress common.Address) (bool, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "exists0", voucheraddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Exists0(voucheraddress common.Address) (bool, error) {
	return _SubchainTNT721TokenBank.Contract.Exists0(&_SubchainTNT721TokenBank.CallOpts, voucheraddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Exists0(voucheraddress common.Address) (bool, error) {
	return _SubchainTNT721TokenBank.Contract.Exists0(&_SubchainTNT721TokenBank.CallOpts, voucheraddress)
}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Getdenom(opts *bind.CallOpts, vouchercontractaddr common.Address) (string, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "getdenom", vouchercontractaddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Getdenom(vouchercontractaddr common.Address) (string, error) {
	return _SubchainTNT721TokenBank.Contract.Getdenom(&_SubchainTNT721TokenBank.CallOpts, vouchercontractaddr)
}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Getdenom(vouchercontractaddr common.Address) (string, error) {
	return _SubchainTNT721TokenBank.Contract.Getdenom(&_SubchainTNT721TokenBank.CallOpts, vouchercontractaddr)
}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Getvoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "getvoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Getvoucher(denom string) (common.Address, error) {
	return _SubchainTNT721TokenBank.Contract.Getvoucher(&_SubchainTNT721TokenBank.CallOpts, denom)
}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Getvoucher(denom string) (common.Address, error) {
	return _SubchainTNT721TokenBank.Contract.Getvoucher(&_SubchainTNT721TokenBank.CallOpts, denom)
}

// Mainchainid is a free data retrieval call binding the contract method 0xba3599b3.
//
// Solidity: function mainchainid() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Mainchainid(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "mainchainid")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Mainchainid is a free data retrieval call binding the contract method 0xba3599b3.
//
// Solidity: function mainchainid() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Mainchainid() (*big.Int, error) {
	return _SubchainTNT721TokenBank.Contract.Mainchainid(&_SubchainTNT721TokenBank.CallOpts)
}

// Mainchainid is a free data retrieval call binding the contract method 0xba3599b3.
//
// Solidity: function mainchainid() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Mainchainid() (*big.Int, error) {
	return _SubchainTNT721TokenBank.Contract.Mainchainid(&_SubchainTNT721TokenBank.CallOpts)
}

// Tokenlocknonce is a free data retrieval call binding the contract method 0x03ffa7b2.
//
// Solidity: function tokenlocknonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Tokenlocknonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "tokenlocknonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Tokenlocknonce is a free data retrieval call binding the contract method 0x03ffa7b2.
//
// Solidity: function tokenlocknonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Tokenlocknonce() (*big.Int, error) {
	return _SubchainTNT721TokenBank.Contract.Tokenlocknonce(&_SubchainTNT721TokenBank.CallOpts)
}

// Tokenlocknonce is a free data retrieval call binding the contract method 0x03ffa7b2.
//
// Solidity: function tokenlocknonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Tokenlocknonce() (*big.Int, error) {
	return _SubchainTNT721TokenBank.Contract.Tokenlocknonce(&_SubchainTNT721TokenBank.CallOpts)
}

// Tokenunlocknonce is a free data retrieval call binding the contract method 0xf89b5efd.
//
// Solidity: function tokenunlocknonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Tokenunlocknonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "tokenunlocknonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Tokenunlocknonce is a free data retrieval call binding the contract method 0xf89b5efd.
//
// Solidity: function tokenunlocknonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Tokenunlocknonce() (*big.Int, error) {
	return _SubchainTNT721TokenBank.Contract.Tokenunlocknonce(&_SubchainTNT721TokenBank.CallOpts)
}

// Tokenunlocknonce is a free data retrieval call binding the contract method 0xf89b5efd.
//
// Solidity: function tokenunlocknonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Tokenunlocknonce() (*big.Int, error) {
	return _SubchainTNT721TokenBank.Contract.Tokenunlocknonce(&_SubchainTNT721TokenBank.CallOpts)
}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Voucheraddresstodenomlookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "voucheraddresstodenomlookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Voucheraddresstodenomlookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _SubchainTNT721TokenBank.Contract.Voucheraddresstodenomlookup(&_SubchainTNT721TokenBank.CallOpts, arg0)
}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Voucheraddresstodenomlookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _SubchainTNT721TokenBank.Contract.Voucheraddresstodenomlookup(&_SubchainTNT721TokenBank.CallOpts, arg0)
}

// Voucherburnnonce is a free data retrieval call binding the contract method 0x11bc48fb.
//
// Solidity: function voucherburnnonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Voucherburnnonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "voucherburnnonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Voucherburnnonce is a free data retrieval call binding the contract method 0x11bc48fb.
//
// Solidity: function voucherburnnonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Voucherburnnonce() (*big.Int, error) {
	return _SubchainTNT721TokenBank.Contract.Voucherburnnonce(&_SubchainTNT721TokenBank.CallOpts)
}

// Voucherburnnonce is a free data retrieval call binding the contract method 0x11bc48fb.
//
// Solidity: function voucherburnnonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Voucherburnnonce() (*big.Int, error) {
	return _SubchainTNT721TokenBank.Contract.Voucherburnnonce(&_SubchainTNT721TokenBank.CallOpts)
}

// Vouchermintnonce is a free data retrieval call binding the contract method 0xb516d30f.
//
// Solidity: function vouchermintnonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCaller) Vouchermintnonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainTNT721TokenBank.contract.Call(opts, &out, "vouchermintnonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Vouchermintnonce is a free data retrieval call binding the contract method 0xb516d30f.
//
// Solidity: function vouchermintnonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Vouchermintnonce() (*big.Int, error) {
	return _SubchainTNT721TokenBank.Contract.Vouchermintnonce(&_SubchainTNT721TokenBank.CallOpts)
}

// Vouchermintnonce is a free data retrieval call binding the contract method 0xb516d30f.
//
// Solidity: function vouchermintnonce() view returns(uint256)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankCallerSession) Vouchermintnonce() (*big.Int, error) {
	return _SubchainTNT721TokenBank.Contract.Vouchermintnonce(&_SubchainTNT721TokenBank.CallOpts)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address vouchercontractaddr, address mainchaintokenreceiver, uint256 tokenid) payable returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankTransactor) Burnvouchers(opts *bind.TransactOpts, vouchercontractaddr common.Address, mainchaintokenreceiver common.Address, tokenid *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.contract.Transact(opts, "burnvouchers", vouchercontractaddr, mainchaintokenreceiver, tokenid)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address vouchercontractaddr, address mainchaintokenreceiver, uint256 tokenid) payable returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Burnvouchers(vouchercontractaddr common.Address, mainchaintokenreceiver common.Address, tokenid *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.Burnvouchers(&_SubchainTNT721TokenBank.TransactOpts, vouchercontractaddr, mainchaintokenreceiver, tokenid)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address vouchercontractaddr, address mainchaintokenreceiver, uint256 tokenid) payable returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankTransactorSession) Burnvouchers(vouchercontractaddr common.Address, mainchaintokenreceiver common.Address, tokenid *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.Burnvouchers(&_SubchainTNT721TokenBank.TransactOpts, vouchercontractaddr, mainchaintokenreceiver, tokenid)
}

// Locktokens is a paid mutator transaction binding the contract method 0x4c138fe5.
//
// Solidity: function locktokens(address tnt721contract, address mainchaintokenreceiver, uint256 tokenid) returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankTransactor) Locktokens(opts *bind.TransactOpts, tnt721contract common.Address, mainchaintokenreceiver common.Address, tokenid *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.contract.Transact(opts, "locktokens", tnt721contract, mainchaintokenreceiver, tokenid)
}

// Locktokens is a paid mutator transaction binding the contract method 0x4c138fe5.
//
// Solidity: function locktokens(address tnt721contract, address mainchaintokenreceiver, uint256 tokenid) returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Locktokens(tnt721contract common.Address, mainchaintokenreceiver common.Address, tokenid *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.Locktokens(&_SubchainTNT721TokenBank.TransactOpts, tnt721contract, mainchaintokenreceiver, tokenid)
}

// Locktokens is a paid mutator transaction binding the contract method 0x4c138fe5.
//
// Solidity: function locktokens(address tnt721contract, address mainchaintokenreceiver, uint256 tokenid) returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankTransactorSession) Locktokens(tnt721contract common.Address, mainchaintokenreceiver common.Address, tokenid *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.Locktokens(&_SubchainTNT721TokenBank.TransactOpts, tnt721contract, mainchaintokenreceiver, tokenid)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0xb715d67c.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, address subchainvoucherreceiver, uint256 tokenid, string tokenuri, uint256 mainchaintokenlocknonce) returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankTransactor) Mintvouchers(opts *bind.TransactOpts, denom string, name string, symbol string, subchainvoucherreceiver common.Address, tokenid *big.Int, tokenuri string, mainchaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.contract.Transact(opts, "mintvouchers", denom, name, symbol, subchainvoucherreceiver, tokenid, tokenuri, mainchaintokenlocknonce)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0xb715d67c.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, address subchainvoucherreceiver, uint256 tokenid, string tokenuri, uint256 mainchaintokenlocknonce) returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Mintvouchers(denom string, name string, symbol string, subchainvoucherreceiver common.Address, tokenid *big.Int, tokenuri string, mainchaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.Mintvouchers(&_SubchainTNT721TokenBank.TransactOpts, denom, name, symbol, subchainvoucherreceiver, tokenid, tokenuri, mainchaintokenlocknonce)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0xb715d67c.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, address subchainvoucherreceiver, uint256 tokenid, string tokenuri, uint256 mainchaintokenlocknonce) returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankTransactorSession) Mintvouchers(denom string, name string, symbol string, subchainvoucherreceiver common.Address, tokenid *big.Int, tokenuri string, mainchaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.Mintvouchers(&_SubchainTNT721TokenBank.TransactOpts, denom, name, symbol, subchainvoucherreceiver, tokenid, tokenuri, mainchaintokenlocknonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0x79b9bce4.
//
// Solidity: function unlocktokens(string denom, address tnt721contract, address subchaintokenreceiver, uint256 tokenid, uint256 mainchainvoucherburnnonce) returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankTransactor) Unlocktokens(opts *bind.TransactOpts, denom string, tnt721contract common.Address, subchaintokenreceiver common.Address, tokenid *big.Int, mainchainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.contract.Transact(opts, "unlocktokens", denom, tnt721contract, subchaintokenreceiver, tokenid, mainchainvoucherburnnonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0x79b9bce4.
//
// Solidity: function unlocktokens(string denom, address tnt721contract, address subchaintokenreceiver, uint256 tokenid, uint256 mainchainvoucherburnnonce) returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankSession) Unlocktokens(denom string, tnt721contract common.Address, subchaintokenreceiver common.Address, tokenid *big.Int, mainchainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.Unlocktokens(&_SubchainTNT721TokenBank.TransactOpts, denom, tnt721contract, subchaintokenreceiver, tokenid, mainchainvoucherburnnonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0x79b9bce4.
//
// Solidity: function unlocktokens(string denom, address tnt721contract, address subchaintokenreceiver, uint256 tokenid, uint256 mainchainvoucherburnnonce) returns()
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankTransactorSession) Unlocktokens(denom string, tnt721contract common.Address, subchaintokenreceiver common.Address, tokenid *big.Int, mainchainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _SubchainTNT721TokenBank.Contract.Unlocktokens(&_SubchainTNT721TokenBank.TransactOpts, denom, tnt721contract, subchaintokenreceiver, tokenid, mainchainvoucherburnnonce)
}

// SubchainTNT721TokenBankTnt721tokenlockedIterator is returned from FilterTnt721tokenlocked and is used to iterate over the raw logs and unpacked data for Tnt721tokenlocked events raised by the SubchainTNT721TokenBank contract.
type SubchainTNT721TokenBankTnt721tokenlockedIterator struct {
	Event *SubchainTNT721TokenBankTnt721tokenlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainTNT721TokenBankTnt721tokenlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainTNT721TokenBankTnt721tokenlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainTNT721TokenBankTnt721tokenlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainTNT721TokenBankTnt721tokenlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainTNT721TokenBankTnt721tokenlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainTNT721TokenBankTnt721tokenlocked represents a Tnt721tokenlocked event raised by the SubchainTNT721TokenBank contract.
type SubchainTNT721TokenBankTnt721tokenlocked struct {
	Mainchainid            *big.Int
	Denom                  string
	Subchaintokensender    common.Address
	Mainchaintokenreceiver common.Address
	Tokenid                *big.Int
	Tokenuri               string
	Name                   string
	Symbol                 string
	Tokenlocknonce         *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterTnt721tokenlocked is a free log retrieval operation binding the contract event 0xe0bc182a50ed7f8c0d3ffb0e8e29104a5c85d2718547cccd07e265f63cac461f.
//
// Solidity: event tnt721tokenlocked(uint256 mainchainid, string denom, address subchaintokensender, address mainchaintokenreceiver, uint256 tokenid, string tokenuri, string name, string symbol, uint256 tokenlocknonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) FilterTnt721tokenlocked(opts *bind.FilterOpts) (*SubchainTNT721TokenBankTnt721tokenlockedIterator, error) {

	logs, sub, err := _SubchainTNT721TokenBank.contract.FilterLogs(opts, "tnt721tokenlocked")
	if err != nil {
		return nil, err
	}
	return &SubchainTNT721TokenBankTnt721tokenlockedIterator{contract: _SubchainTNT721TokenBank.contract, event: "tnt721tokenlocked", logs: logs, sub: sub}, nil
}

// WatchTnt721tokenlocked is a free log subscription operation binding the contract event 0xe0bc182a50ed7f8c0d3ffb0e8e29104a5c85d2718547cccd07e265f63cac461f.
//
// Solidity: event tnt721tokenlocked(uint256 mainchainid, string denom, address subchaintokensender, address mainchaintokenreceiver, uint256 tokenid, string tokenuri, string name, string symbol, uint256 tokenlocknonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) WatchTnt721tokenlocked(opts *bind.WatchOpts, sink chan<- *SubchainTNT721TokenBankTnt721tokenlocked) (event.Subscription, error) {

	logs, sub, err := _SubchainTNT721TokenBank.contract.WatchLogs(opts, "tnt721tokenlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainTNT721TokenBankTnt721tokenlocked)
				if err := _SubchainTNT721TokenBank.contract.UnpackLog(event, "tnt721tokenlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt721tokenlocked is a log parse operation binding the contract event 0xe0bc182a50ed7f8c0d3ffb0e8e29104a5c85d2718547cccd07e265f63cac461f.
//
// Solidity: event tnt721tokenlocked(uint256 mainchainid, string denom, address subchaintokensender, address mainchaintokenreceiver, uint256 tokenid, string tokenuri, string name, string symbol, uint256 tokenlocknonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) ParseTnt721tokenlocked(log types.Log) (*SubchainTNT721TokenBankTnt721tokenlocked, error) {
	event := new(SubchainTNT721TokenBankTnt721tokenlocked)
	if err := _SubchainTNT721TokenBank.contract.UnpackLog(event, "tnt721tokenlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SubchainTNT721TokenBankTnt721tokenunlockedIterator is returned from FilterTnt721tokenunlocked and is used to iterate over the raw logs and unpacked data for Tnt721tokenunlocked events raised by the SubchainTNT721TokenBank contract.
type SubchainTNT721TokenBankTnt721tokenunlockedIterator struct {
	Event *SubchainTNT721TokenBankTnt721tokenunlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainTNT721TokenBankTnt721tokenunlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainTNT721TokenBankTnt721tokenunlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainTNT721TokenBankTnt721tokenunlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainTNT721TokenBankTnt721tokenunlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainTNT721TokenBankTnt721tokenunlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainTNT721TokenBankTnt721tokenunlocked represents a Tnt721tokenunlocked event raised by the SubchainTNT721TokenBank contract.
type SubchainTNT721TokenBankTnt721tokenunlocked struct {
	Mainchainid               *big.Int
	Denom                     string
	Subchaintokenreceiver     common.Address
	Tokenid                   *big.Int
	Mainchainvoucherburnnonce *big.Int
	Tokenunlocknonce          *big.Int
	Raw                       types.Log // Blockchain specific contextual infos
}

// FilterTnt721tokenunlocked is a free log retrieval operation binding the contract event 0xa942e0e2b6e43dfe7a0f7defd61f59e89ee57cf97b66434753cc72fd05c6dc8b.
//
// Solidity: event tnt721tokenunlocked(uint256 mainchainid, string denom, address subchaintokenreceiver, uint256 tokenid, uint256 mainchainvoucherburnnonce, uint256 tokenunlocknonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) FilterTnt721tokenunlocked(opts *bind.FilterOpts) (*SubchainTNT721TokenBankTnt721tokenunlockedIterator, error) {

	logs, sub, err := _SubchainTNT721TokenBank.contract.FilterLogs(opts, "tnt721tokenunlocked")
	if err != nil {
		return nil, err
	}
	return &SubchainTNT721TokenBankTnt721tokenunlockedIterator{contract: _SubchainTNT721TokenBank.contract, event: "tnt721tokenunlocked", logs: logs, sub: sub}, nil
}

// WatchTnt721tokenunlocked is a free log subscription operation binding the contract event 0xa942e0e2b6e43dfe7a0f7defd61f59e89ee57cf97b66434753cc72fd05c6dc8b.
//
// Solidity: event tnt721tokenunlocked(uint256 mainchainid, string denom, address subchaintokenreceiver, uint256 tokenid, uint256 mainchainvoucherburnnonce, uint256 tokenunlocknonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) WatchTnt721tokenunlocked(opts *bind.WatchOpts, sink chan<- *SubchainTNT721TokenBankTnt721tokenunlocked) (event.Subscription, error) {

	logs, sub, err := _SubchainTNT721TokenBank.contract.WatchLogs(opts, "tnt721tokenunlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainTNT721TokenBankTnt721tokenunlocked)
				if err := _SubchainTNT721TokenBank.contract.UnpackLog(event, "tnt721tokenunlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt721tokenunlocked is a log parse operation binding the contract event 0xa942e0e2b6e43dfe7a0f7defd61f59e89ee57cf97b66434753cc72fd05c6dc8b.
//
// Solidity: event tnt721tokenunlocked(uint256 mainchainid, string denom, address subchaintokenreceiver, uint256 tokenid, uint256 mainchainvoucherburnnonce, uint256 tokenunlocknonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) ParseTnt721tokenunlocked(log types.Log) (*SubchainTNT721TokenBankTnt721tokenunlocked, error) {
	event := new(SubchainTNT721TokenBankTnt721tokenunlocked)
	if err := _SubchainTNT721TokenBank.contract.UnpackLog(event, "tnt721tokenunlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SubchainTNT721TokenBankTnt721voucherburnedIterator is returned from FilterTnt721voucherburned and is used to iterate over the raw logs and unpacked data for Tnt721voucherburned events raised by the SubchainTNT721TokenBank contract.
type SubchainTNT721TokenBankTnt721voucherburnedIterator struct {
	Event *SubchainTNT721TokenBankTnt721voucherburned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainTNT721TokenBankTnt721voucherburnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainTNT721TokenBankTnt721voucherburned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainTNT721TokenBankTnt721voucherburned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainTNT721TokenBankTnt721voucherburnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainTNT721TokenBankTnt721voucherburnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainTNT721TokenBankTnt721voucherburned represents a Tnt721voucherburned event raised by the SubchainTNT721TokenBank contract.
type SubchainTNT721TokenBankTnt721voucherburned struct {
	Mainchainid            *big.Int
	Denom                  string
	Subchainvoucherowner   common.Address
	Mainchaintokenreceiver common.Address
	Tokenid                *big.Int
	Voucherburnnonce       *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterTnt721voucherburned is a free log retrieval operation binding the contract event 0xc748c990bf5e1233e7b9b363816ee85264cfddb19cf4f800e27ff8b0123301db.
//
// Solidity: event tnt721voucherburned(uint256 mainchainid, string denom, address subchainvoucherowner, address mainchaintokenreceiver, uint256 tokenid, uint256 voucherburnnonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) FilterTnt721voucherburned(opts *bind.FilterOpts) (*SubchainTNT721TokenBankTnt721voucherburnedIterator, error) {

	logs, sub, err := _SubchainTNT721TokenBank.contract.FilterLogs(opts, "tnt721voucherburned")
	if err != nil {
		return nil, err
	}
	return &SubchainTNT721TokenBankTnt721voucherburnedIterator{contract: _SubchainTNT721TokenBank.contract, event: "tnt721voucherburned", logs: logs, sub: sub}, nil
}

// WatchTnt721voucherburned is a free log subscription operation binding the contract event 0xc748c990bf5e1233e7b9b363816ee85264cfddb19cf4f800e27ff8b0123301db.
//
// Solidity: event tnt721voucherburned(uint256 mainchainid, string denom, address subchainvoucherowner, address mainchaintokenreceiver, uint256 tokenid, uint256 voucherburnnonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) WatchTnt721voucherburned(opts *bind.WatchOpts, sink chan<- *SubchainTNT721TokenBankTnt721voucherburned) (event.Subscription, error) {

	logs, sub, err := _SubchainTNT721TokenBank.contract.WatchLogs(opts, "tnt721voucherburned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainTNT721TokenBankTnt721voucherburned)
				if err := _SubchainTNT721TokenBank.contract.UnpackLog(event, "tnt721voucherburned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt721voucherburned is a log parse operation binding the contract event 0xc748c990bf5e1233e7b9b363816ee85264cfddb19cf4f800e27ff8b0123301db.
//
// Solidity: event tnt721voucherburned(uint256 mainchainid, string denom, address subchainvoucherowner, address mainchaintokenreceiver, uint256 tokenid, uint256 voucherburnnonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) ParseTnt721voucherburned(log types.Log) (*SubchainTNT721TokenBankTnt721voucherburned, error) {
	event := new(SubchainTNT721TokenBankTnt721voucherburned)
	if err := _SubchainTNT721TokenBank.contract.UnpackLog(event, "tnt721voucherburned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SubchainTNT721TokenBankTnt721vouchermintedIterator is returned from FilterTnt721voucherminted and is used to iterate over the raw logs and unpacked data for Tnt721voucherminted events raised by the SubchainTNT721TokenBank contract.
type SubchainTNT721TokenBankTnt721vouchermintedIterator struct {
	Event *SubchainTNT721TokenBankTnt721voucherminted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainTNT721TokenBankTnt721vouchermintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainTNT721TokenBankTnt721voucherminted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainTNT721TokenBankTnt721voucherminted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainTNT721TokenBankTnt721vouchermintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainTNT721TokenBankTnt721vouchermintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainTNT721TokenBankTnt721voucherminted represents a Tnt721voucherminted event raised by the SubchainTNT721TokenBank contract.
type SubchainTNT721TokenBankTnt721voucherminted struct {
	Mainchainid             *big.Int
	Denom                   string
	Subchainvoucherreceiver common.Address
	Vouchercontact          common.Address
	Tokenid                 *big.Int
	Mainchaintokenlocknonce *big.Int
	Vouchermintnonce        *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterTnt721voucherminted is a free log retrieval operation binding the contract event 0x396c21747ff836a56de91a9fa786169b25c832f9dff004370ca02061df15d76a.
//
// Solidity: event tnt721voucherminted(uint256 mainchainid, string denom, address subchainvoucherreceiver, address vouchercontact, uint256 tokenid, uint256 mainchaintokenlocknonce, uint256 vouchermintnonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) FilterTnt721voucherminted(opts *bind.FilterOpts) (*SubchainTNT721TokenBankTnt721vouchermintedIterator, error) {

	logs, sub, err := _SubchainTNT721TokenBank.contract.FilterLogs(opts, "tnt721voucherminted")
	if err != nil {
		return nil, err
	}
	return &SubchainTNT721TokenBankTnt721vouchermintedIterator{contract: _SubchainTNT721TokenBank.contract, event: "tnt721voucherminted", logs: logs, sub: sub}, nil
}

// WatchTnt721voucherminted is a free log subscription operation binding the contract event 0x396c21747ff836a56de91a9fa786169b25c832f9dff004370ca02061df15d76a.
//
// Solidity: event tnt721voucherminted(uint256 mainchainid, string denom, address subchainvoucherreceiver, address vouchercontact, uint256 tokenid, uint256 mainchaintokenlocknonce, uint256 vouchermintnonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) WatchTnt721voucherminted(opts *bind.WatchOpts, sink chan<- *SubchainTNT721TokenBankTnt721voucherminted) (event.Subscription, error) {

	logs, sub, err := _SubchainTNT721TokenBank.contract.WatchLogs(opts, "tnt721voucherminted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainTNT721TokenBankTnt721voucherminted)
				if err := _SubchainTNT721TokenBank.contract.UnpackLog(event, "tnt721voucherminted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt721voucherminted is a log parse operation binding the contract event 0x396c21747ff836a56de91a9fa786169b25c832f9dff004370ca02061df15d76a.
//
// Solidity: event tnt721voucherminted(uint256 mainchainid, string denom, address subchainvoucherreceiver, address vouchercontact, uint256 tokenid, uint256 mainchaintokenlocknonce, uint256 vouchermintnonce)
func (_SubchainTNT721TokenBank *SubchainTNT721TokenBankFilterer) ParseTnt721voucherminted(log types.Log) (*SubchainTNT721TokenBankTnt721voucherminted, error) {
	event := new(SubchainTNT721TokenBankTnt721voucherminted)
	if err := _SubchainTNT721TokenBank.contract.UnpackLog(event, "tnt721voucherminted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
