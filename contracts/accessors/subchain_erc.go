// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"

	"github.com/thetatoken/theta/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SubchainERCMetaData contains all meta data concerning the SubchainERC contract.
var SubchainERCMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_PERSONAL_COLLATERAL_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"getValidatorAndBalanceWithBlockHeight\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorCandidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLegalValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"getLegalValidatorsWithBlockHeight\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"getBalanceWithBlockHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040526040518060400160405280600e81526020017f53696465636861696e546f6b656e0000000000000000000000000000000000008152506009908051906020019062000051929190620000d5565b506040518060400160405280600381526020017f5343540000000000000000000000000000000000000000000000000000000000815250600a90805190602001906200009f929190620000d5565b506012600b60006101000a81548160ff021916908360ff1602179055506064601155348015620000ce57600080fd5b50620001ea565b828054620000e390620001b4565b90600052602060002090601f01602090048101928262000107576000855562000153565b82601f106200012257805160ff191683800117855562000153565b8280016001018555821562000153579182015b828111156200015257825182559160200191906001019062000135565b5b50905062000162919062000166565b5090565b5b808211156200018157600081600090555060010162000167565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001cd57607f821691505b60208210811415620001e457620001e362000185565b5b50919050565b61339480620001fa6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806384ac4f68116100ad578063a9059cbb11610071578063a9059cbb14610331578063b309bb3b14610361578063d6eb59101461037f578063dd62ed3e1461039d578063f8b2cb4f146103cd57610121565b806384ac4f681461027b57806395d89b41146102ab5780639864acc2146102c9578063a0712d68146102f9578063a5d5db0c1461031557610121565b806323b872dd116100f457806323b872dd146101c3578063313ce567146101f357806342966c6814610211578063473d12ba1461022d57806370a082311461024b57610121565b806306fdde0314610126578063095ea7b31461014457806318160ddd1461017457806318c471ba14610192575b600080fd5b61012e6103fd565b60405161013b919061280b565b60405180910390f35b61015e600480360381019061015991906128d5565b61048b565b60405161016b9190612930565b60405180910390f35b61017c61057d565b604051610189919061295a565b60405180910390f35b6101ac60048036038101906101a79190612975565b610583565b6040516101ba929190612b1e565b60405180910390f35b6101dd60048036038101906101d89190612b55565b610a22565b6040516101ea9190612930565b60405180910390f35b6101fb610bd3565b6040516102089190612bc4565b60405180910390f35b61022b60048036038101906102269190612975565b610be6565b005b610235610cbe565b6040516102429190612bdf565b60405180910390f35b61026560048036038101906102609190612c01565b610d45565b604051610272919061295a565b60405180910390f35b610295600480360381019061029091906128d5565b610d5d565b6040516102a2919061295a565b60405180910390f35b6102b3611204565b6040516102c0919061280b565b60405180910390f35b6102e360048036038101906102de9190612975565b611292565b6040516102f09190612bdf565b60405180910390f35b610313600480360381019061030e9190612975565b611637565b005b61032f600480360381019061032a91906128d5565b611a1e565b005b61034b600480360381019061034691906128d5565b6123fa565b6040516103589190612930565b60405180910390f35b610369612517565b604051610376919061295a565b60405180910390f35b61038761251d565b604051610394919061295a565b60405180910390f35b6103b760048036038101906103b29190612c2e565b612527565b6040516103c4919061295a565b60405180910390f35b6103e760048036038101906103e29190612c01565b61254c565b6040516103f4919061295a565b60405180910390f35b6009805461040a90612c9d565b80601f016020809104026020016040519081016040528092919081815260200182805461043690612c9d565b80156104835780601f1061045857610100808354040283529160200191610483565b820191906000526020600020905b81548152906001019060200180831161046657829003601f168201915b505050505081565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161056b919061295a565b60405180910390a36001905092915050565b60065481565b6060804383106105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90612d1b565b60405180910390fd5b6000600554905060608060008314156105e957818194509450505050610a1d565b85600460006001866105fb9190612d6a565b8152602001908152602001600020600001541161073c57600460006001856106239190612d6a565b8152602001908152602001600020600101600460006001866106459190612d6a565b8152602001908152602001600020600201818054806020026020016040519081016040528092919081815260200182805480156106d757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068d575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561072957602002820191906000526020600020905b815481526020019060010190808311610715575b5050505050905094509450505050610a1d565b856004600080815260200190815260200160002060000154111561076857818194509450505050610a1d565b6000806001856107789190612d6a565b90505b8181111561090d576000600283836107939190612d6a565b61079d9190612dcd565b826107a89190612d6a565b9050600060046000838152602001908152602001600020604051806060016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561085957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161080f575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156108b157602002820191906000526020600020905b81548152602001906001019080831161089d575b505050505081525050905089816000015114156108e257806020015181604001519850985050505050505050610a1d565b89816000015110156108f657819350610906565b6001826109039190612d6a565b92505b505061077b565b6004600083815260200190815260200160002060010160046000848152602001908152602001600020600201818054806020026020016040519081016040528092919081815260200182805480156109ba57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610970575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610a0c57602002820191906000526020600020905b8154815260200190600101908083116109f8575b505050505090509650965050505050505b915091565b600081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ab09190612d6a565b9250508190555081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b069190612d6a565b9250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b5c9190612dfe565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610bc0919061295a565b60405180910390a3600190509392505050565b600b60009054906101000a900460ff1681565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c359190612d6a565b925050819055508060066000828254610c4e9190612d6a565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610cb3919061295a565b60405180910390a350565b6060600d73__IterableMapping_______________________63b3d15a3e90916040518263ffffffff1660e01b8152600401610cfa9190612e5b565b600060405180830381865af4158015610d17573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d409190612fd3565b905090565b60076020528060005260406000206000915090505481565b6000438210610da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9890612d1b565b60405180910390fd5b600060055490506000811415610dbb5760009150506111fe565b60008360046000600185610dcf9190612d6a565b81526020019081526020016000206000015411610ef857610e968560046000600186610dfb9190612d6a565b8152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015610e8c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e42575b5050505050612595565b905064e8d4a51000811415610eb0576000925050506111fe565b60046000600184610ec19190612d6a565b81526020019081526020016000206002018181548110610ee457610ee361301c565b5b9060005260206000200154925050506111fe565b8360046000808152602001908152602001600020600001541115610f21576000925050506111fe565b600080600184610f319190612d6a565b90505b8181111561110457600060028383610f4c9190612d6a565b610f569190612dcd565b82610f619190612d6a565b9050600060046000838152602001908152602001600020604051806060016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561101257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610fc8575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561106a57602002820191906000526020600020905b815481526020019060010190808311611056575b505050505081525050905087816000015114156110d95761108f898260200151612595565b945064e8d4a510008514156110ad57600096505050505050506111fe565b806040015185815181106110c4576110c361301c565b5b602002602001015196505050505050506111fe565b87816000015110156110ed578193506110fd565b6001826110fa9190612d6a565b92505b5050610f34565b6111a8876004600085815260200190815260200160002060010180548060200260200160405190810160405280929190818152602001828054801561119e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611154575b5050505050612595565b925064e8d4a510008314156111c45760009450505050506111fe565b6004600083815260200190815260200160002060020183815481106111ec576111eb61301c565b5b90600052602060002001549450505050505b92915050565b600a805461121190612c9d565b80601f016020809104026020016040519081016040528092919081815260200182805461123d90612c9d565b801561128a5780601f1061125f5761010080835404028352916020019161128a565b820191906000526020600020905b81548152906001019060200180831161126d57829003601f168201915b505050505081565b60604382106112d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cd90612d1b565b60405180910390fd5b60006005549050606060008214156112f2578092505050611632565b83600460006001856113049190612d6a565b815260200190815260200160002060000154116113cb576004600060018461132c9190612d6a565b81526020019081526020016000206001018054806020026020016040519081016040528092919081815260200182805480156113bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611373575b505050505092505050611632565b83600460008081526020019081526020016000206000015411156113f3578092505050611632565b6000806001846114039190612d6a565b90505b818111156115905760006002838361141e9190612d6a565b6114289190612dcd565b826114339190612d6a565b905060006004600083815260200190815260200160002060405180606001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156114e457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161149a575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561153c57602002820191906000526020600020905b815481526020019060010190808311611528575b505050505081525050905087816000015114156115655780602001519650505050505050611632565b878160000151101561157957819350611589565b6001826115869190612d6a565b92505b5050611406565b6004600083815260200190815260200160002060010180548060200260200160405190810160405280929190818152602001828054801561162657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116115dc575b50505050509450505050505b919050565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116869190612dfe565b92505081905550806006600082825461169f9190612dfe565b925050819055506000600d73__IterableMapping_______________________63732a2ccf9091336040518363ffffffff1660e01b81526004016116e492919061305a565b602060405180830381865af4158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190613098565b1480156117735750601154600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b156119b557600d73__IterableMapping_______________________63bc2b405c909133600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518463ffffffff1660e01b81526004016117f5939291906130d4565b60006040518083038186803b15801561180d57600080fd5b505af4158015611821573d6000803e3d6000fd5b505050506040518060600160405280438152602001600d73__IterableMapping_______________________63b3d15a3e90916040518263ffffffff1660e01b81526004016118709190612e5b565b600060405180830381865af415801561188d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118b69190612fd3565b8152602001600d73__IterableMapping_______________________63dc34fd7d90916040518263ffffffff1660e01b81526004016118f59190612e5b565b600060405180830381865af4158015611912573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061193b91906131ce565b81525060046000600554815260200190815260200160002060008201518160000155602082015181600101908051906020019061197992919061267e565b506040820151816002019080519060200190611996929190612708565b509050506001600560008282546119ad9190612dfe565b925050819055505b3373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611a13919061295a565b60405180910390a350565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9790613289565b60405180910390fd5b6000339050600082905082600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611af99190612dfe565b9250508190555082600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b4f9190612d6a565b92505081905550601154600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410611c4c57600d73__IterableMapping_______________________63bc2b405c909186600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518463ffffffff1660e01b8152600401611c1b939291906130d4565b60006040518083038186803b158015611c3357600080fd5b505af4158015611c47573d6000803e3d6000fd5b505050505b600d73__IterableMapping_______________________63bc2b405c909133600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518463ffffffff1660e01b8152600401611cc9939291906130d4565b60006040518083038186803b158015611ce157600080fd5b505af4158015611cf5573d6000803e3d6000fd5b505050506000600d73__IterableMapping_______________________63732a2ccf9091336040518363ffffffff1660e01b8152600401611d3792919061305a565b602060405180830381865af4158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d789190613098565b118015611dc55750601154600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b15611e3757600d73__IterableMapping_______________________634c60db9c9091336040518363ffffffff1660e01b8152600401611e0692919061305a565b60006040518083038186803b158015611e1e57600080fd5b505af4158015611e32573d6000803e3d6000fd5b505050505b6040518060600160405280438152602001600d73__IterableMapping_______________________63b3d15a3e90916040518263ffffffff1660e01b8152600401611e829190612e5b565b600060405180830381865af4158015611e9f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611ec89190612fd3565b8152602001600d73__IterableMapping_______________________63dc34fd7d90916040518263ffffffff1660e01b8152600401611f079190612e5b565b600060405180830381865af4158015611f24573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611f4d91906131ce565b815250600460006005548152602001908152602001600020600082015181600001556020820151816001019080519060200190611f8b92919061267e565b506040820151816002019080519060200190611fa8929190612708565b50905050600160056000828254611fbf9190612dfe565b925050819055506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000612106826020015185612620565b905060006001846121179190612dfe565b90506040518060400160405280438152602001838152506000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600082015181600001556020820151816001015590505080600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000612319826020015189612620565b9050600060018461232a9190612dfe565b9050604051806040016040528043815260200183815250600260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600082015181600001556020820151816001015590505080600360008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050505050505050505050565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461244b9190612d6a565b9250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124a19190612dfe565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612505919061295a565b60405180910390a36001905092915050565b60115481565b6000600c54905090565b6008602052816000526040600020602052806000526040600020600091509150505481565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600090505b8251811015612610578373ffffffffffffffffffffffffffffffffffffffff168382815181106125d0576125cf61301c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156125fd578091505061261a565b8080612608906132a9565b91505061259d565b5064e8d4a5100090505b92915050565b600080828461262f9190612dfe565b905083811015612674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266b9061333e565b60405180910390fd5b8091505092915050565b8280548282559060005260206000209081019282156126f7579160200282015b828111156126f65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061269e565b5b5090506127049190612755565b5090565b828054828255906000526020600020908101928215612744579160200282015b82811115612743578251825591602001919060010190612728565b5b5090506127519190612755565b5090565b5b8082111561276e576000816000905550600101612756565b5090565b600081519050919050565b600082825260208201905092915050565b60005b838110156127ac578082015181840152602081019050612791565b838111156127bb576000848401525b50505050565b6000601f19601f8301169050919050565b60006127dd82612772565b6127e7818561277d565b93506127f781856020860161278e565b612800816127c1565b840191505092915050565b6000602082019050818103600083015261282581846127d2565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061286c82612841565b9050919050565b61287c81612861565b811461288757600080fd5b50565b60008135905061289981612873565b92915050565b6000819050919050565b6128b28161289f565b81146128bd57600080fd5b50565b6000813590506128cf816128a9565b92915050565b600080604083850312156128ec576128eb612837565b5b60006128fa8582860161288a565b925050602061290b858286016128c0565b9150509250929050565b60008115159050919050565b61292a81612915565b82525050565b60006020820190506129456000830184612921565b92915050565b6129548161289f565b82525050565b600060208201905061296f600083018461294b565b92915050565b60006020828403121561298b5761298a612837565b5b6000612999848285016128c0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129d781612861565b82525050565b60006129e983836129ce565b60208301905092915050565b6000602082019050919050565b6000612a0d826129a2565b612a1781856129ad565b9350612a22836129be565b8060005b83811015612a53578151612a3a88826129dd565b9750612a45836129f5565b925050600181019050612a26565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a958161289f565b82525050565b6000612aa78383612a8c565b60208301905092915050565b6000602082019050919050565b6000612acb82612a60565b612ad58185612a6b565b9350612ae083612a7c565b8060005b83811015612b11578151612af88882612a9b565b9750612b0383612ab3565b925050600181019050612ae4565b5085935050505092915050565b60006040820190508181036000830152612b388185612a02565b90508181036020830152612b4c8184612ac0565b90509392505050565b600080600060608486031215612b6e57612b6d612837565b5b6000612b7c8682870161288a565b9350506020612b8d8682870161288a565b9250506040612b9e868287016128c0565b9150509250925092565b600060ff82169050919050565b612bbe81612ba8565b82525050565b6000602082019050612bd96000830184612bb5565b92915050565b60006020820190508181036000830152612bf98184612a02565b905092915050565b600060208284031215612c1757612c16612837565b5b6000612c258482850161288a565b91505092915050565b60008060408385031215612c4557612c44612837565b5b6000612c538582860161288a565b9250506020612c648582860161288a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612cb557607f821691505b60208210811415612cc957612cc8612c6e565b5b50919050565b7f7468697320626c6f636b206973206e6f74207965742064657465726d696e6564600082015250565b6000612d0560208361277d565b9150612d1082612ccf565b602082019050919050565b60006020820190508181036000830152612d3481612cf8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d758261289f565b9150612d808361289f565b925082821015612d9357612d92612d3b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612dd88261289f565b9150612de38361289f565b925082612df357612df2612d9e565b5b828204905092915050565b6000612e098261289f565b9150612e148361289f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e4957612e48612d3b565b5b828201905092915050565b8082525050565b6000602082019050612e706000830184612e54565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612eb3826127c1565b810181811067ffffffffffffffff82111715612ed257612ed1612e7b565b5b80604052505050565b6000612ee561282d565b9050612ef18282612eaa565b919050565b600067ffffffffffffffff821115612f1157612f10612e7b565b5b602082029050602081019050919050565b600080fd5b600081519050612f3681612873565b92915050565b6000612f4f612f4a84612ef6565b612edb565b90508083825260208201905060208402830185811115612f7257612f71612f22565b5b835b81811015612f9b5780612f878882612f27565b845260208401935050602081019050612f74565b5050509392505050565b600082601f830112612fba57612fb9612e76565b5b8151612fca848260208601612f3c565b91505092915050565b600060208284031215612fe957612fe8612837565b5b600082015167ffffffffffffffff8111156130075761300661283c565b5b61301384828501612fa5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61305481612861565b82525050565b600060408201905061306f6000830185612e54565b61307c602083018461304b565b9392505050565b600081519050613092816128a9565b92915050565b6000602082840312156130ae576130ad612837565b5b60006130bc84828501613083565b91505092915050565b6130ce8161289f565b82525050565b60006060820190506130e96000830186612e54565b6130f6602083018561304b565b61310360408301846130c5565b949350505050565b600067ffffffffffffffff82111561312657613125612e7b565b5b602082029050602081019050919050565b600061314a6131458461310b565b612edb565b9050808382526020820190506020840283018581111561316d5761316c612f22565b5b835b8181101561319657806131828882613083565b84526020840193505060208101905061316f565b5050509392505050565b600082601f8301126131b5576131b4612e76565b5b81516131c5848260208601613137565b91505092915050565b6000602082840312156131e4576131e3612837565b5b600082015167ffffffffffffffff8111156132025761320161283c565b5b61320e848285016131a0565b91505092915050565b7f596f752068617665206e6f7420656e6f7567682073696465636861696e20746f60008201527f6b656e2100000000000000000000000000000000000000000000000000000000602082015250565b600061327360248361277d565b915061327e82613217565b604082019050919050565b600060208201905081810360008301526132a281613266565b9050919050565b60006132b48261289f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132e7576132e6612d3b565b5b600182019050919050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b6000613328601b8361277d565b9150613333826132f2565b602082019050919050565b600060208201905081810360008301526133578161331b565b905091905056fea2646970667358221220916aec3351c293cb11d4a87c841e41cf0eab55bbb6172bcf3c925b00d5c3643364736f6c634300080c0033",
}

// SubchainERCABI is the input ABI used to generate the binding from.
// Deprecated: Use SubchainERCMetaData.ABI instead.
var SubchainERCABI = SubchainERCMetaData.ABI

// SubchainERCBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SubchainERCMetaData.Bin instead.
var SubchainERCBin = SubchainERCMetaData.Bin

// DeploySubchainERC deploys a new Ethereum contract, binding an instance of SubchainERC to it.
func DeploySubchainERC(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SubchainERC, error) {
	parsed, err := SubchainERCMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SubchainERCBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SubchainERC{SubchainERCCaller: SubchainERCCaller{contract: contract}, SubchainERCTransactor: SubchainERCTransactor{contract: contract}, SubchainERCFilterer: SubchainERCFilterer{contract: contract}}, nil
}

// SubchainERC is an auto generated Go binding around an Ethereum contract.
type SubchainERC struct {
	SubchainERCCaller     // Read-only binding to the contract
	SubchainERCTransactor // Write-only binding to the contract
	SubchainERCFilterer   // Log filterer for contract events
}

// SubchainERCCaller is an auto generated read-only Go binding around an Ethereum contract.
type SubchainERCCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainERCTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SubchainERCTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainERCFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SubchainERCFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainERCSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SubchainERCSession struct {
	Contract     *SubchainERC      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SubchainERCCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SubchainERCCallerSession struct {
	Contract *SubchainERCCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// SubchainERCTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SubchainERCTransactorSession struct {
	Contract     *SubchainERCTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// SubchainERCRaw is an auto generated low-level Go binding around an Ethereum contract.
type SubchainERCRaw struct {
	Contract *SubchainERC // Generic contract binding to access the raw methods on
}

// SubchainERCCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SubchainERCCallerRaw struct {
	Contract *SubchainERCCaller // Generic read-only contract binding to access the raw methods on
}

// SubchainERCTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SubchainERCTransactorRaw struct {
	Contract *SubchainERCTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSubchainERC creates a new instance of SubchainERC, bound to a specific deployed contract.
func NewSubchainERC(address common.Address, backend bind.ContractBackend) (*SubchainERC, error) {
	contract, err := bindSubchainERC(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SubchainERC{SubchainERCCaller: SubchainERCCaller{contract: contract}, SubchainERCTransactor: SubchainERCTransactor{contract: contract}, SubchainERCFilterer: SubchainERCFilterer{contract: contract}}, nil
}

// NewSubchainERCCaller creates a new read-only instance of SubchainERC, bound to a specific deployed contract.
func NewSubchainERCCaller(address common.Address, caller bind.ContractCaller) (*SubchainERCCaller, error) {
	contract, err := bindSubchainERC(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SubchainERCCaller{contract: contract}, nil
}

// NewSubchainERCTransactor creates a new write-only instance of SubchainERC, bound to a specific deployed contract.
func NewSubchainERCTransactor(address common.Address, transactor bind.ContractTransactor) (*SubchainERCTransactor, error) {
	contract, err := bindSubchainERC(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SubchainERCTransactor{contract: contract}, nil
}

// NewSubchainERCFilterer creates a new log filterer instance of SubchainERC, bound to a specific deployed contract.
func NewSubchainERCFilterer(address common.Address, filterer bind.ContractFilterer) (*SubchainERCFilterer, error) {
	contract, err := bindSubchainERC(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SubchainERCFilterer{contract: contract}, nil
}

// bindSubchainERC binds a generic wrapper to an already deployed contract.
func bindSubchainERC(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SubchainERCABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SubchainERC *SubchainERCRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SubchainERC.Contract.SubchainERCCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SubchainERC *SubchainERCRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SubchainERC.Contract.SubchainERCTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SubchainERC *SubchainERCRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SubchainERC.Contract.SubchainERCTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SubchainERC *SubchainERCCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SubchainERC.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SubchainERC *SubchainERCTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SubchainERC.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SubchainERC *SubchainERCTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SubchainERC.Contract.contract.Transact(opts, method, params...)
}

// MINPERSONALCOLLATERALAMOUNT is a free data retrieval call binding the contract method 0xb309bb3b.
//
// Solidity: function MIN_PERSONAL_COLLATERAL_AMOUNT() view returns(uint256)
func (_SubchainERC *SubchainERCCaller) MINPERSONALCOLLATERALAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "MIN_PERSONAL_COLLATERAL_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINPERSONALCOLLATERALAMOUNT is a free data retrieval call binding the contract method 0xb309bb3b.
//
// Solidity: function MIN_PERSONAL_COLLATERAL_AMOUNT() view returns(uint256)
func (_SubchainERC *SubchainERCSession) MINPERSONALCOLLATERALAMOUNT() (*big.Int, error) {
	return _SubchainERC.Contract.MINPERSONALCOLLATERALAMOUNT(&_SubchainERC.CallOpts)
}

// MINPERSONALCOLLATERALAMOUNT is a free data retrieval call binding the contract method 0xb309bb3b.
//
// Solidity: function MIN_PERSONAL_COLLATERAL_AMOUNT() view returns(uint256)
func (_SubchainERC *SubchainERCCallerSession) MINPERSONALCOLLATERALAMOUNT() (*big.Int, error) {
	return _SubchainERC.Contract.MINPERSONALCOLLATERALAMOUNT(&_SubchainERC.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_SubchainERC *SubchainERCCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_SubchainERC *SubchainERCSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _SubchainERC.Contract.Allowance(&_SubchainERC.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address , address ) view returns(uint256)
func (_SubchainERC *SubchainERCCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _SubchainERC.Contract.Allowance(&_SubchainERC.CallOpts, arg0, arg1)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_SubchainERC *SubchainERCCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_SubchainERC *SubchainERCSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _SubchainERC.Contract.BalanceOf(&_SubchainERC.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address ) view returns(uint256)
func (_SubchainERC *SubchainERCCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _SubchainERC.Contract.BalanceOf(&_SubchainERC.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_SubchainERC *SubchainERCCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_SubchainERC *SubchainERCSession) Decimals() (uint8, error) {
	return _SubchainERC.Contract.Decimals(&_SubchainERC.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_SubchainERC *SubchainERCCallerSession) Decimals() (uint8, error) {
	return _SubchainERC.Contract.Decimals(&_SubchainERC.CallOpts)
}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address addr) view returns(uint256)
func (_SubchainERC *SubchainERCCaller) GetBalance(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "getBalance", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address addr) view returns(uint256)
func (_SubchainERC *SubchainERCSession) GetBalance(addr common.Address) (*big.Int, error) {
	return _SubchainERC.Contract.GetBalance(&_SubchainERC.CallOpts, addr)
}

// GetBalance is a free data retrieval call binding the contract method 0xf8b2cb4f.
//
// Solidity: function getBalance(address addr) view returns(uint256)
func (_SubchainERC *SubchainERCCallerSession) GetBalance(addr common.Address) (*big.Int, error) {
	return _SubchainERC.Contract.GetBalance(&_SubchainERC.CallOpts, addr)
}

// GetBalanceWithBlockHeight is a free data retrieval call binding the contract method 0x84ac4f68.
//
// Solidity: function getBalanceWithBlockHeight(address validatorAddress, uint256 blockHeight) view returns(uint256)
func (_SubchainERC *SubchainERCCaller) GetBalanceWithBlockHeight(opts *bind.CallOpts, validatorAddress common.Address, blockHeight *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "getBalanceWithBlockHeight", validatorAddress, blockHeight)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBalanceWithBlockHeight is a free data retrieval call binding the contract method 0x84ac4f68.
//
// Solidity: function getBalanceWithBlockHeight(address validatorAddress, uint256 blockHeight) view returns(uint256)
func (_SubchainERC *SubchainERCSession) GetBalanceWithBlockHeight(validatorAddress common.Address, blockHeight *big.Int) (*big.Int, error) {
	return _SubchainERC.Contract.GetBalanceWithBlockHeight(&_SubchainERC.CallOpts, validatorAddress, blockHeight)
}

// GetBalanceWithBlockHeight is a free data retrieval call binding the contract method 0x84ac4f68.
//
// Solidity: function getBalanceWithBlockHeight(address validatorAddress, uint256 blockHeight) view returns(uint256)
func (_SubchainERC *SubchainERCCallerSession) GetBalanceWithBlockHeight(validatorAddress common.Address, blockHeight *big.Int) (*big.Int, error) {
	return _SubchainERC.Contract.GetBalanceWithBlockHeight(&_SubchainERC.CallOpts, validatorAddress, blockHeight)
}

// GetLegalValidators is a free data retrieval call binding the contract method 0x473d12ba.
//
// Solidity: function getLegalValidators() view returns(address[])
func (_SubchainERC *SubchainERCCaller) GetLegalValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "getLegalValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetLegalValidators is a free data retrieval call binding the contract method 0x473d12ba.
//
// Solidity: function getLegalValidators() view returns(address[])
func (_SubchainERC *SubchainERCSession) GetLegalValidators() ([]common.Address, error) {
	return _SubchainERC.Contract.GetLegalValidators(&_SubchainERC.CallOpts)
}

// GetLegalValidators is a free data retrieval call binding the contract method 0x473d12ba.
//
// Solidity: function getLegalValidators() view returns(address[])
func (_SubchainERC *SubchainERCCallerSession) GetLegalValidators() ([]common.Address, error) {
	return _SubchainERC.Contract.GetLegalValidators(&_SubchainERC.CallOpts)
}

// GetLegalValidatorsWithBlockHeight is a free data retrieval call binding the contract method 0x9864acc2.
//
// Solidity: function getLegalValidatorsWithBlockHeight(uint256 blockHeight) view returns(address[])
func (_SubchainERC *SubchainERCCaller) GetLegalValidatorsWithBlockHeight(opts *bind.CallOpts, blockHeight *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "getLegalValidatorsWithBlockHeight", blockHeight)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetLegalValidatorsWithBlockHeight is a free data retrieval call binding the contract method 0x9864acc2.
//
// Solidity: function getLegalValidatorsWithBlockHeight(uint256 blockHeight) view returns(address[])
func (_SubchainERC *SubchainERCSession) GetLegalValidatorsWithBlockHeight(blockHeight *big.Int) ([]common.Address, error) {
	return _SubchainERC.Contract.GetLegalValidatorsWithBlockHeight(&_SubchainERC.CallOpts, blockHeight)
}

// GetLegalValidatorsWithBlockHeight is a free data retrieval call binding the contract method 0x9864acc2.
//
// Solidity: function getLegalValidatorsWithBlockHeight(uint256 blockHeight) view returns(address[])
func (_SubchainERC *SubchainERCCallerSession) GetLegalValidatorsWithBlockHeight(blockHeight *big.Int) ([]common.Address, error) {
	return _SubchainERC.Contract.GetLegalValidatorsWithBlockHeight(&_SubchainERC.CallOpts, blockHeight)
}

// GetTotalCollateral is a free data retrieval call binding the contract method 0xd6eb5910.
//
// Solidity: function getTotalCollateral() view returns(uint256)
func (_SubchainERC *SubchainERCCaller) GetTotalCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "getTotalCollateral")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalCollateral is a free data retrieval call binding the contract method 0xd6eb5910.
//
// Solidity: function getTotalCollateral() view returns(uint256)
func (_SubchainERC *SubchainERCSession) GetTotalCollateral() (*big.Int, error) {
	return _SubchainERC.Contract.GetTotalCollateral(&_SubchainERC.CallOpts)
}

// GetTotalCollateral is a free data retrieval call binding the contract method 0xd6eb5910.
//
// Solidity: function getTotalCollateral() view returns(uint256)
func (_SubchainERC *SubchainERCCallerSession) GetTotalCollateral() (*big.Int, error) {
	return _SubchainERC.Contract.GetTotalCollateral(&_SubchainERC.CallOpts)
}

// GetValidatorAndBalanceWithBlockHeight is a free data retrieval call binding the contract method 0x18c471ba.
//
// Solidity: function getValidatorAndBalanceWithBlockHeight(uint256 blockHeight) view returns(address[], uint256[])
func (_SubchainERC *SubchainERCCaller) GetValidatorAndBalanceWithBlockHeight(opts *bind.CallOpts, blockHeight *big.Int) ([]common.Address, []*big.Int, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "getValidatorAndBalanceWithBlockHeight", blockHeight)

	if err != nil {
		return *new([]common.Address), *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return out0, out1, err

}

// GetValidatorAndBalanceWithBlockHeight is a free data retrieval call binding the contract method 0x18c471ba.
//
// Solidity: function getValidatorAndBalanceWithBlockHeight(uint256 blockHeight) view returns(address[], uint256[])
func (_SubchainERC *SubchainERCSession) GetValidatorAndBalanceWithBlockHeight(blockHeight *big.Int) ([]common.Address, []*big.Int, error) {
	return _SubchainERC.Contract.GetValidatorAndBalanceWithBlockHeight(&_SubchainERC.CallOpts, blockHeight)
}

// GetValidatorAndBalanceWithBlockHeight is a free data retrieval call binding the contract method 0x18c471ba.
//
// Solidity: function getValidatorAndBalanceWithBlockHeight(uint256 blockHeight) view returns(address[], uint256[])
func (_SubchainERC *SubchainERCCallerSession) GetValidatorAndBalanceWithBlockHeight(blockHeight *big.Int) ([]common.Address, []*big.Int, error) {
	return _SubchainERC.Contract.GetValidatorAndBalanceWithBlockHeight(&_SubchainERC.CallOpts, blockHeight)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_SubchainERC *SubchainERCCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_SubchainERC *SubchainERCSession) Name() (string, error) {
	return _SubchainERC.Contract.Name(&_SubchainERC.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_SubchainERC *SubchainERCCallerSession) Name() (string, error) {
	return _SubchainERC.Contract.Name(&_SubchainERC.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_SubchainERC *SubchainERCCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_SubchainERC *SubchainERCSession) Symbol() (string, error) {
	return _SubchainERC.Contract.Symbol(&_SubchainERC.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_SubchainERC *SubchainERCCallerSession) Symbol() (string, error) {
	return _SubchainERC.Contract.Symbol(&_SubchainERC.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SubchainERC *SubchainERCCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainERC.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SubchainERC *SubchainERCSession) TotalSupply() (*big.Int, error) {
	return _SubchainERC.Contract.TotalSupply(&_SubchainERC.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SubchainERC *SubchainERCCallerSession) TotalSupply() (*big.Int, error) {
	return _SubchainERC.Contract.TotalSupply(&_SubchainERC.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_SubchainERC *SubchainERCTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_SubchainERC *SubchainERCSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.Approve(&_SubchainERC.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_SubchainERC *SubchainERCTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.Approve(&_SubchainERC.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_SubchainERC *SubchainERCTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_SubchainERC *SubchainERCSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.Burn(&_SubchainERC.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_SubchainERC *SubchainERCTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.Burn(&_SubchainERC.TransactOpts, amount)
}

// DepositCollateral is a paid mutator transaction binding the contract method 0xa5d5db0c.
//
// Solidity: function depositCollateral(address validatorCandidate, uint256 amount) returns()
func (_SubchainERC *SubchainERCTransactor) DepositCollateral(opts *bind.TransactOpts, validatorCandidate common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.contract.Transact(opts, "depositCollateral", validatorCandidate, amount)
}

// DepositCollateral is a paid mutator transaction binding the contract method 0xa5d5db0c.
//
// Solidity: function depositCollateral(address validatorCandidate, uint256 amount) returns()
func (_SubchainERC *SubchainERCSession) DepositCollateral(validatorCandidate common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.DepositCollateral(&_SubchainERC.TransactOpts, validatorCandidate, amount)
}

// DepositCollateral is a paid mutator transaction binding the contract method 0xa5d5db0c.
//
// Solidity: function depositCollateral(address validatorCandidate, uint256 amount) returns()
func (_SubchainERC *SubchainERCTransactorSession) DepositCollateral(validatorCandidate common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.DepositCollateral(&_SubchainERC.TransactOpts, validatorCandidate, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_SubchainERC *SubchainERCTransactor) Mint(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.contract.Transact(opts, "mint", amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_SubchainERC *SubchainERCSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.Mint(&_SubchainERC.TransactOpts, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 amount) returns()
func (_SubchainERC *SubchainERCTransactorSession) Mint(amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.Mint(&_SubchainERC.TransactOpts, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_SubchainERC *SubchainERCTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_SubchainERC *SubchainERCSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.Transfer(&_SubchainERC.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_SubchainERC *SubchainERCTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.Transfer(&_SubchainERC.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_SubchainERC *SubchainERCTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_SubchainERC *SubchainERCSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.TransferFrom(&_SubchainERC.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_SubchainERC *SubchainERCTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _SubchainERC.Contract.TransferFrom(&_SubchainERC.TransactOpts, sender, recipient, amount)
}

// SubchainERCApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the SubchainERC contract.
type SubchainERCApprovalIterator struct {
	Event *SubchainERCApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainERCApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainERCApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainERCApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainERCApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainERCApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainERCApproval represents a Approval event raised by the SubchainERC contract.
type SubchainERCApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_SubchainERC *SubchainERCFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*SubchainERCApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _SubchainERC.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &SubchainERCApprovalIterator{contract: _SubchainERC.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_SubchainERC *SubchainERCFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *SubchainERCApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _SubchainERC.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainERCApproval)
				if err := _SubchainERC.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_SubchainERC *SubchainERCFilterer) ParseApproval(log types.Log) (*SubchainERCApproval, error) {
	event := new(SubchainERCApproval)
	if err := _SubchainERC.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SubchainERCTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the SubchainERC contract.
type SubchainERCTransferIterator struct {
	Event *SubchainERCTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainERCTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainERCTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainERCTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainERCTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainERCTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainERCTransfer represents a Transfer event raised by the SubchainERC contract.
type SubchainERCTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_SubchainERC *SubchainERCFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*SubchainERCTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SubchainERC.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SubchainERCTransferIterator{contract: _SubchainERC.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_SubchainERC *SubchainERCFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *SubchainERCTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _SubchainERC.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainERCTransfer)
				if err := _SubchainERC.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_SubchainERC *SubchainERCFilterer) ParseTransfer(log types.Log) (*SubchainERCTransfer, error) {
	event := new(SubchainERCTransfer)
	if err := _SubchainERC.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
