// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MainchainTNT20TokenBankMetaData contains all meta data concerning the MainchainTNT20TokenBank contract.
var MainchainTNT20TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internaltype\":\"contractsubchainregistrar\",\"name\":\"subchainregistrar_\",\"type\":\"address\"}],\"statemutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"mainchaintokensender\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"subchainvoucherreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"lockedamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenlocknonce\",\"type\":\"uint256\"}],\"name\":\"tnt20tokenlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"mainchaintokenreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"unlockedamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"subchainvoucherburnnonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"tokenunlocknonce\",\"type\":\"uint256\"}],\"name\":\"tnt20tokenunlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"mainchainvoucherowner\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"subchaintokenreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"burnamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"voucherburnnonce\",\"type\":\"uint256\"}],\"name\":\"tnt20voucherburned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"mainchainvoucherreceiver\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"vouchercontact\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"mintamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"subchaintokenlocknonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"vouchermintnonce\",\"type\":\"uint256\"}],\"name\":\"tnt20voucherminted\",\"type\":\"event\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alldenoms\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allvouchers\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomtovoucherlookup\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"contractaddress\",\"type\":\"address\"},{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"voucheraddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"vouchercontractaddr\",\"type\":\"address\"}],\"name\":\"getdenom\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getvoucher\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenlocknonceonsubchain\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internaltype\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenlockvotingrecords\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"accumlatedshares\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenunlocknonceonsubchain\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totallockedamounts\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucheraddresstodenomlookup\",\"outputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherburnnonceonsubchain\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internaltype\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherburnvotingrecords\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"accumlatedshares\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vouchermintnonceonsubchain\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"tnt20contract\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"subchainvoucherreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"lockamount\",\"type\":\"uint256\"}],\"name\":\"locktokens\",\"outputs\":[],\"statemutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"address\",\"name\":\"mainchaintokenreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"unlockamount\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"subchainvoucherburnnonce\",\"type\":\"uint256\"}],\"name\":\"unlocktokens\",\"outputs\":[],\"statemutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internaltype\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internaltype\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internaltype\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internaltype\":\"address\",\"name\":\"mainchainvoucherreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"mintamount\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"subchaintokenlocknonce\",\"type\":\"uint256\"}],\"name\":\"mintvouchers\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"vouchercontractaddr\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"subchaintokenreceiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"burnamount\",\"type\":\"uint256\"}],\"name\":\"burnvouchers\",\"outputs\":[],\"statemutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620046a5380380620046a583398101604081905262000034916200005d565b506001805460008290556001600160a01b031981166001600160a01b039091161790556200008f565b6000602082840312156200007057600080fd5b81516001600160a01b03811681146200008857600080fd5b9392505050565b614606806200009f6000396000f3fe6080604052600436106200012b5760003560e01c80639d3a0f0c11620000ad578063df953bd5116200006c578063df953bd51462000419578063e70891e2146200044a578063ebda9962146200047b578063f6a3d24e14620004a0578063feaff05214620004e057600080fd5b80639d3a0f0c1462000370578063a0df5cc51462000395578063a2cc698114620003ac578063a92678f814620003d1578063bff4c41a146200040257600080fd5b806327ca4df111620000fa57806327ca4df114620002745780633f1a8aa814620002b2578063588b140814620002ee57806360569b5e14620003225780637ff75b46146200035757600080fd5b80630fa04ea114620001305780631527b14d14620001745780631eb7873714620001e5578063261a323e146200023e575b600080fd5b3480156200013d57600080fd5b50620001616200014f36600462002bb6565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156200018157600080fd5b50620001c56200019336600462002a2a565b8051602081830181018051600a825292820191909301209152546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b0390931683529015156020830152016200016b565b348015620001f257600080fd5b50620002286200020436600462002c50565b60086020908152600092835260408084209091529082529020805460029091015482565b604080519283526020830191909152016200016b565b3480156200024b57600080fd5b50620002636200025d36600462002a2a565b62000523565b60405190151581526020016200016b565b3480156200028157600080fd5b50620002996200029336600462002bb6565b62000567565b6040516001600160a01b0390911681526020016200016b565b348015620002bf57600080fd5b5062000161620002d136600462002bd0565b600e60209081526000928352604080842090915290825290205481565b348015620002fb57600080fd5b50620003136200030d36600462002bb6565b62000592565b6040516200016b919062002f68565b3480156200032f57600080fd5b506200034762000341366004620028a6565b62000647565b6040516200016b92919062002f7d565b6200036e6200036836600462002c73565b620006f6565b005b3480156200037d57600080fd5b506200036e6200038f36600462002ae3565b620009d3565b6200036e620003a6366004620028e6565b62000ca0565b348015620003b957600080fd5b5062000299620003cb36600462002a2a565b62000f2f565b348015620003de57600080fd5b5062000161620003f036600462002bb6565b60026020526000908152604090205481565b6200036e6200041336600462002c03565b62000fa5565b3480156200042657600080fd5b50620001616200043836600462002bb6565b60036020526000908152604090205481565b3480156200045757600080fd5b50620001616200046936600462002bb6565b60056020526000908152604090205481565b3480156200048857600080fd5b50620003136200049a366004620028a6565b6200139c565b348015620004ad57600080fd5b5062000263620004bf366004620028a6565b6001600160a01b03166000908152600b602052604090206001015460ff1690565b348015620004ed57600080fd5b5062000228620004ff36600462002c50565b60096020908152600092835260408084209091529082529020805460029091015482565b60008062000531836200149c565b9050600a8160405162000545919062002d3c565b9081526040519081900360200190205460ff600160a01b909104169392505050565b600c81815481106200057857600080fd5b6000918252602090912001546001600160a01b0316905081565b600d8181548110620005a357600080fd5b906000526020600020016000915090508054620005c0906200339a565b80601f0160208091040260200160405190810160405280929190818152602001828054620005ee906200339a565b80156200063f5780601f1062000613576101008083540402835291602001916200063f565b820191906000526020600020905b8154815290600101906020018083116200062157829003601f168201915b505050505081565b600b6020526000908152604090208054819062000664906200339a565b80601f016020809104026020016040519081016040528092919081815260200182805462000692906200339a565b8015620006e35780601f10620006b757610100808354040283529160200191620006e3565b820191906000526020600020905b815481529060010190602001808311620006c557829003601f168201915b5050506001909301549192505060ff1682565b60026000541415620007255760405162461bcd60e51b81526004016200071c9062002fe7565b60405180910390fd5b6002600090815562000737866200149c565b90506000806200074783620014af565b9150915080620007b05760405162461bcd60e51b815260206004820152602d60248201527f4661696c656420746f206578747261637420636f6e747261637420616464726560448201526c73732066726f6d2064656e6f6d60981b60648201526084016200071c565b6000898152600e602090815260408083206001600160a01b0386168452909152902054861115620008395760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420756e6c6f636b207468652072657175657374656420616d6f7560448201526b6e74206f6620746f6b656e7360a01b60648201526084016200071c565b60008984888a8989604051602001620008589695949392919062002eac565b6040516020818303038152906040528051906020012090506000620008818b8884893362001530565b90508015620009c15760008b8152600e602090815260408083206001600160a01b0388168452909152902054620008b990896200154f565b60008c8152600e602090815260408083206001600160a01b03898116808652919093529281902093909355915163a9059cbb60e01b8152918b166004830152602482018a90529063a9059cbb90604401602060405180830381600087803b1580156200092457600080fd5b505af115801562000939573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200095f919062002a06565b506200096b8b62001564565b60008b815260036020526040908190205490517f2c5bc9eefb64eab5606f5b0130895a4ea96c8f4696307059787a827a21682d6690620009b7908e9089908e908e908d9088906200313b565b60405180910390a1505b50506001600055505050505050505050565b60026000541415620009f95760405162461bcd60e51b81526004016200071c9062002fe7565b6002600090815562000a0b896200149c565b905060008062000a1b836200158d565b915091508062000a3f5760405162461bcd60e51b81526004016200071c9062002fa3565b600082848c8c8c8c8c8c8c60405160200162000a649998979695949392919062002e13565b604051602081830303815290604052805190602001209050600062000a8d848884893362001629565b9050801562000c8c5760405163130d191f60e11b8152309063261a323e9062000abb90889060040162002f68565b60206040518083038186803b15801562000ad457600080fd5b505afa15801562000ae9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b0f919062002a06565b62000b2d5762000b2d8562000b27878f8f8f6200163e565b620016e0565b60405163a2cc698160e01b8152600090309063a2cc69819062000b5590899060040162002f68565b60206040518083038186803b15801562000b6e57600080fd5b505afa15801562000b83573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ba99190620028c6565b90506001600160a01b03811662000c145760405162461bcd60e51b815260206004820152602860248201527f74686520766f756368657220666f72207468652064656e6f6d20646f6573206e6044820152671bdd08195e1a5cdd60c21b60648201526084016200071c565b62000c21818b8b6200190a565b62000c2c8562001978565b6000600560008781526020019081526020016000205490507f650bed37d70463d4fef7d7176b184cd688fa93c24436a5ef4e4cc28595c330af86888d858e8d8760405162000c819796959493929190620030ea565b60405180910390a150505b505060016000555050505050505050505050565b6002600054141562000cc65760405162461bcd60e51b81526004016200071c9062002fe7565b600260009081556040516375ed4cb160e11b81526001600160a01b0385166004820152309063ebda99629060240160006040518083038186803b15801562000d0d57600080fd5b505afa15801562000d22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000d4c919081019062002a63565b905080516000141562000dba5760405162461bcd60e51b815260206004820152602f60248201527f6661696c656420746f206c6f6f6b75702064656e6f6d20666f7220746865207660448201526e1bdd58da195c8818dbdb9d1c9858dd608a1b60648201526084016200071c565b60405163130d191f60e11b8152309063261a323e9062000ddf90849060040162002f68565b60206040518083038186803b15801562000df857600080fd5b505afa15801562000e0d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e33919062002a06565b62000e815760405162461bcd60e51b815260206004820152601f60248201527f566f756368657220636f6e747261637420646f6573206e6f742065786973740060448201526064016200071c565b3362000e8f85828562001999565b60008062000e9d846200158d565b915091508062000ec15760405162461bcd60e51b81526004016200071c9062002fa3565b62000ecc82620019d2565b600082815260046020526040908190205490517fb4dee266a964a14ec5222c3d20532ef944d4254d250ac6422a7b617a41b58c149062000f18908590889088908c908c908890620030a1565b60405180910390a150506001600055505050505050565b60008062000f3d836200149c565b90506000600a8260405162000f53919062002d3c565b908152604080516020928190038301812081830190925290546001600160a01b0381168252600160a01b900460ff1615801592820192909252915062000f9b57519392505050565b5060009392505050565b6002600054141562000fcb5760405162461bcd60e51b81526004016200071c9062002fe7565b60026000556001546040516343b71f0560e01b8152600481018690526001600160a01b03909116906343b71f059060240160206040518083038186803b1580156200101557600080fd5b505afa1580156200102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001050919062002a06565b6200109e5760405162461bcd60e51b815260206004820152601d60248201527f737562636861696e4944206e6f7420796574207265676973746572656400000060448201526064016200071c565b6040516323b872dd60e01b81523360048201523060248201526044810182905283906001600160a01b038216906323b872dd90606401602060405180830381600087803b158015620010ef57600080fd5b505af115801562001104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200112a919062002a06565b506000620011694660405180604001604052806002815260200161032360f41b81525062001163886001600160a01b03166014620019f3565b62001bad565b6000878152600e602090815260408083206001600160a01b038a1684529091529020549091506200119b908462001bf1565b6000878152600e602090815260408083206001600160a01b038a168452909152902055620011c98662001bff565b6000600260008881526020019081526020016000205490507ff43aab118b574ab518eb78e8b4457c7dd4acdd6d6446a2d9cec5c41e98894bbf8783338888886001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200124157600080fd5b505afa15801562001256573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001280919081019062002a63565b896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620012ba57600080fd5b505afa158015620012cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620012f9919081019062002a63565b8a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200133357600080fd5b505afa15801562001348573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200136e919062002cee565b8960405162001386999897969594939291906200301e565b60405180910390a1505060016000555050505050565b6001600160a01b0381166000908152600b60205260408082208151808301909252805460609392919082908290620013d4906200339a565b80601f016020809104026020016040519081016040528092919081815260200182805462001402906200339a565b8015620014535780601f10620014275761010080835404028352916020019162001453565b820191906000526020600020905b8154815290600101906020018083116200143557829003601f168201915b50505091835250506001919091015460ff1615156020918201528101519091501562001480575192915050565b5050604080516020810190915260008152919050565b50919050565b6060620014a98262001c20565b92915050565b600080600080620014c785602f60f81b600262001ca6565b9150915080620014de575060009485945092505050565b600080620014fb87620014f386600162003238565b895162001d42565b9150915080620015145750600096879650945050505050565b6000620015218362001e71565b98600198509650505050505050565b6000620015458686868686600760096200208c565b9695505050505050565b60006200155d828462003311565b9392505050565b60008181526003602052604081208054600192906200158590849062003238565b909155505050565b600080600080620015a585602f60f81b600162001ca6565b9150915080620015bc575060009485945092505050565b600080620015d88782620015d287600162003238565b62001d42565b9150915080620015f15750600096879650945050505050565b600080620015ff84620024ae565b91509150806200161a57506000988998509650505050505050565b50976001975095505050505050565b6000620015458686868686600660086200208c565b60008030905060008560405160200162001659919062002d5a565b60405160208183030381529060405290506000856040516020016200167f919062002de8565b604051602081830303815290604052905060008389848489604051620016a5906200270d565b620016b595949392919062002f02565b604051809103906000f080158015620016d2573d6000803e3d6000fd5b509998505050505050505050565b6000620016ed836200149c565b60405163130d191f60e11b8152909150309063261a323e906200171590849060040162002f68565b60206040518083038186803b1580156200172e57600080fd5b505afa15801562001743573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001769919062002a06565b15620017c35760405162461bcd60e51b815260206004820152602260248201527f616e20766f756368657220636f6e747261637420616c72656164792065786973604482015261747360f01b60648201526084016200071c565b6040805180820182526001600160a01b0384168152600160208201529051600a90620017f190849062002d3c565b90815260408051918290036020908101832084518154958301511515600160a01b026001600160a81b03199096166001600160a01b039182161795909517905582820182528483526001838201529285166000908152600b84522081518051929391926200186392849201906200271b565b506020918201516001918201805460ff1916911515919091179055600c80548083019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319166001600160a01b038616179055600d80549182018155600052825162001904927fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5909201918401906200271b565b50505050565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390528491908216906340c10f19906044015b600060405180830381600087803b1580156200195957600080fd5b505af11580156200196e573d6000803e3d6000fd5b5050505050505050565b60008181526005602052604081208054600192906200158590849062003238565b604051632770a7eb60e21b81526001600160a01b03838116600483015260248201839052849190821690639dc29fac906044016200193e565b60008181526004602052604081208054600192906200158590849062003238565b6060600062001a04836002620032c4565b62001a1190600262003238565b67ffffffffffffffff81111562001a2c5762001a2c62003448565b6040519080825280601f01601f19166020018201604052801562001a57576020820181803683370190505b509050600360fc1b8160008151811062001a755762001a7562003432565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062001aa75762001aa762003432565b60200101906001600160f81b031916908160001a905350600062001acd846002620032c4565b62001ada90600162003238565b90505b600181111562001b5c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062001b125762001b1262003432565b1a60f81b82828151811062001b2b5762001b2b62003432565b60200101906001600160f81b031916908160001a90535060049490941c9362001b548162003380565b905062001add565b5083156200155d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200071c565b606062001be962001bbe8562002596565b848460405160200162001bd49392919062002d88565b6040516020818303038152906040526200149c565b949350505050565b60006200155d828462003238565b60008181526002602052604081208054600192906200158590849062003238565b60608160005b815181101562001c9f5762001c5e82828151811062001c495762001c4962003432565b01602001516001600160f81b031916620026ac565b82828151811062001c735762001c7362003432565b60200101906001600160f81b031916908160001a9053508062001c9681620033d1565b91505062001c26565b5092915050565b82516000908190859082805b8281101562001d2e57876001600160f81b03191684828151811062001cdb5762001cdb62003432565b01602001516001600160f81b031916141562001d195762001cfe60018362003238565b91508682141562001d195794506001935062001d3a92505050565b8062001d2581620033d1565b91505062001cb2565b50600080945094505050505b935093915050565b82516060906000908484101562001d6e5750506040805160208101909152600080825290915062001d3a565b62001d7b8160016200154f565b84111562001d9e5750506040805160208101909152600080825290915062001d3a565b85600062001dad86886200154f565b67ffffffffffffffff81111562001dc85762001dc862003448565b6040519080825280601f01601f19166020018201604052801562001df3576020820181803683370190505b509050865b868110156200161a5782818151811062001e165762001e1662003432565b01602001516001600160f81b0319168262001e32838b6200154f565b8151811062001e455762001e4562003432565b60200101906001600160f81b031916908160001a9053508062001e6881620033d1565b91505062001df8565b60008181808060025b602a811015620020815762001e926101008562003292565b935084818151811062001ea95762001ea962003432565b016020015160f81c92508462001ec182600162003238565b8151811062001ed45762001ed462003432565b016020015160f81c915060616001600160a01b0384161080159062001f0357506066836001600160a01b031611155b1562001f1e5762001f16605784620032e6565b925062001f91565b6041836001600160a01b03161015801562001f4357506046836001600160a01b031611155b1562001f565762001f16603784620032e6565b6030836001600160a01b03161015801562001f7b57506039836001600160a01b031611155b1562001f915762001f8e603084620032e6565b92505b6061826001600160a01b03161015801562001fb657506066826001600160a01b031611155b1562001fd15762001fc9605783620032e6565b915062002044565b6041826001600160a01b03161015801562001ff657506046826001600160a01b031611155b15620020095762001fc9603783620032e6565b6030826001600160a01b0316101580156200202e57506039826001600160a01b031611155b15620020445762002041603083620032e6565b91505b816200205284601062003292565b6200205e91906200320a565b6200206a90856200320a565b93506200207960028262003238565b905062001e7a565b509195945050505050565b600087815260208390526040812054620020a890600162003238565b8514620020b857506000620024a3565b6001546040516343b71f0560e01b8152600481018a90526001600160a01b03909116906343b71f059060240160206040518083038186803b158015620020fd57600080fd5b505afa15801562002112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002138919062002a06565b620021865760405162461bcd60e51b815260206004820152601d60248201527f737562636861696e4944206e6f7420726567697374657265642079657400000060448201526064016200071c565b60008881526020838152604080832089845290915280822060015491516343f27e4560e01b8152600481018c9052602481018b90529091839182916001600160a01b0316906343f27e459060440160006040518083038186803b158015620021ed57600080fd5b505afa15801562002202573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200222c91908101906200292c565b9150915060005b8251811015620023a057886001600160a01b03168382815181106200225c576200225c62003432565b60200260200101516001600160a01b03161462002279576200238b565b6001945060005b60018501548110156200232357846001018181548110620022a557620022a562003432565b6000918252602090912001546001600160a01b038b8116911614156200230e5760405162461bcd60e51b815260206004820152601c60248201527f546869732076616c696461746f7220616c726561647920766f7465640000000060448201526064016200071c565b806200231a81620033d1565b91505062002280565b508b84556001808501805491820181556000908152602090200180546001600160a01b031916331790558151620023859083908390811062002369576200236962003432565b6020026020010151856002015462001bf190919063ffffffff16565b60028501555b806200239781620033d1565b91505062002233565b5083620023e25760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b60448201526064016200071c565b6000805b825181101562002438576200242183828151811062002409576200240962003432565b60200260200101518362001bf190919063ffffffff16565b9150806200242f81620033d1565b915050620023e6565b5062002446816002620026ff565b600285015462002458906003620026ff565b10620024995760008d8152602089905260409020546200247a90600162003238565b60008e815260208a905260409020555060019450620024a39350505050565b6000955050505050505b979650505050505050565b80516000908190839082805b8281101562002589576030848281518110620024da57620024da62003432565b016020015160f81c108015906200250e5750603984828151811062002503576200250362003432565b016020015160f81c11155b1562002565576200252182600a620026ff565b91506200255d60308583815181106200253e576200253e62003432565b016020015162002552919060f81c6200332b565b839060ff1662001bf1565b915062002574565b50600096879650945050505050565b806200258081620033d1565b915050620024ba565b5095600195509350505050565b606081620025bb5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620025eb5780620025d281620033d1565b9150620025e39050600a836200327b565b9150620025bf565b60008167ffffffffffffffff81111562002609576200260962003448565b6040519080825280601f01601f19166020018201604052801562002634576020820181803683370190505b5090505b841562001be9576200264c60018362003311565b91506200265b600a86620033ef565b6200266890603062003238565b60f81b81838151811062002680576200268062003432565b60200101906001600160f81b031916908160001a905350620026a4600a866200327b565b945062002638565b6000604160f81b6001600160f81b0319831610801590620026db5750602d60f91b6001600160f81b0319831611155b15620026fb57620026f260f883901c602062003253565b60f81b92915050565b5090565b60006200155d8284620032c4565b611149806200348883390190565b82805462002729906200339a565b90600052602060002090601f0160209004810192826200274d576000855562002798565b82601f106200276857805160ff191683800117855562002798565b8280016001018555821562002798579182015b82811115620027985782518255916020019190600101906200277b565b50620026fb9291505b80821115620026fb5760008155600101620027a1565b8035620027c4816200345e565b919050565b600082601f830112620027db57600080fd5b81516020620027f4620027ee83620031b8565b62003184565b80838252828201915082860187848660051b89010111156200281557600080fd5b60005b85811015620028365781518452928401929084019060010162002818565b5090979650505050505050565b600082601f8301126200285557600080fd5b813562002866620027ee82620031df565b8181528460208386010111156200287c57600080fd5b816020850160208301376000918101602001919091529392505050565b8035620027c48162003477565b600060208284031215620028b957600080fd5b81356200155d816200345e565b600060208284031215620028d957600080fd5b81516200155d816200345e565b600080600060608486031215620028fc57600080fd5b833562002909816200345e565b925060208401356200291b816200345e565b929592945050506040919091013590565b600080604083850312156200294057600080fd5b825167ffffffffffffffff808211156200295957600080fd5b818501915085601f8301126200296e57600080fd5b8151602062002981620027ee83620031b8565b8083825282820191508286018a848660051b8901011115620029a257600080fd5b600096505b84871015620029d2578051620029bd816200345e565b835260019690960195918301918301620029a7565b5091880151919650909350505080821115620029ed57600080fd5b50620029fc85828601620027c9565b9150509250929050565b60006020828403121562002a1957600080fd5b815180151581146200155d57600080fd5b60006020828403121562002a3d57600080fd5b813567ffffffffffffffff81111562002a5557600080fd5b62001be98482850162002843565b60006020828403121562002a7657600080fd5b815167ffffffffffffffff81111562002a8e57600080fd5b8201601f8101841362002aa057600080fd5b805162002ab1620027ee82620031df565b81815285602083850101111562002ac757600080fd5b62002ada82602083016020860162003351565b95945050505050565b600080600080600080600080610100898b03121562002b0157600080fd5b883567ffffffffffffffff8082111562002b1a57600080fd5b62002b288c838d0162002843565b995060208b013591508082111562002b3f57600080fd5b62002b4d8c838d0162002843565b985060408b013591508082111562002b6457600080fd5b5062002b738b828c0162002843565b96505062002b8460608a0162002899565b945062002b9460808a01620027b7565b979a969950949793969560a0850135955060c08501359460e001359350915050565b60006020828403121562002bc957600080fd5b5035919050565b6000806040838503121562002be457600080fd5b82359150602083013562002bf8816200345e565b809150509250929050565b6000806000806080858703121562002c1a57600080fd5b84359350602085013562002c2e816200345e565b9250604085013562002c40816200345e565b9396929550929360600135925050565b6000806040838503121562002c6457600080fd5b50508035926020909101359150565b60008060008060008060c0878903121562002c8d57600080fd5b86359550602087013567ffffffffffffffff81111562002cac57600080fd5b62002cba89828a0162002843565b955050604087013562002ccd816200345e565b959894975094956060810135955060808101359460a0909101359350915050565b60006020828403121562002d0157600080fd5b81516200155d8162003477565b6000815180845262002d2881602086016020860162003351565b601f01601f19169290920160200192915050565b6000825162002d5081846020870162003351565b9190910192915050565b6000825162002d6e81846020870162003351565b67102b37bab1b432b960c11b920191825250600801919050565b6000845162002d9c81846020890162003351565b8083019050602f60f81b808252855162002dbe816001850160208a0162003351565b6001920191820152835162002ddb81600284016020880162003351565b0160020195945050505050565b603b60f91b81526000825162002e0681600185016020870162003351565b9190910160010192915050565b898152600060208a5162002e2d81838601848f0162003351565b8a519084019062002e4481848401858f0162003351565b8a5191019062002e5a81848401858e0162003351565b60f89990991b6001600160f81b031916980190810197909752505060609390931b6bffffffffffffffffffffffff19166021850152603584019190915260558301526075820152609501949350505050565b8681526000865162002ec6816020850160208b0162003351565b602092019182019590955260609390931b6bffffffffffffffffffffffff19166040840152605483019190915260748201526094019392505050565b6001600160a01b038616815260a06020820181905260009062002f289083018762002d0e565b828103604084015262002f3c818762002d0e565b9050828103606084015262002f52818662002d0e565b91505060ff831660808301529695505050505050565b6020815260006200155d602083018462002d0e565b60408152600062002f92604083018562002d0e565b905082151560208301529392505050565b60208082526024908201527f4661696c656420746f206578747261637420636861696e49442066726f6d2064604082015263656e6f6d60e01b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006101208b83528060208401526200303a8184018c62002d0e565b6001600160a01b038b811660408601528a1660608501526080840189905283810360a085015290506200306e818862002d0e565b905082810360c084015262003084818762002d0e565b60ff9590951660e084015250506101000152979650505050505050565b86815260c060208201526000620030bc60c083018862002d0e565b6001600160a01b039687166040840152949095166060820152608081019290925260a0909101529392505050565b87815260e0602082015260006200310560e083018962002d0e565b6001600160a01b039788166040840152959096166060820152608081019390935260a083019190915260c0909101529392505050565b86815260c0602082015260006200315660c083018862002d0e565b6001600160a01b03969096166040830152506060810193909352608083019190915260a09091015292915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715620031b057620031b062003448565b604052919050565b600067ffffffffffffffff821115620031d557620031d562003448565b5060051b60200190565b600067ffffffffffffffff821115620031fc57620031fc62003448565b50601f01601f191660200190565b60006001600160a01b038281168482168083038211156200322f576200322f62003406565b01949350505050565b600082198211156200324e576200324e62003406565b500190565b600060ff821660ff84168060ff0382111562003273576200327362003406565b019392505050565b6000826200328d576200328d6200341c565b500490565b60006001600160a01b0382811684821681151582840482111615620032bb57620032bb62003406565b02949350505050565b6000816000190483118215151615620032e157620032e162003406565b500290565b60006001600160a01b038381169083168181101562003309576200330962003406565b039392505050565b60008282101562003326576200332662003406565b500390565b600060ff821660ff84168082101562003348576200334862003406565b90039392505050565b60005b838110156200336e57818101518382015260200162003354565b83811115620019045750506000910152565b60008162003392576200339262003406565b506000190190565b600181811c90821680620033af57607f821691505b602082108114156200149657634e487b7160e01b600052602260045260246000fd5b6000600019821415620033e857620033e862003406565b5060010190565b6000826200340157620034016200341c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200347457600080fd5b50565b60ff811681146200347457600080fdfe60806040523480156200001157600080fd5b50604051620011493803806200114983398101604081905262000034916200021b565b84838381600390805190602001906200004f929190620000be565b50805162000065906004906020840190620000be565b5050600580546001600160a01b0319166001600160a01b0393909316929092179091555083516200009e906006906020870190620000be565b506007805460ff191660ff92909216919091179055506200033c92505050565b828054620000cc90620002e9565b90600052602060002090601f016020900481019282620000f057600085556200013b565b82601f106200010b57805160ff19168380011785556200013b565b828001600101855582156200013b579182015b828111156200013b5782518255916020019190600101906200011e565b50620001499291506200014d565b5090565b5b808211156200014957600081556001016200014e565b600082601f8301126200017657600080fd5b81516001600160401b038082111562000193576200019362000326565b604051601f8301601f19908116603f01168101908282118183101715620001be57620001be62000326565b81604052838152602092508683858801011115620001db57600080fd5b600091505b83821015620001ff5785820183015181830184015290820190620001e0565b83821115620002115760008385830101525b9695505050505050565b600080600080600060a086880312156200023457600080fd5b85516001600160a01b03811681146200024c57600080fd5b60208701519095506001600160401b03808211156200026a57600080fd5b6200027889838a0162000164565b955060408801519150808211156200028f57600080fd5b6200029d89838a0162000164565b94506060880151915080821115620002b457600080fd5b50620002c38882890162000164565b925050608086015160ff81168114620002db57600080fd5b809150509295509295909350565b600181811c90821680620002fe57607f821691505b602082108114156200032057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610dfd806200034c6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063880cdc3111610097578063a457c2d711610066578063a457c2d71461022a578063a9059cbb1461023d578063c370b04214610250578063dd62ed3e1461025857600080fd5b8063880cdc31146101d15780638da5cb5b146101e457806395d89b411461020f5780639dc29fac1461021757600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461018057806340c10f191461019357806370a08231146101a857600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d61026b565b60405161011a9190610cbb565b60405180910390f35b610136610131366004610c91565b6102fd565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610c55565b610315565b60075460405160ff909116815260200161011a565b61013661018e366004610c91565b610339565b6101a66101a1366004610c91565b61035b565b005b61014a6101b6366004610c00565b6001600160a01b031660009081526020819052604090205490565b6101a66101df366004610c00565b61039c565b6005546101f7906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b61010d61042f565b6101a6610225366004610c91565b61043e565b610136610238366004610c91565b61058f565b61013661024b366004610c91565b61060a565b61010d610618565b61014a610266366004610c22565b610627565b60606003805461027a90610d76565b80601f01602080910402602001604051908101604052809291908181526020018280546102a690610d76565b80156102f35780601f106102c8576101008083540402835291602001916102f3565b820191906000526020600020905b8154815290600101906020018083116102d657829003601f168201915b5050505050905090565b60003361030b818585610652565b5060019392505050565b600033610323858285610777565b61032e8585856107f1565b506001949350505050565b60003361030b81858561034c8383610627565b6103569190610d47565b610652565b6005546001600160a01b0316331461038e5760405162461bcd60e51b815260040161038590610d10565b60405180910390fd5b61039882826109bf565b5050565b6005546001600160a01b031633146103c65760405162461bcd60e51b815260040161038590610d10565b600554604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b60606004805461027a90610d76565b6005546001600160a01b031633146104685760405162461bcd60e51b815260040161038590610d10565b6001600160a01b038216600090815260208190526040902054818110156104ec5760405162461bcd60e51b815260206004820152603260248201527f566f7563686572206f776e657220646f6573206e6f74206861766520656e6f7560448201527133b4103130b630b731b2903a3790313ab93760711b6064820152608401610385565b6005546001600160a01b031660006105048583610627565b9050838110156105735760405162461bcd60e51b815260206004820152603460248201527f566f7563686572206f776e657220646964206e6f7420617070726f76656420656044820152733737bab3b41030b6b7bab73a103a3790313ab93760611b6064820152608401610385565b61057e858386610777565b6105888585610a9e565b5050505050565b6000338161059d8286610627565b9050838110156105fd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610385565b61032e8286868403610652565b60003361030b8185856107f1565b60606006805461027a90610d76565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166106b45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610385565b6001600160a01b0382166107155760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610385565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006107838484610627565b905060001981146107eb57818110156107de5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610385565b6107eb8484848403610652565b50505050565b6001600160a01b0383166108555760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610385565b6001600160a01b0382166108b75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610385565b6001600160a01b0383166000908152602081905260409020548181101561092f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610385565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610966908490610d47565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109b291815260200190565b60405180910390a36107eb565b6001600160a01b038216610a155760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610385565b8060026000828254610a279190610d47565b90915550506001600160a01b03821660009081526020819052604081208054839290610a54908490610d47565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610afe5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610385565b6001600160a01b03821660009081526020819052604090205481811015610b725760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610385565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610ba1908490610d5f565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161076a565b80356001600160a01b0381168114610bfb57600080fd5b919050565b600060208284031215610c1257600080fd5b610c1b82610be4565b9392505050565b60008060408385031215610c3557600080fd5b610c3e83610be4565b9150610c4c60208401610be4565b90509250929050565b600080600060608486031215610c6a57600080fd5b610c7384610be4565b9250610c8160208501610be4565b9150604084013590509250925092565b60008060408385031215610ca457600080fd5b610cad83610be4565b946020939093013593505050565b600060208083528351808285015260005b81811015610ce857858101830151858201604001528201610ccc565b81811115610cfa576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b60008219821115610d5a57610d5a610db1565b500190565b600082821015610d7157610d71610db1565b500390565b600181811c90821680610d8a57607f821691505b60208210811415610dab57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212200360d50029cbccfd9aba962ef8d9e0c71eceef8fb4f2936beb794265938056b064736f6c63430008070033a264697066735822122092d62ca0c9a8549bed93b0bced612b85c0ec9adda7b4b827b89fb427873d0fe564736f6c63430008070033",
}

// MainchainTNT20TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use MainchainTNT20TokenBankMetaData.ABI instead.
var MainchainTNT20TokenBankABI = MainchainTNT20TokenBankMetaData.ABI

// MainchainTNT20TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MainchainTNT20TokenBankMetaData.Bin instead.
var MainchainTNT20TokenBankBin = MainchainTNT20TokenBankMetaData.Bin

// DeployMainchainTNT20TokenBank deploys a new Ethereum contract, binding an instance of MainchainTNT20TokenBank to it.
func DeployMainchainTNT20TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, subchainregistrar_ common.Address) (common.Address, *types.Transaction, *MainchainTNT20TokenBank, error) {
	parsed, err := MainchainTNT20TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MainchainTNT20TokenBankBin), backend, subchainregistrar_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MainchainTNT20TokenBank{MainchainTNT20TokenBankCaller: MainchainTNT20TokenBankCaller{contract: contract}, MainchainTNT20TokenBankTransactor: MainchainTNT20TokenBankTransactor{contract: contract}, MainchainTNT20TokenBankFilterer: MainchainTNT20TokenBankFilterer{contract: contract}}, nil
}

// MainchainTNT20TokenBank is an auto generated Go binding around an Ethereum contract.
type MainchainTNT20TokenBank struct {
	MainchainTNT20TokenBankCaller     // Read-only binding to the contract
	MainchainTNT20TokenBankTransactor // Write-only binding to the contract
	MainchainTNT20TokenBankFilterer   // Log filterer for contract events
}

// MainchainTNT20TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type MainchainTNT20TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainchainTNT20TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MainchainTNT20TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainchainTNT20TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MainchainTNT20TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainchainTNT20TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MainchainTNT20TokenBankSession struct {
	Contract     *MainchainTNT20TokenBank // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MainchainTNT20TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MainchainTNT20TokenBankCallerSession struct {
	Contract *MainchainTNT20TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// MainchainTNT20TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MainchainTNT20TokenBankTransactorSession struct {
	Contract     *MainchainTNT20TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// MainchainTNT20TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type MainchainTNT20TokenBankRaw struct {
	Contract *MainchainTNT20TokenBank // Generic contract binding to access the raw methods on
}

// MainchainTNT20TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MainchainTNT20TokenBankCallerRaw struct {
	Contract *MainchainTNT20TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// MainchainTNT20TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MainchainTNT20TokenBankTransactorRaw struct {
	Contract *MainchainTNT20TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMainchainTNT20TokenBank creates a new instance of MainchainTNT20TokenBank, bound to a specific deployed contract.
func NewMainchainTNT20TokenBank(address common.Address, backend bind.ContractBackend) (*MainchainTNT20TokenBank, error) {
	contract, err := bindMainchainTNT20TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MainchainTNT20TokenBank{MainchainTNT20TokenBankCaller: MainchainTNT20TokenBankCaller{contract: contract}, MainchainTNT20TokenBankTransactor: MainchainTNT20TokenBankTransactor{contract: contract}, MainchainTNT20TokenBankFilterer: MainchainTNT20TokenBankFilterer{contract: contract}}, nil
}

// NewMainchainTNT20TokenBankCaller creates a new read-only instance of MainchainTNT20TokenBank, bound to a specific deployed contract.
func NewMainchainTNT20TokenBankCaller(address common.Address, caller bind.ContractCaller) (*MainchainTNT20TokenBankCaller, error) {
	contract, err := bindMainchainTNT20TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MainchainTNT20TokenBankCaller{contract: contract}, nil
}

// NewMainchainTNT20TokenBankTransactor creates a new write-only instance of MainchainTNT20TokenBank, bound to a specific deployed contract.
func NewMainchainTNT20TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*MainchainTNT20TokenBankTransactor, error) {
	contract, err := bindMainchainTNT20TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MainchainTNT20TokenBankTransactor{contract: contract}, nil
}

// NewMainchainTNT20TokenBankFilterer creates a new log filterer instance of MainchainTNT20TokenBank, bound to a specific deployed contract.
func NewMainchainTNT20TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*MainchainTNT20TokenBankFilterer, error) {
	contract, err := bindMainchainTNT20TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MainchainTNT20TokenBankFilterer{contract: contract}, nil
}

// bindMainchainTNT20TokenBank binds a generic wrapper to an already deployed contract.
func bindMainchainTNT20TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MainchainTNT20TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MainchainTNT20TokenBank.Contract.MainchainTNT20TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.MainchainTNT20TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.MainchainTNT20TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MainchainTNT20TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.contract.Transact(opts, method, params...)
}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Alldenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "alldenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Alldenoms(arg0 *big.Int) (string, error) {
	return _MainchainTNT20TokenBank.Contract.Alldenoms(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Alldenoms is a free data retrieval call binding the contract method 0xbc15cedc.
//
// Solidity: function alldenoms(uint256 ) view returns(string)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Alldenoms(arg0 *big.Int) (string, error) {
	return _MainchainTNT20TokenBank.Contract.Alldenoms(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Allvouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "allvouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Allvouchers(arg0 *big.Int) (common.Address, error) {
	return _MainchainTNT20TokenBank.Contract.Allvouchers(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Allvouchers is a free data retrieval call binding the contract method 0x11418b8e.
//
// Solidity: function allvouchers(uint256 ) view returns(address)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Allvouchers(arg0 *big.Int) (common.Address, error) {
	return _MainchainTNT20TokenBank.Contract.Allvouchers(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Denomtovoucherlookup(opts *bind.CallOpts, arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "denomtovoucherlookup", arg0)

	outstruct := new(struct {
		Contractaddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Contractaddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Denomtovoucherlookup(arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	return _MainchainTNT20TokenBank.Contract.Denomtovoucherlookup(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Denomtovoucherlookup is a free data retrieval call binding the contract method 0x4c68012b.
//
// Solidity: function denomtovoucherlookup(string ) view returns(address contractaddress, bool exists)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Denomtovoucherlookup(arg0 string) (struct {
	Contractaddress common.Address
	Exists          bool
}, error) {
	return _MainchainTNT20TokenBank.Contract.Denomtovoucherlookup(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Exists(denom string) (bool, error) {
	return _MainchainTNT20TokenBank.Contract.Exists(&_MainchainTNT20TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _MainchainTNT20TokenBank.Contract.Exists(&_MainchainTNT20TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Exists0(opts *bind.CallOpts, voucheraddress common.Address) (bool, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "exists0", voucheraddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Exists0(voucheraddress common.Address) (bool, error) {
	return _MainchainTNT20TokenBank.Contract.Exists0(&_MainchainTNT20TokenBank.CallOpts, voucheraddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucheraddress) view returns(bool)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Exists0(voucheraddress common.Address) (bool, error) {
	return _MainchainTNT20TokenBank.Contract.Exists0(&_MainchainTNT20TokenBank.CallOpts, voucheraddress)
}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Getdenom(opts *bind.CallOpts, vouchercontractaddr common.Address) (string, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "getdenom", vouchercontractaddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Getdenom(vouchercontractaddr common.Address) (string, error) {
	return _MainchainTNT20TokenBank.Contract.Getdenom(&_MainchainTNT20TokenBank.CallOpts, vouchercontractaddr)
}

// Getdenom is a free data retrieval call binding the contract method 0xaf46078f.
//
// Solidity: function getdenom(address vouchercontractaddr) view returns(string)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Getdenom(vouchercontractaddr common.Address) (string, error) {
	return _MainchainTNT20TokenBank.Contract.Getdenom(&_MainchainTNT20TokenBank.CallOpts, vouchercontractaddr)
}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Getvoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "getvoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Getvoucher(denom string) (common.Address, error) {
	return _MainchainTNT20TokenBank.Contract.Getvoucher(&_MainchainTNT20TokenBank.CallOpts, denom)
}

// Getvoucher is a free data retrieval call binding the contract method 0xd2990e7d.
//
// Solidity: function getvoucher(string denom) view returns(address)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Getvoucher(denom string) (common.Address, error) {
	return _MainchainTNT20TokenBank.Contract.Getvoucher(&_MainchainTNT20TokenBank.CallOpts, denom)
}

// Tokenlocknonceonsubchain is a free data retrieval call binding the contract method 0x3bf4ecc2.
//
// Solidity: function tokenlocknonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Tokenlocknonceonsubchain(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "tokenlocknonceonsubchain", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Tokenlocknonceonsubchain is a free data retrieval call binding the contract method 0x3bf4ecc2.
//
// Solidity: function tokenlocknonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Tokenlocknonceonsubchain(arg0 *big.Int) (*big.Int, error) {
	return _MainchainTNT20TokenBank.Contract.Tokenlocknonceonsubchain(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Tokenlocknonceonsubchain is a free data retrieval call binding the contract method 0x3bf4ecc2.
//
// Solidity: function tokenlocknonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Tokenlocknonceonsubchain(arg0 *big.Int) (*big.Int, error) {
	return _MainchainTNT20TokenBank.Contract.Tokenlocknonceonsubchain(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Tokenlockvotingrecords is a free data retrieval call binding the contract method 0x1b637e32.
//
// Solidity: function tokenlockvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Tokenlockvotingrecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "tokenlockvotingrecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		Accumlatedshares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Accumlatedshares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Tokenlockvotingrecords is a free data retrieval call binding the contract method 0x1b637e32.
//
// Solidity: function tokenlockvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Tokenlockvotingrecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	return _MainchainTNT20TokenBank.Contract.Tokenlockvotingrecords(&_MainchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// Tokenlockvotingrecords is a free data retrieval call binding the contract method 0x1b637e32.
//
// Solidity: function tokenlockvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Tokenlockvotingrecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	return _MainchainTNT20TokenBank.Contract.Tokenlockvotingrecords(&_MainchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// Tokenunlocknonceonsubchain is a free data retrieval call binding the contract method 0xbfbf56c4.
//
// Solidity: function tokenunlocknonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Tokenunlocknonceonsubchain(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "tokenunlocknonceonsubchain", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Tokenunlocknonceonsubchain is a free data retrieval call binding the contract method 0xbfbf56c4.
//
// Solidity: function tokenunlocknonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Tokenunlocknonceonsubchain(arg0 *big.Int) (*big.Int, error) {
	return _MainchainTNT20TokenBank.Contract.Tokenunlocknonceonsubchain(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Tokenunlocknonceonsubchain is a free data retrieval call binding the contract method 0xbfbf56c4.
//
// Solidity: function tokenunlocknonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Tokenunlocknonceonsubchain(arg0 *big.Int) (*big.Int, error) {
	return _MainchainTNT20TokenBank.Contract.Tokenunlocknonceonsubchain(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Totallockedamounts is a free data retrieval call binding the contract method 0x103ad5cb.
//
// Solidity: function totallockedamounts(uint256 , address ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Totallockedamounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "totallockedamounts", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Totallockedamounts is a free data retrieval call binding the contract method 0x103ad5cb.
//
// Solidity: function totallockedamounts(uint256 , address ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Totallockedamounts(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _MainchainTNT20TokenBank.Contract.Totallockedamounts(&_MainchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// Totallockedamounts is a free data retrieval call binding the contract method 0x103ad5cb.
//
// Solidity: function totallockedamounts(uint256 , address ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Totallockedamounts(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _MainchainTNT20TokenBank.Contract.Totallockedamounts(&_MainchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Voucheraddresstodenomlookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "voucheraddresstodenomlookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Voucheraddresstodenomlookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _MainchainTNT20TokenBank.Contract.Voucheraddresstodenomlookup(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Voucheraddresstodenomlookup is a free data retrieval call binding the contract method 0xcd22e450.
//
// Solidity: function voucheraddresstodenomlookup(address ) view returns(string denom, bool exists)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Voucheraddresstodenomlookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _MainchainTNT20TokenBank.Contract.Voucheraddresstodenomlookup(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Voucherburnnonceonsubchain is a free data retrieval call binding the contract method 0x6bb4e464.
//
// Solidity: function voucherburnnonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Voucherburnnonceonsubchain(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "voucherburnnonceonsubchain", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Voucherburnnonceonsubchain is a free data retrieval call binding the contract method 0x6bb4e464.
//
// Solidity: function voucherburnnonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Voucherburnnonceonsubchain(arg0 *big.Int) (*big.Int, error) {
	return _MainchainTNT20TokenBank.Contract.Voucherburnnonceonsubchain(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Voucherburnnonceonsubchain is a free data retrieval call binding the contract method 0x6bb4e464.
//
// Solidity: function voucherburnnonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Voucherburnnonceonsubchain(arg0 *big.Int) (*big.Int, error) {
	return _MainchainTNT20TokenBank.Contract.Voucherburnnonceonsubchain(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Voucherburnvotingrecords is a free data retrieval call binding the contract method 0x147ea516.
//
// Solidity: function voucherburnvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Voucherburnvotingrecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "voucherburnvotingrecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		Accumlatedshares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Accumlatedshares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Voucherburnvotingrecords is a free data retrieval call binding the contract method 0x147ea516.
//
// Solidity: function voucherburnvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Voucherburnvotingrecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	return _MainchainTNT20TokenBank.Contract.Voucherburnvotingrecords(&_MainchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// Voucherburnvotingrecords is a free data retrieval call binding the contract method 0x147ea516.
//
// Solidity: function voucherburnvotingrecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedshares)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Voucherburnvotingrecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	Accumlatedshares *big.Int
}, error) {
	return _MainchainTNT20TokenBank.Contract.Voucherburnvotingrecords(&_MainchainTNT20TokenBank.CallOpts, arg0, arg1)
}

// Vouchermintnonceonsubchain is a free data retrieval call binding the contract method 0x35cccd8c.
//
// Solidity: function vouchermintnonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCaller) Vouchermintnonceonsubchain(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MainchainTNT20TokenBank.contract.Call(opts, &out, "vouchermintnonceonsubchain", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Vouchermintnonceonsubchain is a free data retrieval call binding the contract method 0x35cccd8c.
//
// Solidity: function vouchermintnonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Vouchermintnonceonsubchain(arg0 *big.Int) (*big.Int, error) {
	return _MainchainTNT20TokenBank.Contract.Vouchermintnonceonsubchain(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Vouchermintnonceonsubchain is a free data retrieval call binding the contract method 0x35cccd8c.
//
// Solidity: function vouchermintnonceonsubchain(uint256 ) view returns(uint256)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankCallerSession) Vouchermintnonceonsubchain(arg0 *big.Int) (*big.Int, error) {
	return _MainchainTNT20TokenBank.Contract.Vouchermintnonceonsubchain(&_MainchainTNT20TokenBank.CallOpts, arg0)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address vouchercontractaddr, address subchaintokenreceiver, uint256 burnamount) payable returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankTransactor) Burnvouchers(opts *bind.TransactOpts, vouchercontractaddr common.Address, subchaintokenreceiver common.Address, burnamount *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.contract.Transact(opts, "burnvouchers", vouchercontractaddr, subchaintokenreceiver, burnamount)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address vouchercontractaddr, address subchaintokenreceiver, uint256 burnamount) payable returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Burnvouchers(vouchercontractaddr common.Address, subchaintokenreceiver common.Address, burnamount *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.Burnvouchers(&_MainchainTNT20TokenBank.TransactOpts, vouchercontractaddr, subchaintokenreceiver, burnamount)
}

// Burnvouchers is a paid mutator transaction binding the contract method 0xb58c1d12.
//
// Solidity: function burnvouchers(address vouchercontractaddr, address subchaintokenreceiver, uint256 burnamount) payable returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankTransactorSession) Burnvouchers(vouchercontractaddr common.Address, subchaintokenreceiver common.Address, burnamount *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.Burnvouchers(&_MainchainTNT20TokenBank.TransactOpts, vouchercontractaddr, subchaintokenreceiver, burnamount)
}

// Locktokens is a paid mutator transaction binding the contract method 0x2d9b0fd5.
//
// Solidity: function locktokens(uint256 subchainid, address tnt20contract, address subchainvoucherreceiver, uint256 lockamount) payable returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankTransactor) Locktokens(opts *bind.TransactOpts, subchainid *big.Int, tnt20contract common.Address, subchainvoucherreceiver common.Address, lockamount *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.contract.Transact(opts, "locktokens", subchainid, tnt20contract, subchainvoucherreceiver, lockamount)
}

// Locktokens is a paid mutator transaction binding the contract method 0x2d9b0fd5.
//
// Solidity: function locktokens(uint256 subchainid, address tnt20contract, address subchainvoucherreceiver, uint256 lockamount) payable returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Locktokens(subchainid *big.Int, tnt20contract common.Address, subchainvoucherreceiver common.Address, lockamount *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.Locktokens(&_MainchainTNT20TokenBank.TransactOpts, subchainid, tnt20contract, subchainvoucherreceiver, lockamount)
}

// Locktokens is a paid mutator transaction binding the contract method 0x2d9b0fd5.
//
// Solidity: function locktokens(uint256 subchainid, address tnt20contract, address subchainvoucherreceiver, uint256 lockamount) payable returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankTransactorSession) Locktokens(subchainid *big.Int, tnt20contract common.Address, subchainvoucherreceiver common.Address, lockamount *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.Locktokens(&_MainchainTNT20TokenBank.TransactOpts, subchainid, tnt20contract, subchainvoucherreceiver, lockamount)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0x472d8586.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, uint8 decimals, address mainchainvoucherreceiver, uint256 mintamount, uint256 dynasty, uint256 subchaintokenlocknonce) returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankTransactor) Mintvouchers(opts *bind.TransactOpts, denom string, name string, symbol string, decimals uint8, mainchainvoucherreceiver common.Address, mintamount *big.Int, dynasty *big.Int, subchaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.contract.Transact(opts, "mintvouchers", denom, name, symbol, decimals, mainchainvoucherreceiver, mintamount, dynasty, subchaintokenlocknonce)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0x472d8586.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, uint8 decimals, address mainchainvoucherreceiver, uint256 mintamount, uint256 dynasty, uint256 subchaintokenlocknonce) returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Mintvouchers(denom string, name string, symbol string, decimals uint8, mainchainvoucherreceiver common.Address, mintamount *big.Int, dynasty *big.Int, subchaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.Mintvouchers(&_MainchainTNT20TokenBank.TransactOpts, denom, name, symbol, decimals, mainchainvoucherreceiver, mintamount, dynasty, subchaintokenlocknonce)
}

// Mintvouchers is a paid mutator transaction binding the contract method 0x472d8586.
//
// Solidity: function mintvouchers(string denom, string name, string symbol, uint8 decimals, address mainchainvoucherreceiver, uint256 mintamount, uint256 dynasty, uint256 subchaintokenlocknonce) returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankTransactorSession) Mintvouchers(denom string, name string, symbol string, decimals uint8, mainchainvoucherreceiver common.Address, mintamount *big.Int, dynasty *big.Int, subchaintokenlocknonce *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.Mintvouchers(&_MainchainTNT20TokenBank.TransactOpts, denom, name, symbol, decimals, mainchainvoucherreceiver, mintamount, dynasty, subchaintokenlocknonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0xd072dc3f.
//
// Solidity: function unlocktokens(uint256 subchainid, string denom, address mainchaintokenreceiver, uint256 unlockamount, uint256 dynasty, uint256 subchainvoucherburnnonce) payable returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankTransactor) Unlocktokens(opts *bind.TransactOpts, subchainid *big.Int, denom string, mainchaintokenreceiver common.Address, unlockamount *big.Int, dynasty *big.Int, subchainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.contract.Transact(opts, "unlocktokens", subchainid, denom, mainchaintokenreceiver, unlockamount, dynasty, subchainvoucherburnnonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0xd072dc3f.
//
// Solidity: function unlocktokens(uint256 subchainid, string denom, address mainchaintokenreceiver, uint256 unlockamount, uint256 dynasty, uint256 subchainvoucherburnnonce) payable returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankSession) Unlocktokens(subchainid *big.Int, denom string, mainchaintokenreceiver common.Address, unlockamount *big.Int, dynasty *big.Int, subchainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.Unlocktokens(&_MainchainTNT20TokenBank.TransactOpts, subchainid, denom, mainchaintokenreceiver, unlockamount, dynasty, subchainvoucherburnnonce)
}

// Unlocktokens is a paid mutator transaction binding the contract method 0xd072dc3f.
//
// Solidity: function unlocktokens(uint256 subchainid, string denom, address mainchaintokenreceiver, uint256 unlockamount, uint256 dynasty, uint256 subchainvoucherburnnonce) payable returns()
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankTransactorSession) Unlocktokens(subchainid *big.Int, denom string, mainchaintokenreceiver common.Address, unlockamount *big.Int, dynasty *big.Int, subchainvoucherburnnonce *big.Int) (*types.Transaction, error) {
	return _MainchainTNT20TokenBank.Contract.Unlocktokens(&_MainchainTNT20TokenBank.TransactOpts, subchainid, denom, mainchaintokenreceiver, unlockamount, dynasty, subchainvoucherburnnonce)
}

// MainchainTNT20TokenBankTnt20tokenlockedIterator is returned from FilterTnt20tokenlocked and is used to iterate over the raw logs and unpacked data for Tnt20tokenlocked events raised by the MainchainTNT20TokenBank contract.
type MainchainTNT20TokenBankTnt20tokenlockedIterator struct {
	Event *MainchainTNT20TokenBankTnt20tokenlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainTNT20TokenBankTnt20tokenlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainTNT20TokenBankTnt20tokenlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainTNT20TokenBankTnt20tokenlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainTNT20TokenBankTnt20tokenlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainTNT20TokenBankTnt20tokenlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainTNT20TokenBankTnt20tokenlocked represents a Tnt20tokenlocked event raised by the MainchainTNT20TokenBank contract.
type MainchainTNT20TokenBankTnt20tokenlocked struct {
	Subchainid              *big.Int
	Denom                   string
	Mainchaintokensender    common.Address
	Subchainvoucherreceiver common.Address
	Lockedamount            *big.Int
	Name                    string
	Symbol                  string
	Decimal                 uint8
	Tokenlocknonce          *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterTnt20tokenlocked is a free log retrieval operation binding the contract event 0x1a0211bff6db2a1434e0d06d6ce0f2976830800150a3183599ea6850b613107a.
//
// Solidity: event tnt20tokenlocked(uint256 subchainid, string denom, address mainchaintokensender, address subchainvoucherreceiver, uint256 lockedamount, string name, string symbol, uint8 decimal, uint256 tokenlocknonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) FilterTnt20tokenlocked(opts *bind.FilterOpts) (*MainchainTNT20TokenBankTnt20tokenlockedIterator, error) {

	logs, sub, err := _MainchainTNT20TokenBank.contract.FilterLogs(opts, "tnt20tokenlocked")
	if err != nil {
		return nil, err
	}
	return &MainchainTNT20TokenBankTnt20tokenlockedIterator{contract: _MainchainTNT20TokenBank.contract, event: "tnt20tokenlocked", logs: logs, sub: sub}, nil
}

// WatchTnt20tokenlocked is a free log subscription operation binding the contract event 0x1a0211bff6db2a1434e0d06d6ce0f2976830800150a3183599ea6850b613107a.
//
// Solidity: event tnt20tokenlocked(uint256 subchainid, string denom, address mainchaintokensender, address subchainvoucherreceiver, uint256 lockedamount, string name, string symbol, uint8 decimal, uint256 tokenlocknonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) WatchTnt20tokenlocked(opts *bind.WatchOpts, sink chan<- *MainchainTNT20TokenBankTnt20tokenlocked) (event.Subscription, error) {

	logs, sub, err := _MainchainTNT20TokenBank.contract.WatchLogs(opts, "tnt20tokenlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainTNT20TokenBankTnt20tokenlocked)
				if err := _MainchainTNT20TokenBank.contract.UnpackLog(event, "tnt20tokenlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt20tokenlocked is a log parse operation binding the contract event 0x1a0211bff6db2a1434e0d06d6ce0f2976830800150a3183599ea6850b613107a.
//
// Solidity: event tnt20tokenlocked(uint256 subchainid, string denom, address mainchaintokensender, address subchainvoucherreceiver, uint256 lockedamount, string name, string symbol, uint8 decimal, uint256 tokenlocknonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) ParseTnt20tokenlocked(log types.Log) (*MainchainTNT20TokenBankTnt20tokenlocked, error) {
	event := new(MainchainTNT20TokenBankTnt20tokenlocked)
	if err := _MainchainTNT20TokenBank.contract.UnpackLog(event, "tnt20tokenlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainTNT20TokenBankTnt20tokenunlockedIterator is returned from FilterTnt20tokenunlocked and is used to iterate over the raw logs and unpacked data for Tnt20tokenunlocked events raised by the MainchainTNT20TokenBank contract.
type MainchainTNT20TokenBankTnt20tokenunlockedIterator struct {
	Event *MainchainTNT20TokenBankTnt20tokenunlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainTNT20TokenBankTnt20tokenunlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainTNT20TokenBankTnt20tokenunlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainTNT20TokenBankTnt20tokenunlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainTNT20TokenBankTnt20tokenunlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainTNT20TokenBankTnt20tokenunlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainTNT20TokenBankTnt20tokenunlocked represents a Tnt20tokenunlocked event raised by the MainchainTNT20TokenBank contract.
type MainchainTNT20TokenBankTnt20tokenunlocked struct {
	Subchainid               *big.Int
	Denom                    string
	Mainchaintokenreceiver   common.Address
	Unlockedamount           *big.Int
	Subchainvoucherburnnonce *big.Int
	Tokenunlocknonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTnt20tokenunlocked is a free log retrieval operation binding the contract event 0xa41b1a95cf859b0e61aafed665b1964e7d86104fd4ac1518cf3ffcdeba6ee0ca.
//
// Solidity: event tnt20tokenunlocked(uint256 subchainid, string denom, address mainchaintokenreceiver, uint256 unlockedamount, uint256 subchainvoucherburnnonce, uint256 tokenunlocknonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) FilterTnt20tokenunlocked(opts *bind.FilterOpts) (*MainchainTNT20TokenBankTnt20tokenunlockedIterator, error) {

	logs, sub, err := _MainchainTNT20TokenBank.contract.FilterLogs(opts, "tnt20tokenunlocked")
	if err != nil {
		return nil, err
	}
	return &MainchainTNT20TokenBankTnt20tokenunlockedIterator{contract: _MainchainTNT20TokenBank.contract, event: "tnt20tokenunlocked", logs: logs, sub: sub}, nil
}

// WatchTnt20tokenunlocked is a free log subscription operation binding the contract event 0xa41b1a95cf859b0e61aafed665b1964e7d86104fd4ac1518cf3ffcdeba6ee0ca.
//
// Solidity: event tnt20tokenunlocked(uint256 subchainid, string denom, address mainchaintokenreceiver, uint256 unlockedamount, uint256 subchainvoucherburnnonce, uint256 tokenunlocknonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) WatchTnt20tokenunlocked(opts *bind.WatchOpts, sink chan<- *MainchainTNT20TokenBankTnt20tokenunlocked) (event.Subscription, error) {

	logs, sub, err := _MainchainTNT20TokenBank.contract.WatchLogs(opts, "tnt20tokenunlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainTNT20TokenBankTnt20tokenunlocked)
				if err := _MainchainTNT20TokenBank.contract.UnpackLog(event, "tnt20tokenunlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt20tokenunlocked is a log parse operation binding the contract event 0xa41b1a95cf859b0e61aafed665b1964e7d86104fd4ac1518cf3ffcdeba6ee0ca.
//
// Solidity: event tnt20tokenunlocked(uint256 subchainid, string denom, address mainchaintokenreceiver, uint256 unlockedamount, uint256 subchainvoucherburnnonce, uint256 tokenunlocknonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) ParseTnt20tokenunlocked(log types.Log) (*MainchainTNT20TokenBankTnt20tokenunlocked, error) {
	event := new(MainchainTNT20TokenBankTnt20tokenunlocked)
	if err := _MainchainTNT20TokenBank.contract.UnpackLog(event, "tnt20tokenunlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainTNT20TokenBankTnt20voucherburnedIterator is returned from FilterTnt20voucherburned and is used to iterate over the raw logs and unpacked data for Tnt20voucherburned events raised by the MainchainTNT20TokenBank contract.
type MainchainTNT20TokenBankTnt20voucherburnedIterator struct {
	Event *MainchainTNT20TokenBankTnt20voucherburned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainTNT20TokenBankTnt20voucherburnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainTNT20TokenBankTnt20voucherburned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainTNT20TokenBankTnt20voucherburned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainTNT20TokenBankTnt20voucherburnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainTNT20TokenBankTnt20voucherburnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainTNT20TokenBankTnt20voucherburned represents a Tnt20voucherburned event raised by the MainchainTNT20TokenBank contract.
type MainchainTNT20TokenBankTnt20voucherburned struct {
	Subchainid            *big.Int
	Denom                 string
	Mainchainvoucherowner common.Address
	Subchaintokenreceiver common.Address
	Burnamount            *big.Int
	Voucherburnnonce      *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterTnt20voucherburned is a free log retrieval operation binding the contract event 0xb3f843e529e3186164f9fe2acef63c867c6445446c4ac1fc538cc1ecb3e505d2.
//
// Solidity: event tnt20voucherburned(uint256 subchainid, string denom, address mainchainvoucherowner, address subchaintokenreceiver, uint256 burnamount, uint256 voucherburnnonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) FilterTnt20voucherburned(opts *bind.FilterOpts) (*MainchainTNT20TokenBankTnt20voucherburnedIterator, error) {

	logs, sub, err := _MainchainTNT20TokenBank.contract.FilterLogs(opts, "tnt20voucherburned")
	if err != nil {
		return nil, err
	}
	return &MainchainTNT20TokenBankTnt20voucherburnedIterator{contract: _MainchainTNT20TokenBank.contract, event: "tnt20voucherburned", logs: logs, sub: sub}, nil
}

// WatchTnt20voucherburned is a free log subscription operation binding the contract event 0xb3f843e529e3186164f9fe2acef63c867c6445446c4ac1fc538cc1ecb3e505d2.
//
// Solidity: event tnt20voucherburned(uint256 subchainid, string denom, address mainchainvoucherowner, address subchaintokenreceiver, uint256 burnamount, uint256 voucherburnnonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) WatchTnt20voucherburned(opts *bind.WatchOpts, sink chan<- *MainchainTNT20TokenBankTnt20voucherburned) (event.Subscription, error) {

	logs, sub, err := _MainchainTNT20TokenBank.contract.WatchLogs(opts, "tnt20voucherburned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainTNT20TokenBankTnt20voucherburned)
				if err := _MainchainTNT20TokenBank.contract.UnpackLog(event, "tnt20voucherburned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt20voucherburned is a log parse operation binding the contract event 0xb3f843e529e3186164f9fe2acef63c867c6445446c4ac1fc538cc1ecb3e505d2.
//
// Solidity: event tnt20voucherburned(uint256 subchainid, string denom, address mainchainvoucherowner, address subchaintokenreceiver, uint256 burnamount, uint256 voucherburnnonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) ParseTnt20voucherburned(log types.Log) (*MainchainTNT20TokenBankTnt20voucherburned, error) {
	event := new(MainchainTNT20TokenBankTnt20voucherburned)
	if err := _MainchainTNT20TokenBank.contract.UnpackLog(event, "tnt20voucherburned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainTNT20TokenBankTnt20vouchermintedIterator is returned from FilterTnt20voucherminted and is used to iterate over the raw logs and unpacked data for Tnt20voucherminted events raised by the MainchainTNT20TokenBank contract.
type MainchainTNT20TokenBankTnt20vouchermintedIterator struct {
	Event *MainchainTNT20TokenBankTnt20voucherminted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainTNT20TokenBankTnt20vouchermintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainTNT20TokenBankTnt20voucherminted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainTNT20TokenBankTnt20voucherminted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainTNT20TokenBankTnt20vouchermintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainTNT20TokenBankTnt20vouchermintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainTNT20TokenBankTnt20voucherminted represents a Tnt20voucherminted event raised by the MainchainTNT20TokenBank contract.
type MainchainTNT20TokenBankTnt20voucherminted struct {
	Subchainid               *big.Int
	Denom                    string
	Mainchainvoucherreceiver common.Address
	Vouchercontact           common.Address
	Mintamount               *big.Int
	Subchaintokenlocknonce   *big.Int
	Vouchermintnonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTnt20voucherminted is a free log retrieval operation binding the contract event 0x8d5e0f2186a67a4bfe684cff7522dda63467c9e0e7515c096977f6221b887bd2.
//
// Solidity: event tnt20voucherminted(uint256 subchainid, string denom, address mainchainvoucherreceiver, address vouchercontact, uint256 mintamount, uint256 subchaintokenlocknonce, uint256 vouchermintnonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) FilterTnt20voucherminted(opts *bind.FilterOpts) (*MainchainTNT20TokenBankTnt20vouchermintedIterator, error) {

	logs, sub, err := _MainchainTNT20TokenBank.contract.FilterLogs(opts, "tnt20voucherminted")
	if err != nil {
		return nil, err
	}
	return &MainchainTNT20TokenBankTnt20vouchermintedIterator{contract: _MainchainTNT20TokenBank.contract, event: "tnt20voucherminted", logs: logs, sub: sub}, nil
}

// WatchTnt20voucherminted is a free log subscription operation binding the contract event 0x8d5e0f2186a67a4bfe684cff7522dda63467c9e0e7515c096977f6221b887bd2.
//
// Solidity: event tnt20voucherminted(uint256 subchainid, string denom, address mainchainvoucherreceiver, address vouchercontact, uint256 mintamount, uint256 subchaintokenlocknonce, uint256 vouchermintnonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) WatchTnt20voucherminted(opts *bind.WatchOpts, sink chan<- *MainchainTNT20TokenBankTnt20voucherminted) (event.Subscription, error) {

	logs, sub, err := _MainchainTNT20TokenBank.contract.WatchLogs(opts, "tnt20voucherminted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainTNT20TokenBankTnt20voucherminted)
				if err := _MainchainTNT20TokenBank.contract.UnpackLog(event, "tnt20voucherminted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTnt20voucherminted is a log parse operation binding the contract event 0x8d5e0f2186a67a4bfe684cff7522dda63467c9e0e7515c096977f6221b887bd2.
//
// Solidity: event tnt20voucherminted(uint256 subchainid, string denom, address mainchainvoucherreceiver, address vouchercontact, uint256 mintamount, uint256 subchaintokenlocknonce, uint256 vouchermintnonce)
func (_MainchainTNT20TokenBank *MainchainTNT20TokenBankFilterer) ParseTnt20voucherminted(log types.Log) (*MainchainTNT20TokenBankTnt20voucherminted, error) {
	event := new(MainchainTNT20TokenBankTnt20voucherminted)
	if err := _MainchainTNT20TokenBank.contract.UnpackLog(event, "tnt20voucherminted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
