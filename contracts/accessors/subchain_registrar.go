// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Struct2 is an auto generated low-level Go binding around an user-defined struct.
type Struct2 struct {
	Validator   common.Address
	Shareamount *big.Int
}

// Struct4 is an auto generated low-level Go binding around an user-defined struct.
type Struct4 struct {
	Guarantor        common.Address
	Collateralamount *big.Int
	Governancetoken  common.Address
	Genesishash      string
	Exists           bool
}

// Struct0 is an auto generated low-level Go binding around an user-defined struct.
type Struct0 struct {
	Receiver     common.Address
	Amount       *big.Int
	Returnheight *big.Int
}

// Struct3 is an auto generated low-level Go binding around an user-defined struct.
type Struct3 struct {
	Height *big.Int
	Stakes []Struct2
}

// Struct1 is an auto generated low-level Go binding around an user-defined struct.
type Struct1 struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SubchainRegistrarMetaData contains all meta data concerning the SubchainRegistrar contract.
var SubchainRegistrarMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"wtheta_\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"superadmin_\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"governor_\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"numblocksperdynasty_\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"withdrawalpendingperiodinblocks_\",\"type\":\"uint256\"}],\"statemutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"slashamount\",\"type\":\"uint256\"}],\"name\":\"slashchaincollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"indexed\":false,\"internaltype\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internaltype\":\"uint256\",\"name\":\"slashamount\",\"type\":\"uint256\"}],\"name\":\"slashvalidatorcollateral\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minchaincollateralamount\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numblocksperdynasty\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subchainids\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subchainmetadatamap\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"collateralamount\",\"type\":\"uint256\"},{\"internaltype\":\"contractsubchaingovernancetoken\",\"name\":\"governancetoken\",\"type\":\"address\"},{\"internaltype\":\"string\",\"name\":\"genesishash\",\"type\":\"string\"},{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superadmin\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vcm\",\"outputs\":[{\"internaltype\":\"contractvalidatorcollateralmanager\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsm\",\"outputs\":[{\"internaltype\":\"contractvalidatorstakemanager\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wtheta\",\"outputs\":[{\"internaltype\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalpendingperiodinblocks\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"governancetoken\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"collateralamount\",\"type\":\"uint256\"},{\"internaltype\":\"string\",\"name\":\"genesishash\",\"type\":\"string\"}],\"name\":\"registersubchain\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"additionalcollateral\",\"type\":\"uint256\"}],\"name\":\"addsubchaincollateral\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"}],\"name\":\"deregistersubchain\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"validatorcandidate\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"collateralamount\",\"type\":\"uint256\"}],\"name\":\"depositcollateral\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"validatorcandidate\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"collateralamount\",\"type\":\"uint256\"}],\"name\":\"withdrawcollateral\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"}],\"name\":\"claimcollateral\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"govtokenamount\",\"type\":\"uint256\"}],\"name\":\"depositstake\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"shareamount\",\"type\":\"uint256\"}],\"name\":\"withdrawstake\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"}],\"name\":\"claimstake\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"slashamount\",\"type\":\"uint256\"}],\"name\":\"slashchaincollateral\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internaltype\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"slashamount\",\"type\":\"uint256\"}],\"name\":\"slashvalidatorcollateral\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"newadmin\",\"type\":\"address\"}],\"name\":\"updateadmin\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"newgovernor\",\"type\":\"address\"}],\"name\":\"updategovernor\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateminchaincollateralamount\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateminvalidatorcollateralamount\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"updatevcmowner\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"updatevsmowner\",\"outputs\":[],\"statemutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getallsubchainids\",\"outputs\":[{\"internaltype\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"}],\"name\":\"isaregisteredsubchain\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"}],\"name\":\"getsubchainmetadata\",\"outputs\":[{\"components\":[{\"internaltype\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"collateralamount\",\"type\":\"uint256\"},{\"internaltype\":\"contractsubchaingovernancetoken\",\"name\":\"governancetoken\",\"type\":\"address\"},{\"internaltype\":\"string\",\"name\":\"genesishash\",\"type\":\"string\"},{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internaltype\":\"structsubchainregistrar.subchainmetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"}],\"name\":\"getstakesnapshotheights\",\"outputs\":[{\"internaltype\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"blockheight\",\"type\":\"uint256\"}],\"name\":\"getstakesnapshot\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internaltype\":\"uint256\",\"name\":\"targetsnapshotheight\",\"type\":\"uint256\"},{\"components\":[{\"internaltype\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"components\":[{\"internaltype\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"shareamount\",\"type\":\"uint256\"}],\"internaltype\":\"structvalidatorstakemanager.stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"internaltype\":\"structvalidatorstakemanager.stakesnapshot\",\"name\":\"targetstakesnapshot\",\"type\":\"tuple\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"blockheight\",\"type\":\"uint256\"}],\"name\":\"getvalidatorset\",\"outputs\":[{\"internaltype\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internaltype\":\"uint256[]\",\"name\":\"shareamounts\",\"type\":\"uint256[]\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"blockheight\",\"type\":\"uint256\"}],\"name\":\"gettotalvalidatorshares\",\"outputs\":[{\"internaltype\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"blockheight\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"getvalidatorshares\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"isavalidator\",\"type\":\"bool\"},{\"internaltype\":\"uint256\",\"name\":\"shareamount\",\"type\":\"uint256\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"}],\"name\":\"getvalidatorguarantorswithpendingwithdrawals\",\"outputs\":[{\"internaltype\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"}],\"name\":\"getpendingvalidatorcollateralwithdrawals\",\"outputs\":[{\"components\":[{\"internaltype\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"returnheight\",\"type\":\"uint256\"}],\"internaltype\":\"structwithdrawalqueue.withdrawalrequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"}],\"name\":\"getstakerswithpendingwithdrawals\",\"outputs\":[{\"internaltype\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getpendingstakewithdrawals\",\"outputs\":[{\"components\":[{\"internaltype\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internaltype\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"returnheight\",\"type\":\"uint256\"}],\"internaltype\":\"structwithdrawalqueue.withdrawalrequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"statemutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internaltype\":\"uint256\",\"name\":\"subchainid\",\"type\":\"uint256\"},{\"internaltype\":\"uint256\",\"name\":\"blockheight\",\"type\":\"uint256\"},{\"internaltype\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internaltype\":\"bytes32[]\",\"name\":\"msghashes\",\"type\":\"bytes32[]\"},{\"components\":[{\"internaltype\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internaltype\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internaltype\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internaltype\":\"structsubchainregistrar.signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"verifyvalidatorsignatures\",\"outputs\":[{\"internaltype\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"statemutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// SubchainRegistrarABI is the input ABI used to generate the binding from.
// Deprecated: Use SubchainRegistrarMetaData.ABI instead.
var SubchainRegistrarABI = SubchainRegistrarMetaData.ABI

// SubchainRegistrarBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SubchainRegistrarMetaData.Bin instead.
var SubchainRegistrarBin = SubchainRegistrarMetaData.Bin

// DeploySubchainRegistrar deploys a new Ethereum contract, binding an instance of SubchainRegistrar to it.
func DeploySubchainRegistrar(auth *bind.TransactOpts, backend bind.ContractBackend, wtheta_ common.Address, superadmin_ common.Address, admin_ common.Address, governor_ common.Address, numblocksperdynasty_ *big.Int, withdrawalpendingperiodinblocks_ *big.Int) (common.Address, *types.Transaction, *SubchainRegistrar, error) {
	parsed, err := SubchainRegistrarMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SubchainRegistrarBin), backend, wtheta_, superadmin_, admin_, governor_, numblocksperdynasty_, withdrawalpendingperiodinblocks_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SubchainRegistrar{SubchainRegistrarCaller: SubchainRegistrarCaller{contract: contract}, SubchainRegistrarTransactor: SubchainRegistrarTransactor{contract: contract}, SubchainRegistrarFilterer: SubchainRegistrarFilterer{contract: contract}}, nil
}

// SubchainRegistrar is an auto generated Go binding around an Ethereum contract.
type SubchainRegistrar struct {
	SubchainRegistrarCaller     // Read-only binding to the contract
	SubchainRegistrarTransactor // Write-only binding to the contract
	SubchainRegistrarFilterer   // Log filterer for contract events
}

// SubchainRegistrarCaller is an auto generated read-only Go binding around an Ethereum contract.
type SubchainRegistrarCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainRegistrarTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SubchainRegistrarTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainRegistrarFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SubchainRegistrarFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SubchainRegistrarSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SubchainRegistrarSession struct {
	Contract     *SubchainRegistrar // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// SubchainRegistrarCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SubchainRegistrarCallerSession struct {
	Contract *SubchainRegistrarCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// SubchainRegistrarTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SubchainRegistrarTransactorSession struct {
	Contract     *SubchainRegistrarTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// SubchainRegistrarRaw is an auto generated low-level Go binding around an Ethereum contract.
type SubchainRegistrarRaw struct {
	Contract *SubchainRegistrar // Generic contract binding to access the raw methods on
}

// SubchainRegistrarCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SubchainRegistrarCallerRaw struct {
	Contract *SubchainRegistrarCaller // Generic read-only contract binding to access the raw methods on
}

// SubchainRegistrarTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SubchainRegistrarTransactorRaw struct {
	Contract *SubchainRegistrarTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSubchainRegistrar creates a new instance of SubchainRegistrar, bound to a specific deployed contract.
func NewSubchainRegistrar(address common.Address, backend bind.ContractBackend) (*SubchainRegistrar, error) {
	contract, err := bindSubchainRegistrar(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SubchainRegistrar{SubchainRegistrarCaller: SubchainRegistrarCaller{contract: contract}, SubchainRegistrarTransactor: SubchainRegistrarTransactor{contract: contract}, SubchainRegistrarFilterer: SubchainRegistrarFilterer{contract: contract}}, nil
}

// NewSubchainRegistrarCaller creates a new read-only instance of SubchainRegistrar, bound to a specific deployed contract.
func NewSubchainRegistrarCaller(address common.Address, caller bind.ContractCaller) (*SubchainRegistrarCaller, error) {
	contract, err := bindSubchainRegistrar(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SubchainRegistrarCaller{contract: contract}, nil
}

// NewSubchainRegistrarTransactor creates a new write-only instance of SubchainRegistrar, bound to a specific deployed contract.
func NewSubchainRegistrarTransactor(address common.Address, transactor bind.ContractTransactor) (*SubchainRegistrarTransactor, error) {
	contract, err := bindSubchainRegistrar(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SubchainRegistrarTransactor{contract: contract}, nil
}

// NewSubchainRegistrarFilterer creates a new log filterer instance of SubchainRegistrar, bound to a specific deployed contract.
func NewSubchainRegistrarFilterer(address common.Address, filterer bind.ContractFilterer) (*SubchainRegistrarFilterer, error) {
	contract, err := bindSubchainRegistrar(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SubchainRegistrarFilterer{contract: contract}, nil
}

// bindSubchainRegistrar binds a generic wrapper to an already deployed contract.
func bindSubchainRegistrar(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SubchainRegistrarABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SubchainRegistrar *SubchainRegistrarRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SubchainRegistrar.Contract.SubchainRegistrarCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SubchainRegistrar *SubchainRegistrarRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.SubchainRegistrarTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SubchainRegistrar *SubchainRegistrarRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.SubchainRegistrarTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SubchainRegistrar *SubchainRegistrarCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SubchainRegistrar.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SubchainRegistrar *SubchainRegistrarTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SubchainRegistrar *SubchainRegistrarTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarSession) Admin() (common.Address, error) {
	return _SubchainRegistrar.Contract.Admin(&_SubchainRegistrar.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Admin() (common.Address, error) {
	return _SubchainRegistrar.Contract.Admin(&_SubchainRegistrar.CallOpts)
}

// Getallsubchainids is a free data retrieval call binding the contract method 0x2351e96c.
//
// Solidity: function getallsubchainids() view returns(uint256[])
func (_SubchainRegistrar *SubchainRegistrarCaller) Getallsubchainids(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "getallsubchainids")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// Getallsubchainids is a free data retrieval call binding the contract method 0x2351e96c.
//
// Solidity: function getallsubchainids() view returns(uint256[])
func (_SubchainRegistrar *SubchainRegistrarSession) Getallsubchainids() ([]*big.Int, error) {
	return _SubchainRegistrar.Contract.Getallsubchainids(&_SubchainRegistrar.CallOpts)
}

// Getallsubchainids is a free data retrieval call binding the contract method 0x2351e96c.
//
// Solidity: function getallsubchainids() view returns(uint256[])
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Getallsubchainids() ([]*big.Int, error) {
	return _SubchainRegistrar.Contract.Getallsubchainids(&_SubchainRegistrar.CallOpts)
}

// Getpendingstakewithdrawals is a free data retrieval call binding the contract method 0x3eac32a1.
//
// Solidity: function getpendingstakewithdrawals(uint256 subchainid, address staker) view returns((address,uint256,uint256)[])
func (_SubchainRegistrar *SubchainRegistrarCaller) Getpendingstakewithdrawals(opts *bind.CallOpts, subchainid *big.Int, staker common.Address) ([]Struct0, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "getpendingstakewithdrawals", subchainid, staker)

	if err != nil {
		return *new([]Struct0), err
	}

	out0 := *abi.ConvertType(out[0], new([]Struct0)).(*[]Struct0)

	return out0, err

}

// Getpendingstakewithdrawals is a free data retrieval call binding the contract method 0x3eac32a1.
//
// Solidity: function getpendingstakewithdrawals(uint256 subchainid, address staker) view returns((address,uint256,uint256)[])
func (_SubchainRegistrar *SubchainRegistrarSession) Getpendingstakewithdrawals(subchainid *big.Int, staker common.Address) ([]Struct0, error) {
	return _SubchainRegistrar.Contract.Getpendingstakewithdrawals(&_SubchainRegistrar.CallOpts, subchainid, staker)
}

// Getpendingstakewithdrawals is a free data retrieval call binding the contract method 0x3eac32a1.
//
// Solidity: function getpendingstakewithdrawals(uint256 subchainid, address staker) view returns((address,uint256,uint256)[])
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Getpendingstakewithdrawals(subchainid *big.Int, staker common.Address) ([]Struct0, error) {
	return _SubchainRegistrar.Contract.Getpendingstakewithdrawals(&_SubchainRegistrar.CallOpts, subchainid, staker)
}

// Getpendingvalidatorcollateralwithdrawals is a free data retrieval call binding the contract method 0x050b6ca0.
//
// Solidity: function getpendingvalidatorcollateralwithdrawals(uint256 subchainid, address guarantor) view returns((address,uint256,uint256)[])
func (_SubchainRegistrar *SubchainRegistrarCaller) Getpendingvalidatorcollateralwithdrawals(opts *bind.CallOpts, subchainid *big.Int, guarantor common.Address) ([]Struct0, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "getpendingvalidatorcollateralwithdrawals", subchainid, guarantor)

	if err != nil {
		return *new([]Struct0), err
	}

	out0 := *abi.ConvertType(out[0], new([]Struct0)).(*[]Struct0)

	return out0, err

}

// Getpendingvalidatorcollateralwithdrawals is a free data retrieval call binding the contract method 0x050b6ca0.
//
// Solidity: function getpendingvalidatorcollateralwithdrawals(uint256 subchainid, address guarantor) view returns((address,uint256,uint256)[])
func (_SubchainRegistrar *SubchainRegistrarSession) Getpendingvalidatorcollateralwithdrawals(subchainid *big.Int, guarantor common.Address) ([]Struct0, error) {
	return _SubchainRegistrar.Contract.Getpendingvalidatorcollateralwithdrawals(&_SubchainRegistrar.CallOpts, subchainid, guarantor)
}

// Getpendingvalidatorcollateralwithdrawals is a free data retrieval call binding the contract method 0x050b6ca0.
//
// Solidity: function getpendingvalidatorcollateralwithdrawals(uint256 subchainid, address guarantor) view returns((address,uint256,uint256)[])
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Getpendingvalidatorcollateralwithdrawals(subchainid *big.Int, guarantor common.Address) ([]Struct0, error) {
	return _SubchainRegistrar.Contract.Getpendingvalidatorcollateralwithdrawals(&_SubchainRegistrar.CallOpts, subchainid, guarantor)
}

// Getstakerswithpendingwithdrawals is a free data retrieval call binding the contract method 0xe73e8e55.
//
// Solidity: function getstakerswithpendingwithdrawals(uint256 subchainid) view returns(address[])
func (_SubchainRegistrar *SubchainRegistrarCaller) Getstakerswithpendingwithdrawals(opts *bind.CallOpts, subchainid *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "getstakerswithpendingwithdrawals", subchainid)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// Getstakerswithpendingwithdrawals is a free data retrieval call binding the contract method 0xe73e8e55.
//
// Solidity: function getstakerswithpendingwithdrawals(uint256 subchainid) view returns(address[])
func (_SubchainRegistrar *SubchainRegistrarSession) Getstakerswithpendingwithdrawals(subchainid *big.Int) ([]common.Address, error) {
	return _SubchainRegistrar.Contract.Getstakerswithpendingwithdrawals(&_SubchainRegistrar.CallOpts, subchainid)
}

// Getstakerswithpendingwithdrawals is a free data retrieval call binding the contract method 0xe73e8e55.
//
// Solidity: function getstakerswithpendingwithdrawals(uint256 subchainid) view returns(address[])
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Getstakerswithpendingwithdrawals(subchainid *big.Int) ([]common.Address, error) {
	return _SubchainRegistrar.Contract.Getstakerswithpendingwithdrawals(&_SubchainRegistrar.CallOpts, subchainid)
}

// Getstakesnapshot is a free data retrieval call binding the contract method 0x5e596e04.
//
// Solidity: function getstakesnapshot(uint256 subchainid, uint256 blockheight) view returns(bool exists, uint256 targetsnapshotheight, (uint256,(address,uint256)[]) targetstakesnapshot)
func (_SubchainRegistrar *SubchainRegistrarCaller) Getstakesnapshot(opts *bind.CallOpts, subchainid *big.Int, blockheight *big.Int) (struct {
	Exists               bool
	Targetsnapshotheight *big.Int
	Targetstakesnapshot  Struct3
}, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "getstakesnapshot", subchainid, blockheight)

	outstruct := new(struct {
		Exists               bool
		Targetsnapshotheight *big.Int
		Targetstakesnapshot  Struct3
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Exists = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Targetsnapshotheight = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Targetstakesnapshot = *abi.ConvertType(out[2], new(Struct3)).(*Struct3)

	return *outstruct, err

}

// Getstakesnapshot is a free data retrieval call binding the contract method 0x5e596e04.
//
// Solidity: function getstakesnapshot(uint256 subchainid, uint256 blockheight) view returns(bool exists, uint256 targetsnapshotheight, (uint256,(address,uint256)[]) targetstakesnapshot)
func (_SubchainRegistrar *SubchainRegistrarSession) Getstakesnapshot(subchainid *big.Int, blockheight *big.Int) (struct {
	Exists               bool
	Targetsnapshotheight *big.Int
	Targetstakesnapshot  Struct3
}, error) {
	return _SubchainRegistrar.Contract.Getstakesnapshot(&_SubchainRegistrar.CallOpts, subchainid, blockheight)
}

// Getstakesnapshot is a free data retrieval call binding the contract method 0x5e596e04.
//
// Solidity: function getstakesnapshot(uint256 subchainid, uint256 blockheight) view returns(bool exists, uint256 targetsnapshotheight, (uint256,(address,uint256)[]) targetstakesnapshot)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Getstakesnapshot(subchainid *big.Int, blockheight *big.Int) (struct {
	Exists               bool
	Targetsnapshotheight *big.Int
	Targetstakesnapshot  Struct3
}, error) {
	return _SubchainRegistrar.Contract.Getstakesnapshot(&_SubchainRegistrar.CallOpts, subchainid, blockheight)
}

// Getstakesnapshotheights is a free data retrieval call binding the contract method 0x725e6bcf.
//
// Solidity: function getstakesnapshotheights(uint256 subchainid) view returns(uint256[])
func (_SubchainRegistrar *SubchainRegistrarCaller) Getstakesnapshotheights(opts *bind.CallOpts, subchainid *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "getstakesnapshotheights", subchainid)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// Getstakesnapshotheights is a free data retrieval call binding the contract method 0x725e6bcf.
//
// Solidity: function getstakesnapshotheights(uint256 subchainid) view returns(uint256[])
func (_SubchainRegistrar *SubchainRegistrarSession) Getstakesnapshotheights(subchainid *big.Int) ([]*big.Int, error) {
	return _SubchainRegistrar.Contract.Getstakesnapshotheights(&_SubchainRegistrar.CallOpts, subchainid)
}

// Getstakesnapshotheights is a free data retrieval call binding the contract method 0x725e6bcf.
//
// Solidity: function getstakesnapshotheights(uint256 subchainid) view returns(uint256[])
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Getstakesnapshotheights(subchainid *big.Int) ([]*big.Int, error) {
	return _SubchainRegistrar.Contract.Getstakesnapshotheights(&_SubchainRegistrar.CallOpts, subchainid)
}

// Getsubchainmetadata is a free data retrieval call binding the contract method 0x07233780.
//
// Solidity: function getsubchainmetadata(uint256 subchainid) view returns((address,uint256,address,string,bool))
func (_SubchainRegistrar *SubchainRegistrarCaller) Getsubchainmetadata(opts *bind.CallOpts, subchainid *big.Int) (Struct4, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "getsubchainmetadata", subchainid)

	if err != nil {
		return *new(Struct4), err
	}

	out0 := *abi.ConvertType(out[0], new(Struct4)).(*Struct4)

	return out0, err

}

// Getsubchainmetadata is a free data retrieval call binding the contract method 0x07233780.
//
// Solidity: function getsubchainmetadata(uint256 subchainid) view returns((address,uint256,address,string,bool))
func (_SubchainRegistrar *SubchainRegistrarSession) Getsubchainmetadata(subchainid *big.Int) (Struct4, error) {
	return _SubchainRegistrar.Contract.Getsubchainmetadata(&_SubchainRegistrar.CallOpts, subchainid)
}

// Getsubchainmetadata is a free data retrieval call binding the contract method 0x07233780.
//
// Solidity: function getsubchainmetadata(uint256 subchainid) view returns((address,uint256,address,string,bool))
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Getsubchainmetadata(subchainid *big.Int) (Struct4, error) {
	return _SubchainRegistrar.Contract.Getsubchainmetadata(&_SubchainRegistrar.CallOpts, subchainid)
}

// Gettotalvalidatorshares is a free data retrieval call binding the contract method 0xdfbeaf70.
//
// Solidity: function gettotalvalidatorshares(uint256 subchainid, uint256 blockheight) view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarCaller) Gettotalvalidatorshares(opts *bind.CallOpts, subchainid *big.Int, blockheight *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "gettotalvalidatorshares", subchainid, blockheight)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Gettotalvalidatorshares is a free data retrieval call binding the contract method 0xdfbeaf70.
//
// Solidity: function gettotalvalidatorshares(uint256 subchainid, uint256 blockheight) view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarSession) Gettotalvalidatorshares(subchainid *big.Int, blockheight *big.Int) (*big.Int, error) {
	return _SubchainRegistrar.Contract.Gettotalvalidatorshares(&_SubchainRegistrar.CallOpts, subchainid, blockheight)
}

// Gettotalvalidatorshares is a free data retrieval call binding the contract method 0xdfbeaf70.
//
// Solidity: function gettotalvalidatorshares(uint256 subchainid, uint256 blockheight) view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Gettotalvalidatorshares(subchainid *big.Int, blockheight *big.Int) (*big.Int, error) {
	return _SubchainRegistrar.Contract.Gettotalvalidatorshares(&_SubchainRegistrar.CallOpts, subchainid, blockheight)
}

// Getvalidatorguarantorswithpendingwithdrawals is a free data retrieval call binding the contract method 0xdf26d97c.
//
// Solidity: function getvalidatorguarantorswithpendingwithdrawals(uint256 subchainid) view returns(address[])
func (_SubchainRegistrar *SubchainRegistrarCaller) Getvalidatorguarantorswithpendingwithdrawals(opts *bind.CallOpts, subchainid *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "getvalidatorguarantorswithpendingwithdrawals", subchainid)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// Getvalidatorguarantorswithpendingwithdrawals is a free data retrieval call binding the contract method 0xdf26d97c.
//
// Solidity: function getvalidatorguarantorswithpendingwithdrawals(uint256 subchainid) view returns(address[])
func (_SubchainRegistrar *SubchainRegistrarSession) Getvalidatorguarantorswithpendingwithdrawals(subchainid *big.Int) ([]common.Address, error) {
	return _SubchainRegistrar.Contract.Getvalidatorguarantorswithpendingwithdrawals(&_SubchainRegistrar.CallOpts, subchainid)
}

// Getvalidatorguarantorswithpendingwithdrawals is a free data retrieval call binding the contract method 0xdf26d97c.
//
// Solidity: function getvalidatorguarantorswithpendingwithdrawals(uint256 subchainid) view returns(address[])
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Getvalidatorguarantorswithpendingwithdrawals(subchainid *big.Int) ([]common.Address, error) {
	return _SubchainRegistrar.Contract.Getvalidatorguarantorswithpendingwithdrawals(&_SubchainRegistrar.CallOpts, subchainid)
}

// Getvalidatorset is a free data retrieval call binding the contract method 0x355148f8.
//
// Solidity: function getvalidatorset(uint256 subchainid, uint256 blockheight) view returns(address[] validators, uint256[] shareamounts)
func (_SubchainRegistrar *SubchainRegistrarCaller) Getvalidatorset(opts *bind.CallOpts, subchainid *big.Int, blockheight *big.Int) (struct {
	Validators   []common.Address
	Shareamounts []*big.Int
}, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "getvalidatorset", subchainid, blockheight)

	outstruct := new(struct {
		Validators   []common.Address
		Shareamounts []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Validators = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.Shareamounts = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Getvalidatorset is a free data retrieval call binding the contract method 0x355148f8.
//
// Solidity: function getvalidatorset(uint256 subchainid, uint256 blockheight) view returns(address[] validators, uint256[] shareamounts)
func (_SubchainRegistrar *SubchainRegistrarSession) Getvalidatorset(subchainid *big.Int, blockheight *big.Int) (struct {
	Validators   []common.Address
	Shareamounts []*big.Int
}, error) {
	return _SubchainRegistrar.Contract.Getvalidatorset(&_SubchainRegistrar.CallOpts, subchainid, blockheight)
}

// Getvalidatorset is a free data retrieval call binding the contract method 0x355148f8.
//
// Solidity: function getvalidatorset(uint256 subchainid, uint256 blockheight) view returns(address[] validators, uint256[] shareamounts)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Getvalidatorset(subchainid *big.Int, blockheight *big.Int) (struct {
	Validators   []common.Address
	Shareamounts []*big.Int
}, error) {
	return _SubchainRegistrar.Contract.Getvalidatorset(&_SubchainRegistrar.CallOpts, subchainid, blockheight)
}

// Getvalidatorshares is a free data retrieval call binding the contract method 0x0310dd07.
//
// Solidity: function getvalidatorshares(uint256 subchainid, uint256 blockheight, address validator) view returns(bool isavalidator, uint256 shareamount)
func (_SubchainRegistrar *SubchainRegistrarCaller) Getvalidatorshares(opts *bind.CallOpts, subchainid *big.Int, blockheight *big.Int, validator common.Address) (struct {
	Isavalidator bool
	Shareamount  *big.Int
}, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "getvalidatorshares", subchainid, blockheight, validator)

	outstruct := new(struct {
		Isavalidator bool
		Shareamount  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Isavalidator = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Shareamount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Getvalidatorshares is a free data retrieval call binding the contract method 0x0310dd07.
//
// Solidity: function getvalidatorshares(uint256 subchainid, uint256 blockheight, address validator) view returns(bool isavalidator, uint256 shareamount)
func (_SubchainRegistrar *SubchainRegistrarSession) Getvalidatorshares(subchainid *big.Int, blockheight *big.Int, validator common.Address) (struct {
	Isavalidator bool
	Shareamount  *big.Int
}, error) {
	return _SubchainRegistrar.Contract.Getvalidatorshares(&_SubchainRegistrar.CallOpts, subchainid, blockheight, validator)
}

// Getvalidatorshares is a free data retrieval call binding the contract method 0x0310dd07.
//
// Solidity: function getvalidatorshares(uint256 subchainid, uint256 blockheight, address validator) view returns(bool isavalidator, uint256 shareamount)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Getvalidatorshares(subchainid *big.Int, blockheight *big.Int, validator common.Address) (struct {
	Isavalidator bool
	Shareamount  *big.Int
}, error) {
	return _SubchainRegistrar.Contract.Getvalidatorshares(&_SubchainRegistrar.CallOpts, subchainid, blockheight, validator)
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCaller) Governor(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "governor")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarSession) Governor() (common.Address, error) {
	return _SubchainRegistrar.Contract.Governor(&_SubchainRegistrar.CallOpts)
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Governor() (common.Address, error) {
	return _SubchainRegistrar.Contract.Governor(&_SubchainRegistrar.CallOpts)
}

// Isaregisteredsubchain is a free data retrieval call binding the contract method 0x68fc4d57.
//
// Solidity: function isaregisteredsubchain(uint256 subchainid) view returns(bool)
func (_SubchainRegistrar *SubchainRegistrarCaller) Isaregisteredsubchain(opts *bind.CallOpts, subchainid *big.Int) (bool, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "isaregisteredsubchain", subchainid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Isaregisteredsubchain is a free data retrieval call binding the contract method 0x68fc4d57.
//
// Solidity: function isaregisteredsubchain(uint256 subchainid) view returns(bool)
func (_SubchainRegistrar *SubchainRegistrarSession) Isaregisteredsubchain(subchainid *big.Int) (bool, error) {
	return _SubchainRegistrar.Contract.Isaregisteredsubchain(&_SubchainRegistrar.CallOpts, subchainid)
}

// Isaregisteredsubchain is a free data retrieval call binding the contract method 0x68fc4d57.
//
// Solidity: function isaregisteredsubchain(uint256 subchainid) view returns(bool)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Isaregisteredsubchain(subchainid *big.Int) (bool, error) {
	return _SubchainRegistrar.Contract.Isaregisteredsubchain(&_SubchainRegistrar.CallOpts, subchainid)
}

// Minchaincollateralamount is a free data retrieval call binding the contract method 0x27e34df2.
//
// Solidity: function minchaincollateralamount() view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarCaller) Minchaincollateralamount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "minchaincollateralamount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Minchaincollateralamount is a free data retrieval call binding the contract method 0x27e34df2.
//
// Solidity: function minchaincollateralamount() view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarSession) Minchaincollateralamount() (*big.Int, error) {
	return _SubchainRegistrar.Contract.Minchaincollateralamount(&_SubchainRegistrar.CallOpts)
}

// Minchaincollateralamount is a free data retrieval call binding the contract method 0x27e34df2.
//
// Solidity: function minchaincollateralamount() view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Minchaincollateralamount() (*big.Int, error) {
	return _SubchainRegistrar.Contract.Minchaincollateralamount(&_SubchainRegistrar.CallOpts)
}

// Numblocksperdynasty is a free data retrieval call binding the contract method 0xc8e0b99f.
//
// Solidity: function numblocksperdynasty() view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarCaller) Numblocksperdynasty(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "numblocksperdynasty")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Numblocksperdynasty is a free data retrieval call binding the contract method 0xc8e0b99f.
//
// Solidity: function numblocksperdynasty() view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarSession) Numblocksperdynasty() (*big.Int, error) {
	return _SubchainRegistrar.Contract.Numblocksperdynasty(&_SubchainRegistrar.CallOpts)
}

// Numblocksperdynasty is a free data retrieval call binding the contract method 0xc8e0b99f.
//
// Solidity: function numblocksperdynasty() view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Numblocksperdynasty() (*big.Int, error) {
	return _SubchainRegistrar.Contract.Numblocksperdynasty(&_SubchainRegistrar.CallOpts)
}

// Subchainids is a free data retrieval call binding the contract method 0x99f9b72a.
//
// Solidity: function subchainids(uint256 ) view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarCaller) Subchainids(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "subchainids", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Subchainids is a free data retrieval call binding the contract method 0x99f9b72a.
//
// Solidity: function subchainids(uint256 ) view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarSession) Subchainids(arg0 *big.Int) (*big.Int, error) {
	return _SubchainRegistrar.Contract.Subchainids(&_SubchainRegistrar.CallOpts, arg0)
}

// Subchainids is a free data retrieval call binding the contract method 0x99f9b72a.
//
// Solidity: function subchainids(uint256 ) view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Subchainids(arg0 *big.Int) (*big.Int, error) {
	return _SubchainRegistrar.Contract.Subchainids(&_SubchainRegistrar.CallOpts, arg0)
}

// Subchainmetadatamap is a free data retrieval call binding the contract method 0x6c56b4e8.
//
// Solidity: function subchainmetadatamap(uint256 ) view returns(address guarantor, uint256 collateralamount, address governancetoken, string genesishash, bool exists)
func (_SubchainRegistrar *SubchainRegistrarCaller) Subchainmetadatamap(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Guarantor        common.Address
	Collateralamount *big.Int
	Governancetoken  common.Address
	Genesishash      string
	Exists           bool
}, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "subchainmetadatamap", arg0)

	outstruct := new(struct {
		Guarantor        common.Address
		Collateralamount *big.Int
		Governancetoken  common.Address
		Genesishash      string
		Exists           bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Guarantor = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Collateralamount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Governancetoken = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Genesishash = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// Subchainmetadatamap is a free data retrieval call binding the contract method 0x6c56b4e8.
//
// Solidity: function subchainmetadatamap(uint256 ) view returns(address guarantor, uint256 collateralamount, address governancetoken, string genesishash, bool exists)
func (_SubchainRegistrar *SubchainRegistrarSession) Subchainmetadatamap(arg0 *big.Int) (struct {
	Guarantor        common.Address
	Collateralamount *big.Int
	Governancetoken  common.Address
	Genesishash      string
	Exists           bool
}, error) {
	return _SubchainRegistrar.Contract.Subchainmetadatamap(&_SubchainRegistrar.CallOpts, arg0)
}

// Subchainmetadatamap is a free data retrieval call binding the contract method 0x6c56b4e8.
//
// Solidity: function subchainmetadatamap(uint256 ) view returns(address guarantor, uint256 collateralamount, address governancetoken, string genesishash, bool exists)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Subchainmetadatamap(arg0 *big.Int) (struct {
	Guarantor        common.Address
	Collateralamount *big.Int
	Governancetoken  common.Address
	Genesishash      string
	Exists           bool
}, error) {
	return _SubchainRegistrar.Contract.Subchainmetadatamap(&_SubchainRegistrar.CallOpts, arg0)
}

// Superadmin is a free data retrieval call binding the contract method 0x63d48aba.
//
// Solidity: function superadmin() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCaller) Superadmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "superadmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Superadmin is a free data retrieval call binding the contract method 0x63d48aba.
//
// Solidity: function superadmin() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarSession) Superadmin() (common.Address, error) {
	return _SubchainRegistrar.Contract.Superadmin(&_SubchainRegistrar.CallOpts)
}

// Superadmin is a free data retrieval call binding the contract method 0x63d48aba.
//
// Solidity: function superadmin() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Superadmin() (common.Address, error) {
	return _SubchainRegistrar.Contract.Superadmin(&_SubchainRegistrar.CallOpts)
}

// Vcm is a free data retrieval call binding the contract method 0xdc1e8263.
//
// Solidity: function vcm() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCaller) Vcm(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "vcm")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Vcm is a free data retrieval call binding the contract method 0xdc1e8263.
//
// Solidity: function vcm() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarSession) Vcm() (common.Address, error) {
	return _SubchainRegistrar.Contract.Vcm(&_SubchainRegistrar.CallOpts)
}

// Vcm is a free data retrieval call binding the contract method 0xdc1e8263.
//
// Solidity: function vcm() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Vcm() (common.Address, error) {
	return _SubchainRegistrar.Contract.Vcm(&_SubchainRegistrar.CallOpts)
}

// Verifyvalidatorsignatures is a free data retrieval call binding the contract method 0x0b4343cb.
//
// Solidity: function verifyvalidatorsignatures(uint256 subchainid, uint256 blockheight, address[] validators, bytes32[] msghashes, (uint8,bytes32,bytes32)[] signatures) view returns(bool)
func (_SubchainRegistrar *SubchainRegistrarCaller) Verifyvalidatorsignatures(opts *bind.CallOpts, subchainid *big.Int, blockheight *big.Int, validators []common.Address, msghashes [][32]byte, signatures []Struct1) (bool, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "verifyvalidatorsignatures", subchainid, blockheight, validators, msghashes, signatures)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verifyvalidatorsignatures is a free data retrieval call binding the contract method 0x0b4343cb.
//
// Solidity: function verifyvalidatorsignatures(uint256 subchainid, uint256 blockheight, address[] validators, bytes32[] msghashes, (uint8,bytes32,bytes32)[] signatures) view returns(bool)
func (_SubchainRegistrar *SubchainRegistrarSession) Verifyvalidatorsignatures(subchainid *big.Int, blockheight *big.Int, validators []common.Address, msghashes [][32]byte, signatures []Struct1) (bool, error) {
	return _SubchainRegistrar.Contract.Verifyvalidatorsignatures(&_SubchainRegistrar.CallOpts, subchainid, blockheight, validators, msghashes, signatures)
}

// Verifyvalidatorsignatures is a free data retrieval call binding the contract method 0x0b4343cb.
//
// Solidity: function verifyvalidatorsignatures(uint256 subchainid, uint256 blockheight, address[] validators, bytes32[] msghashes, (uint8,bytes32,bytes32)[] signatures) view returns(bool)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Verifyvalidatorsignatures(subchainid *big.Int, blockheight *big.Int, validators []common.Address, msghashes [][32]byte, signatures []Struct1) (bool, error) {
	return _SubchainRegistrar.Contract.Verifyvalidatorsignatures(&_SubchainRegistrar.CallOpts, subchainid, blockheight, validators, msghashes, signatures)
}

// Vsm is a free data retrieval call binding the contract method 0x07ddf6bc.
//
// Solidity: function vsm() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCaller) Vsm(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "vsm")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Vsm is a free data retrieval call binding the contract method 0x07ddf6bc.
//
// Solidity: function vsm() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarSession) Vsm() (common.Address, error) {
	return _SubchainRegistrar.Contract.Vsm(&_SubchainRegistrar.CallOpts)
}

// Vsm is a free data retrieval call binding the contract method 0x07ddf6bc.
//
// Solidity: function vsm() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Vsm() (common.Address, error) {
	return _SubchainRegistrar.Contract.Vsm(&_SubchainRegistrar.CallOpts)
}

// Withdrawalpendingperiodinblocks is a free data retrieval call binding the contract method 0x3716db83.
//
// Solidity: function withdrawalpendingperiodinblocks() view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarCaller) Withdrawalpendingperiodinblocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "withdrawalpendingperiodinblocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Withdrawalpendingperiodinblocks is a free data retrieval call binding the contract method 0x3716db83.
//
// Solidity: function withdrawalpendingperiodinblocks() view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarSession) Withdrawalpendingperiodinblocks() (*big.Int, error) {
	return _SubchainRegistrar.Contract.Withdrawalpendingperiodinblocks(&_SubchainRegistrar.CallOpts)
}

// Withdrawalpendingperiodinblocks is a free data retrieval call binding the contract method 0x3716db83.
//
// Solidity: function withdrawalpendingperiodinblocks() view returns(uint256)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Withdrawalpendingperiodinblocks() (*big.Int, error) {
	return _SubchainRegistrar.Contract.Withdrawalpendingperiodinblocks(&_SubchainRegistrar.CallOpts)
}

// Wtheta is a free data retrieval call binding the contract method 0x40432425.
//
// Solidity: function wtheta() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCaller) Wtheta(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SubchainRegistrar.contract.Call(opts, &out, "wtheta")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Wtheta is a free data retrieval call binding the contract method 0x40432425.
//
// Solidity: function wtheta() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarSession) Wtheta() (common.Address, error) {
	return _SubchainRegistrar.Contract.Wtheta(&_SubchainRegistrar.CallOpts)
}

// Wtheta is a free data retrieval call binding the contract method 0x40432425.
//
// Solidity: function wtheta() view returns(address)
func (_SubchainRegistrar *SubchainRegistrarCallerSession) Wtheta() (common.Address, error) {
	return _SubchainRegistrar.Contract.Wtheta(&_SubchainRegistrar.CallOpts)
}

// Addsubchaincollateral is a paid mutator transaction binding the contract method 0x029bab32.
//
// Solidity: function addsubchaincollateral(uint256 subchainid, uint256 additionalcollateral) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Addsubchaincollateral(opts *bind.TransactOpts, subchainid *big.Int, additionalcollateral *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "addsubchaincollateral", subchainid, additionalcollateral)
}

// Addsubchaincollateral is a paid mutator transaction binding the contract method 0x029bab32.
//
// Solidity: function addsubchaincollateral(uint256 subchainid, uint256 additionalcollateral) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Addsubchaincollateral(subchainid *big.Int, additionalcollateral *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Addsubchaincollateral(&_SubchainRegistrar.TransactOpts, subchainid, additionalcollateral)
}

// Addsubchaincollateral is a paid mutator transaction binding the contract method 0x029bab32.
//
// Solidity: function addsubchaincollateral(uint256 subchainid, uint256 additionalcollateral) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Addsubchaincollateral(subchainid *big.Int, additionalcollateral *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Addsubchaincollateral(&_SubchainRegistrar.TransactOpts, subchainid, additionalcollateral)
}

// Claimcollateral is a paid mutator transaction binding the contract method 0xf8f96cac.
//
// Solidity: function claimcollateral(uint256 subchainid) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Claimcollateral(opts *bind.TransactOpts, subchainid *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "claimcollateral", subchainid)
}

// Claimcollateral is a paid mutator transaction binding the contract method 0xf8f96cac.
//
// Solidity: function claimcollateral(uint256 subchainid) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Claimcollateral(subchainid *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Claimcollateral(&_SubchainRegistrar.TransactOpts, subchainid)
}

// Claimcollateral is a paid mutator transaction binding the contract method 0xf8f96cac.
//
// Solidity: function claimcollateral(uint256 subchainid) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Claimcollateral(subchainid *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Claimcollateral(&_SubchainRegistrar.TransactOpts, subchainid)
}

// Claimstake is a paid mutator transaction binding the contract method 0x19d0f708.
//
// Solidity: function claimstake(uint256 subchainid) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Claimstake(opts *bind.TransactOpts, subchainid *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "claimstake", subchainid)
}

// Claimstake is a paid mutator transaction binding the contract method 0x19d0f708.
//
// Solidity: function claimstake(uint256 subchainid) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Claimstake(subchainid *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Claimstake(&_SubchainRegistrar.TransactOpts, subchainid)
}

// Claimstake is a paid mutator transaction binding the contract method 0x19d0f708.
//
// Solidity: function claimstake(uint256 subchainid) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Claimstake(subchainid *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Claimstake(&_SubchainRegistrar.TransactOpts, subchainid)
}

// Depositcollateral is a paid mutator transaction binding the contract method 0x3fedf120.
//
// Solidity: function depositcollateral(uint256 subchainid, address validatorcandidate, uint256 collateralamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Depositcollateral(opts *bind.TransactOpts, subchainid *big.Int, validatorcandidate common.Address, collateralamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "depositcollateral", subchainid, validatorcandidate, collateralamount)
}

// Depositcollateral is a paid mutator transaction binding the contract method 0x3fedf120.
//
// Solidity: function depositcollateral(uint256 subchainid, address validatorcandidate, uint256 collateralamount) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Depositcollateral(subchainid *big.Int, validatorcandidate common.Address, collateralamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Depositcollateral(&_SubchainRegistrar.TransactOpts, subchainid, validatorcandidate, collateralamount)
}

// Depositcollateral is a paid mutator transaction binding the contract method 0x3fedf120.
//
// Solidity: function depositcollateral(uint256 subchainid, address validatorcandidate, uint256 collateralamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Depositcollateral(subchainid *big.Int, validatorcandidate common.Address, collateralamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Depositcollateral(&_SubchainRegistrar.TransactOpts, subchainid, validatorcandidate, collateralamount)
}

// Depositstake is a paid mutator transaction binding the contract method 0x3873ba22.
//
// Solidity: function depositstake(uint256 subchainid, address validator, uint256 govtokenamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Depositstake(opts *bind.TransactOpts, subchainid *big.Int, validator common.Address, govtokenamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "depositstake", subchainid, validator, govtokenamount)
}

// Depositstake is a paid mutator transaction binding the contract method 0x3873ba22.
//
// Solidity: function depositstake(uint256 subchainid, address validator, uint256 govtokenamount) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Depositstake(subchainid *big.Int, validator common.Address, govtokenamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Depositstake(&_SubchainRegistrar.TransactOpts, subchainid, validator, govtokenamount)
}

// Depositstake is a paid mutator transaction binding the contract method 0x3873ba22.
//
// Solidity: function depositstake(uint256 subchainid, address validator, uint256 govtokenamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Depositstake(subchainid *big.Int, validator common.Address, govtokenamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Depositstake(&_SubchainRegistrar.TransactOpts, subchainid, validator, govtokenamount)
}

// Deregistersubchain is a paid mutator transaction binding the contract method 0x676594e2.
//
// Solidity: function deregistersubchain(uint256 subchainid) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Deregistersubchain(opts *bind.TransactOpts, subchainid *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "deregistersubchain", subchainid)
}

// Deregistersubchain is a paid mutator transaction binding the contract method 0x676594e2.
//
// Solidity: function deregistersubchain(uint256 subchainid) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Deregistersubchain(subchainid *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Deregistersubchain(&_SubchainRegistrar.TransactOpts, subchainid)
}

// Deregistersubchain is a paid mutator transaction binding the contract method 0x676594e2.
//
// Solidity: function deregistersubchain(uint256 subchainid) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Deregistersubchain(subchainid *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Deregistersubchain(&_SubchainRegistrar.TransactOpts, subchainid)
}

// Registersubchain is a paid mutator transaction binding the contract method 0x7d35d106.
//
// Solidity: function registersubchain(uint256 subchainid, address governancetoken, uint256 collateralamount, string genesishash) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Registersubchain(opts *bind.TransactOpts, subchainid *big.Int, governancetoken common.Address, collateralamount *big.Int, genesishash string) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "registersubchain", subchainid, governancetoken, collateralamount, genesishash)
}

// Registersubchain is a paid mutator transaction binding the contract method 0x7d35d106.
//
// Solidity: function registersubchain(uint256 subchainid, address governancetoken, uint256 collateralamount, string genesishash) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Registersubchain(subchainid *big.Int, governancetoken common.Address, collateralamount *big.Int, genesishash string) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Registersubchain(&_SubchainRegistrar.TransactOpts, subchainid, governancetoken, collateralamount, genesishash)
}

// Registersubchain is a paid mutator transaction binding the contract method 0x7d35d106.
//
// Solidity: function registersubchain(uint256 subchainid, address governancetoken, uint256 collateralamount, string genesishash) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Registersubchain(subchainid *big.Int, governancetoken common.Address, collateralamount *big.Int, genesishash string) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Registersubchain(&_SubchainRegistrar.TransactOpts, subchainid, governancetoken, collateralamount, genesishash)
}

// Slashchaincollateral is a paid mutator transaction binding the contract method 0xa59af648.
//
// Solidity: function slashchaincollateral(uint256 subchainid, uint256 slashamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Slashchaincollateral(opts *bind.TransactOpts, subchainid *big.Int, slashamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "slashchaincollateral", subchainid, slashamount)
}

// Slashchaincollateral is a paid mutator transaction binding the contract method 0xa59af648.
//
// Solidity: function slashchaincollateral(uint256 subchainid, uint256 slashamount) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Slashchaincollateral(subchainid *big.Int, slashamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Slashchaincollateral(&_SubchainRegistrar.TransactOpts, subchainid, slashamount)
}

// Slashchaincollateral is a paid mutator transaction binding the contract method 0xa59af648.
//
// Solidity: function slashchaincollateral(uint256 subchainid, uint256 slashamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Slashchaincollateral(subchainid *big.Int, slashamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Slashchaincollateral(&_SubchainRegistrar.TransactOpts, subchainid, slashamount)
}

// Slashvalidatorcollateral is a paid mutator transaction binding the contract method 0x98b71764.
//
// Solidity: function slashvalidatorcollateral(uint256 subchainid, address validator, address guarantor, uint256 slashamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Slashvalidatorcollateral(opts *bind.TransactOpts, subchainid *big.Int, validator common.Address, guarantor common.Address, slashamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "slashvalidatorcollateral", subchainid, validator, guarantor, slashamount)
}

// Slashvalidatorcollateral is a paid mutator transaction binding the contract method 0x98b71764.
//
// Solidity: function slashvalidatorcollateral(uint256 subchainid, address validator, address guarantor, uint256 slashamount) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Slashvalidatorcollateral(subchainid *big.Int, validator common.Address, guarantor common.Address, slashamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Slashvalidatorcollateral(&_SubchainRegistrar.TransactOpts, subchainid, validator, guarantor, slashamount)
}

// Slashvalidatorcollateral is a paid mutator transaction binding the contract method 0x98b71764.
//
// Solidity: function slashvalidatorcollateral(uint256 subchainid, address validator, address guarantor, uint256 slashamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Slashvalidatorcollateral(subchainid *big.Int, validator common.Address, guarantor common.Address, slashamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Slashvalidatorcollateral(&_SubchainRegistrar.TransactOpts, subchainid, validator, guarantor, slashamount)
}

// Updateadmin is a paid mutator transaction binding the contract method 0x47fd8035.
//
// Solidity: function updateadmin(address newadmin) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Updateadmin(opts *bind.TransactOpts, newadmin common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "updateadmin", newadmin)
}

// Updateadmin is a paid mutator transaction binding the contract method 0x47fd8035.
//
// Solidity: function updateadmin(address newadmin) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Updateadmin(newadmin common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updateadmin(&_SubchainRegistrar.TransactOpts, newadmin)
}

// Updateadmin is a paid mutator transaction binding the contract method 0x47fd8035.
//
// Solidity: function updateadmin(address newadmin) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Updateadmin(newadmin common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updateadmin(&_SubchainRegistrar.TransactOpts, newadmin)
}

// Updategovernor is a paid mutator transaction binding the contract method 0x4e696251.
//
// Solidity: function updategovernor(address newgovernor) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Updategovernor(opts *bind.TransactOpts, newgovernor common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "updategovernor", newgovernor)
}

// Updategovernor is a paid mutator transaction binding the contract method 0x4e696251.
//
// Solidity: function updategovernor(address newgovernor) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Updategovernor(newgovernor common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updategovernor(&_SubchainRegistrar.TransactOpts, newgovernor)
}

// Updategovernor is a paid mutator transaction binding the contract method 0x4e696251.
//
// Solidity: function updategovernor(address newgovernor) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Updategovernor(newgovernor common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updategovernor(&_SubchainRegistrar.TransactOpts, newgovernor)
}

// Updateminchaincollateralamount is a paid mutator transaction binding the contract method 0xd4eaeec3.
//
// Solidity: function updateminchaincollateralamount(uint256 amount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Updateminchaincollateralamount(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "updateminchaincollateralamount", amount)
}

// Updateminchaincollateralamount is a paid mutator transaction binding the contract method 0xd4eaeec3.
//
// Solidity: function updateminchaincollateralamount(uint256 amount) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Updateminchaincollateralamount(amount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updateminchaincollateralamount(&_SubchainRegistrar.TransactOpts, amount)
}

// Updateminchaincollateralamount is a paid mutator transaction binding the contract method 0xd4eaeec3.
//
// Solidity: function updateminchaincollateralamount(uint256 amount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Updateminchaincollateralamount(amount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updateminchaincollateralamount(&_SubchainRegistrar.TransactOpts, amount)
}

// Updateminvalidatorcollateralamount is a paid mutator transaction binding the contract method 0xc94a8664.
//
// Solidity: function updateminvalidatorcollateralamount(uint256 amount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Updateminvalidatorcollateralamount(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "updateminvalidatorcollateralamount", amount)
}

// Updateminvalidatorcollateralamount is a paid mutator transaction binding the contract method 0xc94a8664.
//
// Solidity: function updateminvalidatorcollateralamount(uint256 amount) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Updateminvalidatorcollateralamount(amount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updateminvalidatorcollateralamount(&_SubchainRegistrar.TransactOpts, amount)
}

// Updateminvalidatorcollateralamount is a paid mutator transaction binding the contract method 0xc94a8664.
//
// Solidity: function updateminvalidatorcollateralamount(uint256 amount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Updateminvalidatorcollateralamount(amount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updateminvalidatorcollateralamount(&_SubchainRegistrar.TransactOpts, amount)
}

// Updatevcmowner is a paid mutator transaction binding the contract method 0x73f34ca9.
//
// Solidity: function updatevcmowner(address newowner) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Updatevcmowner(opts *bind.TransactOpts, newowner common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "updatevcmowner", newowner)
}

// Updatevcmowner is a paid mutator transaction binding the contract method 0x73f34ca9.
//
// Solidity: function updatevcmowner(address newowner) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Updatevcmowner(newowner common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updatevcmowner(&_SubchainRegistrar.TransactOpts, newowner)
}

// Updatevcmowner is a paid mutator transaction binding the contract method 0x73f34ca9.
//
// Solidity: function updatevcmowner(address newowner) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Updatevcmowner(newowner common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updatevcmowner(&_SubchainRegistrar.TransactOpts, newowner)
}

// Updatevsmowner is a paid mutator transaction binding the contract method 0xa8671f4f.
//
// Solidity: function updatevsmowner(address newowner) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Updatevsmowner(opts *bind.TransactOpts, newowner common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "updatevsmowner", newowner)
}

// Updatevsmowner is a paid mutator transaction binding the contract method 0xa8671f4f.
//
// Solidity: function updatevsmowner(address newowner) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Updatevsmowner(newowner common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updatevsmowner(&_SubchainRegistrar.TransactOpts, newowner)
}

// Updatevsmowner is a paid mutator transaction binding the contract method 0xa8671f4f.
//
// Solidity: function updatevsmowner(address newowner) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Updatevsmowner(newowner common.Address) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Updatevsmowner(&_SubchainRegistrar.TransactOpts, newowner)
}

// Withdrawcollateral is a paid mutator transaction binding the contract method 0xffb68ea2.
//
// Solidity: function withdrawcollateral(uint256 subchainid, address validatorcandidate, uint256 collateralamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Withdrawcollateral(opts *bind.TransactOpts, subchainid *big.Int, validatorcandidate common.Address, collateralamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "withdrawcollateral", subchainid, validatorcandidate, collateralamount)
}

// Withdrawcollateral is a paid mutator transaction binding the contract method 0xffb68ea2.
//
// Solidity: function withdrawcollateral(uint256 subchainid, address validatorcandidate, uint256 collateralamount) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Withdrawcollateral(subchainid *big.Int, validatorcandidate common.Address, collateralamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Withdrawcollateral(&_SubchainRegistrar.TransactOpts, subchainid, validatorcandidate, collateralamount)
}

// Withdrawcollateral is a paid mutator transaction binding the contract method 0xffb68ea2.
//
// Solidity: function withdrawcollateral(uint256 subchainid, address validatorcandidate, uint256 collateralamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Withdrawcollateral(subchainid *big.Int, validatorcandidate common.Address, collateralamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Withdrawcollateral(&_SubchainRegistrar.TransactOpts, subchainid, validatorcandidate, collateralamount)
}

// Withdrawstake is a paid mutator transaction binding the contract method 0x0cc33b7c.
//
// Solidity: function withdrawstake(uint256 subchainid, address validator, uint256 shareamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactor) Withdrawstake(opts *bind.TransactOpts, subchainid *big.Int, validator common.Address, shareamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.contract.Transact(opts, "withdrawstake", subchainid, validator, shareamount)
}

// Withdrawstake is a paid mutator transaction binding the contract method 0x0cc33b7c.
//
// Solidity: function withdrawstake(uint256 subchainid, address validator, uint256 shareamount) returns()
func (_SubchainRegistrar *SubchainRegistrarSession) Withdrawstake(subchainid *big.Int, validator common.Address, shareamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Withdrawstake(&_SubchainRegistrar.TransactOpts, subchainid, validator, shareamount)
}

// Withdrawstake is a paid mutator transaction binding the contract method 0x0cc33b7c.
//
// Solidity: function withdrawstake(uint256 subchainid, address validator, uint256 shareamount) returns()
func (_SubchainRegistrar *SubchainRegistrarTransactorSession) Withdrawstake(subchainid *big.Int, validator common.Address, shareamount *big.Int) (*types.Transaction, error) {
	return _SubchainRegistrar.Contract.Withdrawstake(&_SubchainRegistrar.TransactOpts, subchainid, validator, shareamount)
}

// SubchainRegistrarSlashchaincollateralIterator is returned from FilterSlashchaincollateral and is used to iterate over the raw logs and unpacked data for Slashchaincollateral events raised by the SubchainRegistrar contract.
type SubchainRegistrarSlashchaincollateralIterator struct {
	Event *SubchainRegistrarSlashchaincollateral // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainRegistrarSlashchaincollateralIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainRegistrarSlashchaincollateral)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainRegistrarSlashchaincollateral)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainRegistrarSlashchaincollateralIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainRegistrarSlashchaincollateralIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainRegistrarSlashchaincollateral represents a Slashchaincollateral event raised by the SubchainRegistrar contract.
type SubchainRegistrarSlashchaincollateral struct {
	Subchainid  *big.Int
	Slashamount *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSlashchaincollateral is a free log retrieval operation binding the contract event 0xa59af64849dda798103a98aa3c25417ccf13d3295848b39a57983ace0a5a8e32.
//
// Solidity: event slashchaincollateral(uint256 subchainid, uint256 slashamount)
func (_SubchainRegistrar *SubchainRegistrarFilterer) FilterSlashchaincollateral(opts *bind.FilterOpts) (*SubchainRegistrarSlashchaincollateralIterator, error) {

	logs, sub, err := _SubchainRegistrar.contract.FilterLogs(opts, "slashchaincollateral")
	if err != nil {
		return nil, err
	}
	return &SubchainRegistrarSlashchaincollateralIterator{contract: _SubchainRegistrar.contract, event: "slashchaincollateral", logs: logs, sub: sub}, nil
}

// WatchSlashchaincollateral is a free log subscription operation binding the contract event 0xa59af64849dda798103a98aa3c25417ccf13d3295848b39a57983ace0a5a8e32.
//
// Solidity: event slashchaincollateral(uint256 subchainid, uint256 slashamount)
func (_SubchainRegistrar *SubchainRegistrarFilterer) WatchSlashchaincollateral(opts *bind.WatchOpts, sink chan<- *SubchainRegistrarSlashchaincollateral) (event.Subscription, error) {

	logs, sub, err := _SubchainRegistrar.contract.WatchLogs(opts, "slashchaincollateral")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainRegistrarSlashchaincollateral)
				if err := _SubchainRegistrar.contract.UnpackLog(event, "slashchaincollateral", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashchaincollateral is a log parse operation binding the contract event 0xa59af64849dda798103a98aa3c25417ccf13d3295848b39a57983ace0a5a8e32.
//
// Solidity: event slashchaincollateral(uint256 subchainid, uint256 slashamount)
func (_SubchainRegistrar *SubchainRegistrarFilterer) ParseSlashchaincollateral(log types.Log) (*SubchainRegistrarSlashchaincollateral, error) {
	event := new(SubchainRegistrarSlashchaincollateral)
	if err := _SubchainRegistrar.contract.UnpackLog(event, "slashchaincollateral", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SubchainRegistrarSlashvalidatorcollateralIterator is returned from FilterSlashvalidatorcollateral and is used to iterate over the raw logs and unpacked data for Slashvalidatorcollateral events raised by the SubchainRegistrar contract.
type SubchainRegistrarSlashvalidatorcollateralIterator struct {
	Event *SubchainRegistrarSlashvalidatorcollateral // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SubchainRegistrarSlashvalidatorcollateralIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SubchainRegistrarSlashvalidatorcollateral)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SubchainRegistrarSlashvalidatorcollateral)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SubchainRegistrarSlashvalidatorcollateralIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SubchainRegistrarSlashvalidatorcollateralIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SubchainRegistrarSlashvalidatorcollateral represents a Slashvalidatorcollateral event raised by the SubchainRegistrar contract.
type SubchainRegistrarSlashvalidatorcollateral struct {
	Subchainid  *big.Int
	Validator   common.Address
	Slashamount *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSlashvalidatorcollateral is a free log retrieval operation binding the contract event 0x66452adb68378ceeb50f0e82ec6b3e18fa8dd9293d8cd4b8c9007da15a83d5bd.
//
// Solidity: event slashvalidatorcollateral(uint256 subchainid, address validator, uint256 slashamount)
func (_SubchainRegistrar *SubchainRegistrarFilterer) FilterSlashvalidatorcollateral(opts *bind.FilterOpts) (*SubchainRegistrarSlashvalidatorcollateralIterator, error) {

	logs, sub, err := _SubchainRegistrar.contract.FilterLogs(opts, "slashvalidatorcollateral")
	if err != nil {
		return nil, err
	}
	return &SubchainRegistrarSlashvalidatorcollateralIterator{contract: _SubchainRegistrar.contract, event: "slashvalidatorcollateral", logs: logs, sub: sub}, nil
}

// WatchSlashvalidatorcollateral is a free log subscription operation binding the contract event 0x66452adb68378ceeb50f0e82ec6b3e18fa8dd9293d8cd4b8c9007da15a83d5bd.
//
// Solidity: event slashvalidatorcollateral(uint256 subchainid, address validator, uint256 slashamount)
func (_SubchainRegistrar *SubchainRegistrarFilterer) WatchSlashvalidatorcollateral(opts *bind.WatchOpts, sink chan<- *SubchainRegistrarSlashvalidatorcollateral) (event.Subscription, error) {

	logs, sub, err := _SubchainRegistrar.contract.WatchLogs(opts, "slashvalidatorcollateral")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SubchainRegistrarSlashvalidatorcollateral)
				if err := _SubchainRegistrar.contract.UnpackLog(event, "slashvalidatorcollateral", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashvalidatorcollateral is a log parse operation binding the contract event 0x66452adb68378ceeb50f0e82ec6b3e18fa8dd9293d8cd4b8c9007da15a83d5bd.
//
// Solidity: event slashvalidatorcollateral(uint256 subchainid, address validator, uint256 slashamount)
func (_SubchainRegistrar *SubchainRegistrarFilterer) ParseSlashvalidatorcollateral(log types.Log) (*SubchainRegistrarSlashvalidatorcollateral, error) {
	event := new(SubchainRegistrarSlashvalidatorcollateral)
	if err := _SubchainRegistrar.contract.UnpackLog(event, "slashvalidatorcollateral", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
